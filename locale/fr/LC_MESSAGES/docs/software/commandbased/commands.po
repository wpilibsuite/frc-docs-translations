# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Kaitlyn Kenwell <redrield@gmail.com>, 2020
# Sami G.-D., 2020
# Austin Shalit <austinshalit@gmail.com>, 2021
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-09 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:2
msgid "Commands"
msgstr "Commandes"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:4
msgid ""
"Commands are simple state machines that perform high-level robot functions "
"using the methods defined by subsystems. Commands can be either idle, in "
"which they do nothing, or scheduled, in which the scheduler will execute a "
"specific set of the command’s code depending on the state of the command. "
"The ``CommandScheduler`` recognizes scheduled commands as being in one of "
"three states: initializing, executing, or ending. Commands specify what is "
"done in each of these states through the ``initialize()``, ``execute()`` and"
" ``end()`` methods.  Commands are represented in the command-based library "
"by the ``Command`` interface (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html>`__)."
msgstr ""
"Les commandes sont de simples à machines état fini qui exécutent des "
"fonctions de haut niveau du robot en utilisant les méthodes définies par les"
" sous-systèmes. Les commandes peuvent être soit inactives et, dans cas,  "
"elles ne font rien, soit planifiées, dans ce cas,  le planificateur de "
"commandes exécute un ensemble spécifique du code de la commande en fonction "
"de l’état de la commande. L'objet ``CommandScheduler`` reconnaît que les "
"commandes planifiées se font selon l’un des trois états : initialisation, "
"exécution ou terminaison. Les commandes spécifient ce qui se fait dans "
"chacun de ces états à travers les méthodes ``initialize()``, ``execute()`` "
"et ``end()``. Les commandes sont représentées dans la librairie orientée "
"commande par l’interface ``Command`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html>`__)."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:7
msgid "Creating Commands"
msgstr "Créer des commandes"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:9
msgid ""
"In the C++ API, a `CRTP "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>`__ is "
"used to allow certain Command methods to work with the object ownership "
"model.  Users should *always* extend the ``CommandHelper`` `class "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__"
" when defining their own command classes, as is shown below."
msgstr ""
"Dans l'API C++, un `CRTP "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>`__ est "
"utilisé pour permettre certaines méthodes Command de fonctionner avec le "
"modèle de propriété d'objets. L'utilisateur devrait *toujours* étendre la "
"`classe "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__"
" ``CommandHelper`` lorsqu'il définir sa propre classes de commande, comme "
"démontré ci-dessous."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:11
msgid ""
"Similarly to subsystems, the recommended method for most users to create a "
"command is to subclass the abstract ``CommandBase`` class (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandBase.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command_base.html>`__),"
" as seen in the command-based template (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/commands/ExampleCommand.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/commands/ExampleCommand.h>`__):"
msgstr ""
"De même que les sous-systèmes, la méthode recommandée pour la plupart des "
"utilisateurs pour créer une commande est de dériver la classe abstraite "
"``CommandBase`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/CommandBase.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command_base.html>`__),"
" as seen in the command-based template (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/commands/ExampleCommand.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/commands/ExampleCommand.h>`__):"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:15
#: ../../frc-docs/source/docs/software/commandbased/commands.rst:68
#: ../../frc-docs/source/docs/software/commandbased/commands.rst:100
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:23
msgid "C++"
msgstr "C++"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:31
msgid ""
"As before, this contains several convenience features. It automatically "
"overrides the ``getRequirements()`` method for users, returning a list of "
"requirements that is empty by default, but can be added to with the "
"``addRequirements()`` method. It also implements the ``Sendable`` interface,"
" and so can be sent to the dashboard - this provides a handy way for "
"scheduling commands for testing (via a button on the dashboard) without "
"needing to bind them to buttons on a controller."
msgstr ""
"Comme avant, cela permet l'accès à des fonctionnalités pratiques. Il "
"remplace automatiquement la méthode ``getRequirements()`` pour les "
"utilisateurs, qui retourne une liste des exigences qui est vide par défaut; "
"mais qui peut être ajoutée avec la méthode ``addRequirements()``. Il "
"implémente aussi l'interface ``Sendable`` et peut donc être envoyée au "
"Dashboard - cela permet de programmer facilement des commandes pour les "
"tests (par un bouton sur le tableau de bord) sans avoir besoin de les lier à"
" des boutons sur un contrôleur."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:34
msgid ""
"Also as before, advanced users seeking more flexibility are free to simply "
"create their own class implementing the ``Command`` interface."
msgstr ""
"Aussi comme avant, les utilisateurs avancées recherchant plus de flexibilité"
" peuvent simplement créer leur propre classe qui implémente l'interface "
"``Command``."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:37
msgid "The Structure of a Command"
msgstr "La structure d'une commande"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:39
msgid ""
"While subsystems are fairly freeform, and may generally look like whatever "
"the user wishes them to, commands are quite a bit more constrained. Command "
"code must specify what the command will do in each of its possible states. "
"This is done by overriding the ``initialize()``, ``execute()``, and "
"``end()`` methods. Additionally, a command must be able to tell the "
"scheduler when (if ever) it has finished execution - this is done by "
"overriding the ``isFinished()`` method. All of these methods are defaulted "
"to reduce clutter in user code: ``initialize()``, ``execute()``, and "
"``end()`` are defaulted to simply do nothing, while ``isFinished()`` is "
"defaulted to return false (resulting in a command that never ends)."
msgstr ""
"Tandis que les sous-systèmes, qui n'ont pas de structure définie et qui "
"peuvent généralement ressembler à ce que l'utilisateur souhaite, les "
"commandes sont beaucoup plus contraignantes. Le code des commandes doit "
"spécifier qu'est-ce que la commande va faire dans chacun des états "
"possibles. Cela se fait en remplacer les méthodes ``initialize()``, "
"``execute()`` et ``end()``. De plus, une commande doit être capable de dire "
"au planificateur quand elle a terminé son exécution (s'il y a lieu) - cela "
"se fait par le remplacement de la méthode ``isFinished()``. Toutes ces "
"méthodes sont vide par défaut pour réduire l'encombrement dans le code de "
"l'utilisateur. ``initialize()``, ``execute()`` et ``end()`` sont vide par "
"défaut, pour ne rien exécuter, et ``isFinished()`` retourne faux par défaut "
"(résultant en une commande qui ne termine jamais)."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:42
msgid "Initialization"
msgstr "Initialisation"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:44
msgid ""
"The ``initialize()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#initialize()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#ad3f1971a1b44ecdd4683d766f831bccd>`__)"
" is run exactly once per time a command is scheduled, as part of the "
"scheduler’s ``schedule()`` method. The scheduler’s ``run()`` method does not"
" need to be called for the ``initialize()`` method to run. The initialize "
"block should be used to place the command in a known starting state for "
"execution. It is also useful for performing tasks that only need to be "
"performed once per time scheduled, such as setting motors to run at a "
"constant speed or setting the state of a solenoid actuator."
msgstr ""
"La méthode ``initialize()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#initialize()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#ad3f1971a1b44ecdd4683d766f831bccd>`__)"
" est exécutée exactement une fois à chaque fois qu’une commande est "
"planifiée, dans la méthode ``schedule()`` du planificateur. La méthode "
"``run()`` du planificateur n’a pas besoin d’être appelée pour que la méthode"
" ``initialize()`` s’exécute. Le bloc d'initialisation est lieu à utiliser "
"pour placer la commande dans un état de départ connu pour l’exécution. Il "
"est également utile pour effectuer des tâches qui n’ont besoin d’être "
"exécutées qu’une fois à chaque itération du planificateur, comme le réglage "
"des moteurs pour fonctionner à une vitesse constante ou le réglage de l’état"
" d’un actionneur de type solénoïde."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:47
msgid "Execution"
msgstr "Exécution"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:49
msgid ""
"The ``execute()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#execute()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#a7d7ea1271f7dcc65c0ba3221d179b510>`__)"
" is called repeatedly while the command is scheduled, whenever the "
"scheduler’s ``run()`` method is called (this is generally done in the main "
"robot periodic method, which runs every 20ms by default). The execute block "
"should be used for any task that needs to be done continually while the "
"command is scheduled, such as updating motor outputs to match joystick "
"inputs, or using the output of a control loop."
msgstr ""
"La méthode ``execute()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#execute()>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#a7d7ea1271f7dcc65c0ba3221d179b510>`__)"
" est appelée à plusieurs reprises tant que la commande est planifiée, chaque"
" fois que la méthode ``run()`` du programmeur est appelée (cela se fait "
"généralement dans la méthode ``periodic()`` du robot, qui s’exécute toutes "
"les 20ms par défaut). Le bloc ``execute()`` doit être utilisé pour toute "
"tâche qui doit être effectuée en permanence pendant que la commande est "
"planifiée, comme la mise à jour des sorties du moteur pour correspondre aux "
"entrées joystick, ou l’utilisation de la sortie d’une boucle de contrôle."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:52
msgid "Ending"
msgstr "Terminaison"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:54
msgid ""
"The ``end()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#a134eda3756f00c667bb5415b23ee920c>`__)"
" is called once when the command ends, whether it finishes normally "
"(i.e. ``isFinished()`` returned true) or it was interrupted (either by "
"another command or by being explicitly canceled). The method argument "
"specifies the manner in which the command ended; users can use this to "
"differentiate the behavior of their command end accordingly. The end block "
"should be used to \"wrap up\" command state in a neat way, such as setting "
"motors back to zero or reverting a solenoid actuator to a \"default\" state."
msgstr ""
"La méthode ``end()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#a134eda3756f00c667bb5415b23ee920c>`__)"
" est appelée une fois que la commande se termine, si elle se termine "
"normalement (c’est-à-dire ``isFinished()`` retourne la valeur logique vrai) "
"ou elle a été interrompue (soit par une autre commande ou en étant "
"explicitement annulée). L’argument de la méthode précise la façon dont la "
"commande a pris fin; les utilisateurs peuvent l’utiliser pour différencier "
"le comportement de la fin de leur commande en conséquence. Le bloc ``end()``"
" doit être utilisé pour \"conclure\" l'exécution d'une commande d’une "
"manière soignée, comme le réglage des moteurs à zéro ou le retour d’un "
"actionneur de type solénoïde à un état par \"défaut\"."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:57
msgid "Specifying end conditions"
msgstr "Spécifier les conditions de terminaison"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:59
msgid ""
"The ``isFinished()`` method (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#af5e8c12152d195a4f3c06789366aac88>`__)"
" is called repeatedly while the command is scheduled, whenever the "
"scheduler’s ``run()`` method is called. As soon as it returns true, the "
"command’s ``end()`` method is called and it is un-scheduled. The "
"``isFinished()`` method is called *after* the ``execute()`` method, so the "
"command *will* execute once on the same iteration that it is un-scheduled."
msgstr ""
"La méthode ``isFinished()`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/wpilibj2/command/Command.html#end(boolean)>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc2_1_1_command.html#af5e8c12152d195a4f3c06789366aac88>`__)"
" est appelée à plusieurs reprises pendant que la commande est planifiée, "
"chaque fois que la méthode ``run()`` du planificateur est appelée. Dès "
"qu’elle retourne la valeur logique vraie, la méthode  ``end()`` de la "
"commande est appelée et elle sort de la liste des commandes commandes "
"planifiées. La méthode ``isFinished()`` est appelée *après* la méthode "
"``execute()`` de sorte que la commande *s’exécutera* une fois dans la même "
"itération dans laquelle elle est extraite de la liste des commandes "
"planifiées."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:62
msgid "Simple Command Example"
msgstr "Exemple de commande de base"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:64
msgid ""
"What might a functional command look like in practice? As before, below is a"
" simple command from the HatchBot example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional>`__)"
" that uses the ``HatchSubsystem`` introduced in the previous section:"
msgstr ""
"À quoi pourrait ressembler une commande fonctionnelle dans la pratique? "
"Comme précedemment, voici une commande simple du projet hatchbot exemple  "
"(`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional>`__)"
" qui utilise le ``HatchSubsystem`` introduit dans la section précédente:"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:76
#: ../../frc-docs/source/docs/software/commandbased/commands.rst:108
msgid "C++ (Header)"
msgstr "C++ (Header ou en-tête)"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:84
#: ../../frc-docs/source/docs/software/commandbased/commands.rst:116
msgid "C++ (Source)"
msgstr "C++ (Source)"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:92
msgid ""
"Notice that the hatch subsystem used by the command is passed into the "
"command through the command’s constructor. This is a pattern called "
"`dependency injection "
"<https://en.wikipedia.org/wiki/Dependency_injection>`__, and allows users to"
" avoid declaring their subsystems as global variables. This is widely "
"accepted as a best-practice - the reasoning behind this is discussed in a "
":doc:`later section <structuring-command-based-project>`."
msgstr ""
"Remarquez que le ``HatchSubsystem`` utilisé par la commande est passé dans "
"la commande via le constructeur de la commande. C'est un modèle appelé "
"`l'injection de dépendances "
"<https://fr.wikipedia.org/wiki/Injection_de_d%C3%A9pendances>`__, et qui "
"permet à l'utilisateur d'éviter de déclarer chaque sous-systèmes comme une "
"variable globale. Ceci est largement accepté comme une bonne pratique - le "
"raisonnement derrière ceci est expliqué dans une :doc:`section ultérieure "
"<structuring-command-based-project>`."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:94
msgid ""
"Notice also that the above command calls the subsystem method once from "
"initialize, and then immediately ends (as ``isFinished()`` simply returns "
"true). This is typical for commands that toggle the states of subsystems, "
"and in fact the command-based library includes code to make :ref:`commands "
"like this <docs/software/commandbased/convenience-features:InstantCommand>` "
"even more succinctly."
msgstr ""
"Remarquez aussi que la commande ci-dessus appelle la méthode de sous-système"
" une fois dès l'initialisation et se termine immédiatement (puisque "
"``isFinished()`` retourne vrai). Ceci est normal pour les commandes qui "
"changent les états d'un sous-système, et en fait, la bibliothèque orientée "
"commande contient du code pour faire :ref:`des commandes comme celle-ci "
"<docs/software/commandbased/convenience-features:InstantCommand>` encore "
"plus succinctement."

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:96
msgid ""
"What about a more complicated case? Below is a drive command, from the same "
"example project:"
msgstr ""
"Mais que se passe-t-il dans un cas plus compliqué? Ci-dessous se trouve une "
"commande de pilotage, du même projet d'exemple :"

#: ../../frc-docs/source/docs/software/commandbased/commands.rst:124
msgid ""
"Notice that this command does not override ``isFinished()``, and thus will "
"never end; this is the norm for commands that are intended to be used as "
"default commands (and, as can be guessed, the library includes tools to make"
" :ref:`this kind of command <docs/software/commandbased/convenience-"
"features:RunCommand>` easier to write, too!)."
msgstr ""
"Remarquez que la commande ne remplace pas ``isFinished()``, et ne se "
"terminera donc jamais; ceci est la norme pour les commandes qui sont "
"destinées à être utilisées comme comandes par défaut (et, comme on peut le "
"deviner, la bibliothèque inclus des outils pour rendre :ref:`ce genre de "
"commande <docs/software/commandbased/convenience-features:RunCommand>` plus "
"facile a écrire aussi!)."
