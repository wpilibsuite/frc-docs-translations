# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-18 04:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:05+0000\n"
"Last-Translator: Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:4
msgid "Read and Process Video: CameraServer Class"
msgstr "Videoyu Okuyun ve İşleyin: CameraServer Sınıfı"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:7
msgid "Concepts"
msgstr "Kavramlar"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:9
msgid ""
"The cameras typically used in FRC\\ |reg| (commodity USB and Ethernet "
"cameras such as the Axis camera) offer relatively limited modes of "
"operation. In general, they provide only a single image output (typically in"
" an RGB compressed format such as JPG) at a single resolution and frame "
"rate. USB cameras are particularly limited as only one application may "
"access the camera at a time."
msgstr ""
"Genellikle FRC \\ | reg | içinde kullanılan kameralar (Axis kamera gibi "
"ticari USB ve Ethernet kameraları) nispeten sınırlı çalışma modları sunar. "
"Genel olarak, tek bir çözünürlük ve kare hızında yalnızca tek bir görüntü "
"çıkışı (tipik olarak JPG gibi bir RGB sıkıştırılmış biçimde) sağlarlar. Bir "
"seferde yalnızca bir uygulama kameraya erişebileceğinden, USB kameralar "
"özellikle sınırlıdır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:11
msgid ""
"CameraServer supports multiple cameras. It handles details such as "
"automatically reconnecting when a camera is disconnected, and also makes "
"images from the camera available to multiple \"clients\" (e.g. both your "
"robot code and the dashboard can connect to the camera simultaneously)."
msgstr ""
"CameraServer birden fazla kamerayı destekler. Bir kameranın bağlantısı "
"kesildiğinde otomatik olarak yeniden bağlanma gibi ayrıntıları yönetir ve "
"ayrıca kameradaki görüntüleri birden çok \"clients-istemciye\" sunar "
"(örneğin, hem robot kodunuz hem de kontrol paneliniz kameraya aynı anda "
"bağlanabilir)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:14
msgid "Camera Names"
msgstr "Kamera Adları"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:16
msgid ""
"Each camera in CameraServer must be uniquely named. This is also the name "
"that appears for the camera in the Dashboard. Some variants of the "
"CameraServer ``startAutomaticCapture()`` and ``addAxisCamera()`` functions "
"will automatically name the camera (e.g. \"USB Camera 0\" or \"Axis "
"Camera\"), or you can give the camera a more descriptive name (e.g. \"Intake"
" Cam\"). The only requirement is that each camera have a unique name."
msgstr ""
"CameraServer'daki her kamera benzersiz bir şekilde adlandırılmalıdır. Bu "
"aynı zamanda Panodaki kamera için görünen addır. CameraServer'ın `` "
"startAutomaticCapture ()`` ve `` addAxisCamera ()``  işlevlerinin bazı "
"varyantları, kamerayı otomatik olarak adlandırır (örneğin, \"USB Kamera 0\" "
"veya \"Eksen Kamera\") veya kameraya daha açıklayıcı bir ad verebilirsiniz "
"(örneğin \"Giriş Kamı\"). Tek şart, her kameranın benzersiz bir isme sahip "
"olmasıdır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:19
msgid "USB Camera Notes"
msgstr "USB Kamera Notları"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:22
msgid "CPU Usage"
msgstr "CPU kullanımı"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:24
msgid ""
"The CameraServer is designed to minimize CPU usage by only performing "
"compression and decompression operations when required and automatically "
"disabling streaming when no clients are connected."
msgstr ""
"CameraServer, yalnızca gerektiğinde sıkıştırma ve açma işlemlerini "
"gerçekleştirerek ve hiçbir istemci bağlı değilken akışı otomatik olarak "
"devre dışı bırakarak CPU kullanımını en aza indirecek şekilde "
"tasarlanmıştır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:26
msgid ""
"To minimize CPU usage, the dashboard resolution should be set to the same "
"resolution as the camera; this allows the CameraServer to not decompress and"
" recompress the image, instead, it can simply forward the JPEG image "
"received from the camera directly to the dashboard. It's important to note "
"that changing the resolution on the dashboard does *not* change the camera "
"resolution; changing the camera resolution may be done by calling "
"``setResolution()`` on the camera object."
msgstr ""
"CPU kullanımını en aza indirmek için, gösterge paneli çözünürlüğü kamera ile"
" aynı çözünürlüğe ayarlanmalıdır; bu, CameraServer'ın görüntüyü açıp yeniden"
" sıkıştırmamasına izin verir; bunun yerine, kameradan alınan JPEG "
"görüntüsünü doğrudan kontrol paneline iletebilir. Kontrol panelindeki "
"çözünürlüğün değiştirilmesinin kamera çözünürlüğünü * değiştirmediğini * "
"unutmamak önemlidir; kamera çözünürlüğünü değiştirmek, kamera nesnesi "
"üzerinde `` setResolution ()``  çağrısı yapılarak yapılabilir."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:29
msgid "USB Bandwidth"
msgstr "USB Bant Genişliği"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:31
msgid ""
"The roboRIO can only transmit and receive so much data at a time over its "
"USB interfaces. Camera images can require a lot of data, and so it is "
"relatively easy to run into this limit. The most common cause of a USB "
"bandwidth error is selecting a non-JPEG video mode or running too high of a "
"resolution, particularly when multiple cameras are connected."
msgstr ""
"RoboRIO, USB arayüzleri üzerinden bir seferde yalnızca bu kadar çok veriyi "
"iletebilir ve alabilir. Kamera görüntüleri çok fazla veri gerektirebilir ve "
"bu nedenle bu sınıra uymak nispeten kolaydır. Bir USB bant genişliği "
"hatasının en yaygın nedeni, JPEG olmayan bir video modu seçmek veya "
"özellikle birden fazla kamera bağlıyken çok yüksek bir çözünürlük "
"çalıştırmaktır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:34
msgid "Architecture"
msgstr "Mimari"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:36
msgid ""
"The CameraServer consists of two layers, the high level WPILib "
"**CameraServer class** and the low level **cscore library**."
msgstr ""
"CameraServer iki katmandan oluşur; yüksek düzeyli WPILib **CameraServer "
"class**  ve düşük düzey **cscore library**."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:39
msgid "CameraServer Class"
msgstr "CameraServer Sınıfı"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:41
msgid ""
"The CameraServer class (part of WPILib) provides a high level interface for "
"adding cameras to your robot code. It also is responsible for publishing "
"information about the cameras and camera servers to NetworkTables so that "
"Driver Station dashboards such as the LabVIEW Dashboard and Shuffleboard can"
" list the cameras and determine where their streams are located. It uses a "
"singleton pattern to maintain a database of all created cameras and servers."
msgstr ""
"CameraServer sınıfı (WPILib'in bir parçası), robot kodunuza kamera eklemek "
"için yüksek düzeyde bir arayüz sağlar. Ayrıca, LabVIEW Dashboard ve "
"Shuffleboard gibi Driver Station panolarının kameraları listeleyebilmesi ve "
"akışlarının nerede konumlandığını belirleyebilmesi için, kameralar ve kamera"
" sunucuları hakkındaki bilgileri NetworkTables'da yayınlamaktan sorumludur. "
"Oluşturulan tüm kameraların ve sunucuların bir veritabanını korumak için tek"
" bir model kullanır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:43
msgid "Some key functions in CameraServer are:"
msgstr "CameraServer'daki bazı temel işlevler şunlardır:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:45
msgid ""
"``startAutomaticCapture()``: Add a USB camera (e.g. Microsoft LifeCam) and "
"starts a server for it so it can be viewed from the dashboard."
msgstr ""
"``startAutomaticCapture ()`` : Bir USB kamera ekleyin (örn.Microsoft "
"LifeCam) ve panodan görüntülenebilmesi için onun için bir sunucu başlatır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:46
msgid ""
"``addAxisCamera()``: Add an Axis camera. Even if you aren't processing "
"images from the Axis camera in your robot code, you may want to use this "
"function so that the Axis camera appears in the Dashboard's drop down list "
"of cameras. It also starts a server so the Axis stream can still be viewed "
"when your driver station is connected to the roboRIO via USB (useful at "
"competition if you have both the Axis camera and roboRIO connected to the "
"two robot radio Ethernet ports)."
msgstr ""
"``addAxisCamera ()`` : Bir Axis kamerası ekleyin. Axis kamerasından "
"görüntüleri robot kodunuzda işlemiyor olsanız bile, Axis kamerasının "
"Dashboard'un açılır kamera listesinde görünmesi için bu işlevi kullanmak "
"isteyebilirsiniz. Ayrıca bir sunucu başlatır, böylece sürücü istasyonunuz "
"roboRIO'ya USB aracılığıyla bağlandığında Axis akışı hala görüntülenebilir "
"(iki robot radyo Ethernet portuna hem Axis kamera hem de roboRIO bağlıysa "
"rekabette yararlıdır)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:47
msgid ""
"``getVideo()``: Get OpenCV access to a camera. This allows you to get images"
" from the camera for image processing on the roboRIO (in your robot code)."
msgstr ""
"``getVideo ()``: Bir kameraya OpenCV erişimi sağlayın. Bu, roboRIO'da (robot"
" kodunuzda) görüntü işleme için kameradan görüntüler almanızı sağlar."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:48
msgid ""
"``putVideo()``: Start a server that you can feed OpenCV images to. This "
"allows you to pass custom processed and/or annotated images to the "
"dashboard."
msgstr ""
"``putVideo ()``: OpenCV görüntülerini besleyebileceğiniz bir sunucu "
"başlatın. Bu, özel işlenmiş ve / veya açıklamalı görüntüleri kontrol "
"paneline iletmenize olanak tanır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:51
msgid "cscore Library"
msgstr "cscore Kütüphanesi"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:53
msgid "The cscore library provides the lower level implementation to:"
msgstr "Cscore kütüphanesi, aşağıdakilere daha düşük düzeyde uygulama sağlar:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:55
msgid "Get images from USB and HTTP (e.g. Axis) cameras"
msgstr "USB ve HTTP (örneğin Axis) kameralardan görüntüler alın"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:56
msgid "Change camera settings (e.g. contrast and brightness)"
msgstr "Kamera ayarlarını değiştirin (ör. Kontrast ve parlaklık)"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:57
msgid "Change camera video modes (pixel format, resolution and frame rate)"
msgstr ""
"Kamera video modlarını değiştirin (piksel formatı, çözünürlük ve kare hızı)"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:58
msgid "Act as a web server and serve images as a standard MJPEG stream"
msgstr ""
"Bir web sunucusu olarak hareket edin ve görüntüleri standart bir MJPEG akışı"
" olarak sunun"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:59
msgid "Convert images to/from OpenCV ``Mat`` objects for image processing"
msgstr ""
"Görüntü işleme için görüntüleri OpenCV ``Mat``  nesnelere / nesnelere "
"dönüştürün"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:62
msgid "Sources and Sinks"
msgstr "Kaynaklar ve Havuzlar"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:64
msgid ""
"The basic architecture of the cscore library is similar to that of "
"MJPGStreamer, with functionality split between sources and sinks. There can "
"be multiple sources and multiple sinks created and operating simultaneously."
msgstr ""
"Cscore kütüphanesinin temel mimarisi, işlevsellik kaynaklar ve havuzlar "
"arasında bölünmüş olarak MJPGStreamer ile benzerdir. Aynı anda oluşturulan "
"ve çalışan birden çok kaynak ve birden çok havuz olabilir."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:66
msgid ""
"An object that generates images is a source and an object that "
"accepts/consumes images is a sink. The generate/consume is from the "
"perspective of the library. Thus cameras are sources (they generate images)."
" The MJPEG web server is a sink because it accepts images from within the "
"program (even though it may be forwarding those images on to a web browser "
"or dashboard). Sources may be connected to multiple sinks, but sinks can be "
"connected to one and only one source. When a sink is connected to a source, "
"the cscore library takes care of passing each image from the source to the "
"sink."
msgstr ""
"Görüntü üreten bir nesne bir kaynaktır ve görüntüleri kabul eden / tüketen "
"bir nesne bir havuzdur. Üretme / tüketme, kütüphane perspektifindedir. "
"Dolayısıyla kameralar birer kaynaktır (görüntü üretirler). MJPEG web "
"sunucusu, programın içinden görüntüleri kabul ettiği için bir havuzdur (bu "
"görüntüleri bir web tarayıcısına veya kontrol paneline iletiyor olsa bile). "
"Kaynaklar birden fazla havuza bağlanabilir, ancak havuzlar bir ve yalnızca "
"bir kaynağa bağlanabilir. Bir havuz bir kaynağa bağlandığında, cscore "
"kitaplığı her bir görüntüyü kaynaktan havuza aktarmaya özen gösterir."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:68
msgid ""
"**Sources** obtain individual frames (such as provided by a USB camera) and "
"fire an event when a new frame is available. If no sinks are listening to a "
"particular source, the library may pause or disconnect from a source to save"
" processor and I/O resources. The library autonomously handles camera "
"disconnects/reconnects by simply pausing and resuming firing of events (e.g."
" a disconnect results in no new frames, not an error)."
msgstr ""
"** Kaynaklar **, ayrı kareleri (bir USB kamera tarafından sağlananlar gibi) "
"alır ve yeni bir çerçeve mevcut olduğunda bir olayı tetikler. Belli bir "
"kaynağı dinleyen havuzlar yoksa, işlemci ve G / Ç kaynaklarını kaydetmek "
"için kitaplık duraklayabilir veya bir kaynaktan bağlantıyı kesebilir. "
"Kütüphane, yalnızca olayların tetiklenmesini duraklatıp yeniden başlatarak "
"kamera bağlantı kesmelerini / yeniden bağlantılarını özerk bir şekilde "
"yönetir (örneğin, bir bağlantı kesilmesi yeni çerçevelerin olmaması, bir "
"hata olmamasıyla sonuçlanır)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:69
msgid ""
"**Sinks** listen to a particular source's event, grab the latest image, and "
"forward it to its destination in the appropriate format. Similarly to "
"sources, if a particular sink is inactive (e.g. no client is connected to a "
"configured MJPEG over HTTP server), the library may disable parts of its "
"processing to save processor resources."
msgstr ""
"**Sinks-Havuzlar ** belirli bir kaynağın etkinliğini dinler, en son "
"görüntüyü alır ve uygun formatta hedefine iletir. Kaynaklara benzer şekilde,"
" belirli bir havuz etkin değilse (örneğin, HTTP sunucusu üzerinden "
"yapılandırılmış bir MJPEG'e hiçbir istemci bağlı değilse), kitaplık, işlemci"
" kaynaklarını korumak için işlemenin bazı kısımlarını devre dışı "
"bırakabilir."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:71
msgid ""
"User code (such as that used in a FRC robot program) can act as either a "
"source (providing processed frames as if it were a camera) or as a sink "
"(receiving a frame for processing) via OpenCV source and sink objects. Thus "
"an image processing pipeline that gets images from a camera and serves the "
"processed images out looks like the below graph:"
msgstr ""
"Kullanıcı kodu (bir FRC robot programında kullanılanlar gibi), OpenCV "
"kaynağı ve havuz nesneleri aracılığıyla bir kaynak (bir kamera gibi işlenmiş"
" çerçeveler sağlar) veya bir havuz (işlenmek üzere bir çerçeve alır) olarak "
"işlev görebilir. Bu nedenle, bir kameradan görüntüleri alan ve işlenmiş "
"görüntüleri sunan bir görüntü işleme hattı aşağıdaki grafiğe benzer:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:76
msgid ""
"Because sources can have multiple sinks connected, the pipeline may branch. "
"For example, the original camera image can also be served by connecting the "
"UsbCamera source to a second MjpegServer sink in addition to the CvSink, "
"resulting in the below graph:"
msgstr ""
"Kaynakların bağlı birden fazla havuzu olabileceğinden, boru hattı dallara "
"ayrılabilir. Örneğin, orijinal kamera görüntüsü, UsbCamera kaynağını "
"CvSink'e ek olarak ikinci bir MjpegServer havuzuna bağlayarak da "
"sunulabilir, bu da aşağıdaki grafikle sonuçlanır:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:81
msgid ""
"When a new image is captured by the camera, both the CvSink and the "
"MjpegServer [1] receive it."
msgstr ""
"Kamera tarafından yeni bir görüntü yakalandığında, hem CvSink hem de "
"MjpegServer [1] onu alır."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:83
msgid "The above graph is what the following CameraServer snippet creates:"
msgstr ""
"Yukarıdaki grafik, aşağıdaki CameraServer snippet'inin oluşturduğu şeydir:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:115
msgid ""
"The CameraServer implementation effectively does the following at the cscore"
" level (for explanation purposes). CameraServer takes care of many of the "
"details such as creating unique names for all cscore objects and "
"automatically selecting port numbers. CameraServer also keeps a singleton "
"registry of created objects so they aren't destroyed if they go out of "
"scope."
msgstr ""
"CameraServer uygulaması, aşağıdakileri cscore düzeyinde etkin bir şekilde "
"yapar (açıklama amacıyla). CameraServer, tüm cscore nesneleri için benzersiz"
" adlar oluşturma ve bağlantı noktası numaralarını otomatik olarak seçme gibi"
" birçok ayrıntıyla ilgilenir. CameraServer ayrıca, kapsam dışına "
"çıktıklarında imha edilmemeleri için oluşturulan nesnelerin tek bir kaydını "
"tutar."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:159
msgid "Reference Counting"
msgstr "Referans Sayma"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:161
msgid ""
"All cscore objects are internally reference counted. Connecting a sink to a "
"source increments the source's reference count, so it's only strictly "
"necessary to keep the sink in scope. The CameraServer class keeps a registry"
" of all objects created with CameraServer functions, so sources and sinks "
"created in that way effectively never go out of scope (unless explicitly "
"removed)."
msgstr ""
"Tüm cscore nesneleri dahili olarak referans olarak sayılır. Bir havuzun bir "
"kaynağa bağlanması, kaynağın referans sayısını artırır, bu nedenle yalnızca "
"havuzun kapsamda tutulması kesinlikle gereklidir. CameraServer sınıfı, "
"CameraServer işlevleriyle oluşturulan tüm nesnelerin kaydını tutar, bu "
"nedenle bu şekilde oluşturulan kaynaklar ve havuzlar hiçbir zaman kapsam "
"dışına çıkmaz (açıkça kaldırılmadıkça)."
