# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# Andre Theberge <atheberge2@videotron.ca>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-09-05 16:11+0000\n"
"PO-Revision-Date: 2020-09-04 16:14+0000\n"
"Last-Translator: Andre Theberge <atheberge2@videotron.ca>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:2
msgid "A Technical Discussion on C++ Commands"
msgstr "Une discussion technique sur les commandes C++"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:3
msgid ""
"This article serves as a technical discussion on some of the design "
"decisions that were made when designing the new command-based framework in "
"C++. You do not need to understand the information within this article to "
"use the command-based framework in your robot code."
msgstr ""
"Le présent article est une discussion technique sur certaines des décisions "
"qui ont été prises lors de la conception du nouveau cadre basé sur les "
"commandes (Command-based Framework) en C++. Il ne vous est pas nécessaire de"
" comprendre les informations contenues dans cet article pour utiliser ce "
"cadre dans votre code robot."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:5
msgid ""
"This article assumes that you have a fair understanding of advanced C++ "
"concepts, including templates, smart pointers, inheritance, rvalue "
"references, copy semantics, move semantics, and CRTP."
msgstr ""
"Cet article suppose que vous avez une bonne compréhension des concepts "
"avancés du C ++, y compris les modèles, les pointeurs intelligents, "
"l'héritage, les références rvalue, la sémantique de copie, la sémantique de "
"déplacement et CRTP."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:7
msgid ""
"This article will help you understand the reasoning behind some of the "
"decisions made in the new command-based framework (such as the use of "
"``std::unique_ptr``, CRTP in the form of ``CommandHelper<Base, Derived>``, "
"the lack of more advanced decorators that are available in Java, etc.)"
msgstr ""
"Cet article vous aidera à comprendre le raisonnement derrière certaines des "
"décisions prises dans le nouveau cadre basé sur les commandes (comme "
"l'utilisation de `` std :: unique_ptr '', CRTP sous la forme de `` "
"CommandHelper <Base, Derived> `` `, le manque de décorateurs plus avancés "
"disponibles en Java, etc.)"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:10
msgid "Ownership Model"
msgstr "Modèle de propriété"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:11
msgid ""
"The old command-based framework employed the use of raw pointers, meaning "
"that users had to use ``new`` (resulting in manual heap allocations) in "
"their robot code. Since there was no clear indication on who owned the "
"commands (the scheduler, the command groups, or the user themselves), it was"
" not apparent who was supposed to take care of freeing the memory."
msgstr ""
"L'ancien cadre basé sur les commandes utilisait des pointeurs bruts, ce qui "
"signifie que les usagers devaient employer la déclaration ``new`` (résultant"
" en des allocations manuelles de mémoire de type \"heap\") dans leur code "
"robot. Comme il n'y avait aucune indication claire sur quel partie du "
"programme qui était responsable des commandes (le planificateur, les groupes"
" de commandes ou l'utilisateur lui-même), il n'était pas évident de savoir "
"qui devait s'occuper de libérer cette mémoire allouée."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:13
msgid ""
"Several examples in the old command-based framework involved code like this:"
msgstr ""
"Plusieurs exemples dans l'ancien cadre basé sur des commandes impliquaient "
"du code comme celui-ci:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:27
msgid ""
"In the command-group above, the component commands of the command group were"
" being heap allocated and passed into ``AddSequential`` all in the same "
"line. This meant that that user had no reference to that object in memory "
"and therefore had no means of freeing the allocated memory once the command "
"group ended. The command group itself never freed the memory and neither did"
" the command scheduler. This led to memory leaks in robot programs (i.e. "
"memory was allocated on the heap but never freed)."
msgstr ""
"Dans le groupe de commandes ci-dessus, les commandes des composants relatifs"
" au groupe de commandes ont leur mémoire allouée (heap) passée via "
"``AddSequential`` sur la même ligne. Cela signifie que cet utilisateur "
"n'avait aucune référence à cet objet en mémoire et n'avait donc aucun moyen "
"de libérer la mémoire allouée une fois le groupe de commandes terminé. Le "
"groupe de commandes lui-même n'a jamais libéré la mémoire ni le "
"planificateur de commandes.  Ceci est néfaste, causant ainsi des 'fuites' de"
" mémoire dans le programme (c'est-à-dire que la mémoire a été allouée, mais "
"jamais libérée)."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:29
msgid ""
"This glaring problem was one of the reasons for the rewrite of the "
"framework. A comprehensive ownership model was introduced with this rewrite,"
" along with the usage of smart pointers which will automatically free memory"
" when they go out of scope."
msgstr ""
"Ce problème flagrant a été l'une des raisons de la réécriture du cadre. Un "
"nouveau modèle de propriété complet a été généré avec cette réécriture, qui "
"comprend l'utilisation de pointeurs intelligents pour libérer "
"automatiquement la mémoire lorsqu'ils ne seront plus actifs."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:31
msgid ""
"Default commands are owned by the command scheduler whereas component "
"commands of command groups are owned by the command group. Other commands "
"are owned by whatever the user decides they should be owned by (e.g. a "
"subsystem instance or a ``RobotContainer`` instance). This means that the "
"ownership of the memory allocated by any commands or command groups is "
"clearly defined."
msgstr ""
"Les commandes par défaut appartiennent au planificateur de commandes, tandis"
" que les commandes de composants des groupes de commandes appartiennent au "
"groupe de commandes. Les autres commandes appartiennent à tout ce que "
"l'utilisateur décide qu'elles devraient appartenir (par exemple, une "
"instance de sous-système ou une instance de ``RobotContainer``). Cela "
"signifie que la propriété de la mémoire allouée par les commandes ou groupes"
" de commandes est clairement définie."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:34
msgid "``std::unique_ptr`` vs. ``std::shared_ptr``"
msgstr "``std::unique_ptr`` vs. ``std::shared_ptr``"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:35
msgid ""
"Using ``std::unique_ptr`` allows us to clearly determine who owns the "
"object. Because an ``std::unique_ptr`` cannot be copied, there will never be"
" more than one instance of a ``std::unique_ptr`` that points to the same "
"block of memory on the heap. For example, a constructor for "
"``SequentialCommandGroup`` takes in a "
"``std::vector<std::unique_ptr<Command>>&&``. This means that it requires an "
"rvalue reference to a vector of ``std::unique_ptr<Command>``. Let's go "
"through some example code step-by-step to understand this better:"
msgstr ""
"L'utilisation de ``std::unique_ptr`` nous permet de déterminer clairement à "
"qui appartient l'objet. Comme un ``std::unique_ptr`` ne peut pas être copié,"
" il n'y aura jamais plus d'une instance de ``std::unique_ptr`` qui pointe "
"vers le même bloc de mémoire allouée. Par exemple, un constructeur pour "
"``SequentialCommandGroup`` prend un "
"``std::vector<std::unique_ptr<Command>>&&``. Cela signifie qu'il nécessite "
"une référence rvalue à un vecteur de ``std::unique_ptr``<Command>. Passons "
"en revue un exemple de code étape par étape pour mieux comprendre cela:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:61
msgid ""
"With ``std::shared_ptr``, there is no clear ownership model because there "
"can be multiple instances of a ``std::shared_ptr`` that point to the same "
"block of memory. If commands were in ``std::shared_ptr`` instances, a "
"command group or the command scheduler cannot take ownership and free the "
"memory once the command has finished executing because the user might still "
"unknowingly still have a ``std::shared_ptr`` instance pointing to that block"
" of memory somewhere in scope."
msgstr ""
"Avec ``std::shared_ptr``, il n'y a pas de modèle de propriété clair car il "
"peut y avoir plusieurs instances d'un ``std::shared_ptr`` qui pointent vers "
"le même bloc de mémoire. Si les commandes étaient dans des instances "
"``std::shared_ptr``, un groupe de commandes ou le planificateur de commandes"
" ne peuvent pas prendre possession et libérer la mémoire une fois que la "
"commande a fini de s'exécuter car l'utilisateur peut encore, sans le savoir,"
" avoir une instance ``std::shared_ptr`` pointant vers ce bloc de mémoire "
"quelque part."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:64
msgid "Use of CRTP"
msgstr "Utilisation de CRTP"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:65
msgid ""
"You may have noticed that in order to create a new command, you must extend "
"``CommandHelper``, providing the base class (usually ``frc2::Command``) and "
"the class that you just created. Let's take a look at the reasoning behind "
"this:"
msgstr ""
"Vous avez peut-être remarqué que pour créer une nouvelle commande, vous "
"devez étendre ``CommandHelper``, en fournissant la classe de base "
"(généralement ``frc2::Command``) et la classe que vous venez de créer. "
"Analysons ce raisonnement:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:68
msgid "Command Decorators"
msgstr "Décorateurs de commandes"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:69
msgid ""
"The new command-based framework includes a feature known as \"command "
"decorators\", which allows the user to something like this:"
msgstr ""
"Le nouveau cadre basé sur les commandes comprend une fonctionnalité connue "
"sous le nom de \"décorateurs de commandes\", qui permet à l'utilisateur de "
"faire quelque chose comme ceci:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:76
msgid ""
"When ``task`` is scheduled, it will first execute ``MyCommand()`` and once "
"that command has finished executing, it will print the message to the "
"console. The way this is achieved internally is by using a sequential "
"command group."
msgstr ""
"Lorsque ``task`` est planifiée, elle exécutera d'abord ``MyCommand()`` et "
"une fois que cette commande aura fini de s'exécuter, elle imprimera le "
"message sur la console. La façon dont cela est réalisé en interne consiste à"
" utiliser un groupe de commandes séquentielles."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:78
msgid ""
"Recall from the previous section that in order to construct a sequential "
"command group, we need a vector of unique pointers to each command. Creating"
" the unique pointer for the print function is pretty trivial:"
msgstr ""
"Rappelez-vous de la section précédente que pour construire un groupe de "
"commandes séquentielles, nous avons besoin d'un vecteur de pointeurs uniques"
" vers chaque commande. La création du pointeur unique pour la fonction "
"d'impression est assez simple:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:85
msgid ""
"Here ``temp`` is storing the vector of commands that we need to pass into "
"the ``SequentialCommandGroup`` constructor. But before we add that "
"``InstantCommand``, we need to add ``MyCommand()`` to the "
"``SequentialCommandGroup``. How do we do that?"
msgstr ""
"Ici, ``temp`` stocke le vecteur de commandes que nous devons passer dans le "
"constructeur ``SequentialCommandGroup``. Mais avant d'ajouter  "
"``InstantCommand``, nous devons ajouter `` MyCommand () '' au "
"``SequentialCommandGroup``. Comment fait-on cela?"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:91
msgid ""
"You might think it would be this straightforward, but that is not the case. "
"Because this decorator code is in the ``Command`` interface, ``*this`` "
"refers to the ``Command`` in the subclass that you are calling the decorator"
" from and has the type of ``Command``. Effectively, you will be trying to "
"move a ``Command`` instead of ``MyCommand``. We could cast the ``this`` "
"pointer to a ``MyCommand*`` and then dereference it but we have no "
"information about the subclass to cast to at compile-time."
msgstr ""
"Vous pourriez penser que ce serait simple, mais ce n'est pas le cas. Le code"
" de décorateur se trouve dans l'interface ``Command``, ``*this`` (notez "
"l'astérisque) fait référence à  ``Command`` dans la sous-classe à partir de "
"laquelle vous appelez le décorateur et possède le type ``Command``. En "
"effet, vous essaierez de déplacer  ``Command`` au lieu de ``MyCommand``. "
"Nous pourrions convertir le pointeur ``this`` en  ``MyCommand*``, puis le "
"déréférencer, mais nous n'avons aucune information sur la sous-classe à "
"convertir au moment de la compilation."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:94
msgid "Solutions to the Problem"
msgstr "Solutions au problème"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:96
msgid ""
"Our initial solution to this was to create a virtual method in ``Command`` "
"called ``TransferOwnership()`` that every subclass of ``Command`` had to "
"override. Such an override would have looked like this:"
msgstr ""
"Notre solution initiale à cela était de créer une méthode virtuelle dans "
"``Command`` appelée ``TransferOwnership()`` que chaque sous-classe de "
"``Command`` devait remplacer. Un tel remplacement aurait ressemblé à ceci:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:104
msgid ""
"Because the code would be in the derived subclass, ``*this`` would actually "
"point to the desired subclass instance and the user has the type info of the"
" derived class to make the unique pointer."
msgstr ""
"Parce que le code serait dans la sous-classe dérivée, ``*this`` pointerait "
"alors vers l'instance souhaitée de la sous-classe, et par conséquant, "
"l'utilisateur dispose alors des informations de type de la classe dérivée "
"pour créer le pointeur unique."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:106
msgid ""
"After a few days of deliberation, a CRTP method was proposed. Here, an "
"intermediary derived class of ``Command`` called ``CommandHelper`` would "
"exist. ``CommandHelper`` would have two template arguments, the original "
"base class and the desired derived subclass. Let's take a look at a basic "
"implementation of ``CommandHelper`` to understand this:"
msgstr ""
"Après quelques jours de délibération, une méthode CRTP a été proposée. Ici, "
"une classe dérivée intermédiaire de ``Command`` appelée ``CommandHelper`` "
"serait créé. ``CommandHelper`` aurait deux arguments de modèle, la classe de"
" base d'origine et la sous-classe dérivée souhaitée. Jetons un coup d'œil à "
"une implémentation de base de ``CommandHelper`` pour comprendre ceci:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:126
msgid ""
"Thus, making your custom commands extend ``CommandHelper`` instead of "
"``Command`` will automatically implement this boilerplate for you and this "
"is the reasoning behind asking teams to use what may seem to be a rather "
"obscure way of doing things."
msgstr ""
"Ainsi, en faisant étendre vos commandes personnalisées via  "
"``CommandHelper`` au lieu de ``Command`` fera implémenter automatiquement ce"
" processus pour vous et c'est le raisonnement derrière le fait de demander "
"aux équipes d'utiliser ce qui peut sembler être une façon assez obscure de "
"faire les choses."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:128
msgid "Going back to our ``AndThen()`` example, we can now do the following:"
msgstr ""
"Pour revenir à notre exemple ``AndThen()``, nous pouvons maintenant faire ce"
" qui suit:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:138
msgid "Lack of Advanced Decorators"
msgstr "Manque de décorateurs avancés"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:139
msgid ""
"Most of the C++ decorators take in ``std::function<void()>`` instead of "
"actual commands themselves. The idea of taking in actual commands in "
"decorators such as ``AndThen()``, ``BeforeStarting()``, etc. was considered "
"but then abandoned due to a variety of reasons."
msgstr ""
"La plupart des décorateurs C ++ utilisent ``std::function<void()>`` au lieu "
"des commandes proprement dites. L'idée de prendre des commandes réelles dans"
" les décorateurs telles que ``AndThen()``, ``BeforeStarting()``, etc. a été "
"envisagée mais abandonnée pour diverses raisons."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:142
msgid "Templating Decorators"
msgstr "Décorateurs de modèles"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:143
msgid ""
"Because we need to know the types of the commands that we are adding to a "
"command group at compile-time, we will need to use templates (variadic for "
"multiple commands). However, this might not seem like a big deal. The "
"constructors for command groups do this anyway:"
msgstr ""
"Parce que nous avons besoin de connaître les types de commandes que nous "
"ajoutons à un groupe de commandes au moment de la compilation, nous devrons "
"utiliser des modèles (variadic pour plusieurs commandes). Cependant, cela "
"peut ne pas sembler un gros problème. Les constructeurs des groupes de "
"commandes le font par défaut:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:165
msgid ""
"This is a secondary constructor for ``SequentialCommandGroup`` in addition "
"to the vector constructor that we described above."
msgstr ""
"Il s'agit d'un constructeur secondaire pour ``SequentialCommandGroup`` en "
"plus du constructeur vectoriel que nous avons décrit ci-dessus."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:167
msgid ""
"However, when we make a templated function, its definition must be declared "
"inline. This means that we will need to instantiate the "
"``SequentialCommandGroup`` in the ``Command.h`` header, which poses a "
"problem. ``SequentialCommandGroup.h`` includes ``Command.h``. If we include "
"``SequentialCommandGroup.h`` inside of ``Command.h``, we have a circular "
"dependency. How do we do it now then?"
msgstr ""
"Cependant, lorsque nous créons une fonction basée sur un modèle, sa "
"définition doit être déclarée en ligne. Cela signifie que nous devrons "
"instancier le ``SequentialCommandGroup`` dans l'en-tête ``Command.h``, ce "
"qui pose un problème. ``SequentialCommandGroup.h`` inclut ``Command.h``. Si "
"nous incluons ``SequentialCommandGroup.h`` à l'intérieur de ``Command.h``, "
"nous avons une dépendance circulaire. Comment procéder alors?"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:169
msgid "We use a forward declaration at the top of ``Command.h``:"
msgstr "Nous utilisons une déclaration en haut de ``Command.h``:"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:177
msgid ""
"And then we include ``SequentialCommandGroup.h`` in ``Command.cpp``. If "
"these decorator functions were templated however, we cannot write "
"definitions in the ``.cpp`` files, resulting in a circular dependency."
msgstr ""
"Et puis nous incluons ``SequentialCommandGroup.h`` dans  ``Command.cpp``. "
"Cependant, si ces fonctions décoratrices ont été modélisées, nous ne pouvons"
" pas écrire de définitions dans les fichiers ``.cpp``, ce qui entraîne une "
"dépendance circulaire."

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:180
msgid "Java vs C++ Syntax"
msgstr "Syntaxe Java vs C ++"

#: ../../frc-docs/source/docs/software/commandbased/cpp-command-discussion.rst:181
msgid ""
"These decorators usually save more verbosity in Java (because Java requires "
"raw ``new`` calls) than in C++, so in general, it does not make much of a "
"syntanctic difference in C++ if you create the command group manually in "
"user code."
msgstr ""
"Ces décorateurs réduisent la verbosité en Java (car Java nécessite des "
"appels bruts de type ``new``) par rapport à C ++, donc en général, cela ne "
"fait pas beaucoup de différence au niveau de la syntaxe en C ++ si vous "
"créez le groupe de commandes manuellement dans le code utilisateur."
