# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 楚涵 张 <zhangchuhan1210@126.com>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-01 04:07+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: 楚涵 张 <zhangchuhan1210@126.com>, 2020\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:2
msgid "Tuning a PID Controller"
msgstr "调整PID控制器"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:4
msgid ""
"These steps apply to position PID controllers. Velocity PID controllers "
"typically don't need :math:`K_d`."
msgstr "这些步骤适用于位置PID控制器。速度PID控制器通常不需要:math:`K_d`。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:6
msgid "Set :math:`K_p`, :math:`K_i`, and :math:`K_d` to zero."
msgstr "将 :math:`K_p`，:math:`K_i`和 :math:`K_d`设置为零。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:7
msgid ""
"Increase :math:`K_p` until the :term:`output` starts to oscillate around the"
" :term:`setpoint`."
msgstr "增加:math:`K_p` 直到输出开始围绕 :term:`setpoint`振荡。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:8
msgid ""
"Increase :math:`K_d` as much as possible without introducing jittering in "
"the :term:`system response`."
msgstr "尽可能增加 :math:`K_d` ，而不会在 :term:`system response`中引入抖动。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:10
msgid ""
"Plot the position :term:`setpoint`, velocity :term:`setpoint`, measured "
"position, and measured velocity. The velocity :term:`setpoint` can be "
"obtained via numerical differentiation of the position :term:`setpoint` "
"(i.e., :math:`v_{desired,k} = \\frac{r_k - r_{k-1}}{\\Delta t}`). Increase "
":math:`K_p` until the position tracks well, then increase :math:`K_d` until "
"the velocity tracks well."
msgstr ""
"标出位置 :term:`setpoint`、速度 "
":term:`setpoint`、测量位置和测量速度。通过对位置:term:`setpoint`的数值微分，可以得到速度:term:`setpoint`"
" (i.e., :math:`v_{desired,k} = \\frac{r_k - r_{k-1}}{\\Delta t}`) "
"。增加:math:`K_p` 直到位置轨迹良好，然后增加 :math:`K_d`直到速度轨迹良好。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:12
msgid ""
"If the :term:`controller` settles at an :term:`output` above or below the "
":term:`setpoint`, one can increase :math:`K_i` such that the "
":term:`controller` reaches the :term:`setpoint` in a reasonable amount of "
"time. However, a steady-state feedforward is strongly preferred over "
"integral control (especially for PID control)."
msgstr ""
"如果 :term:`controller` 控制器的输出稳定在 :term:`setpoint`之上或之下，则可以增加 :math:`K_i` "
"的值以使:term:`controller`控制器达到 :term:`setpoint` "
"在合理的时间内。但是，稳态积分前馈优于积分控制（尤其是对于PID控制）。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:14
msgid ""
"Adding an integral gain to the :term:`controller` is an incorrect way to "
"eliminate :term:`steady-state error`. A better approach would be to tune it "
"with an integrator added to the :term:`plant`, but this requires a "
":term:`model`. Since we are doing output-based rather than model-based "
"control, our only option is to add an integrator to the :term:`controller`."
msgstr ""
"向 :term:`controller`添加积分增益是消除 :term:`steady-state "
"error`的不正确方法。更好的方法是使用添加到:term:`plant`的积分器对其进行调整，但这需要使用:term:`model`。由于我们正在执行基于输出的控制，而不是基于模型的控制，因此，我们唯一的选择是在"
" :term:`controller中添加一个积分器。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:16
msgid ""
"Beware that if :math:`K_i` is too large, integral windup can occur. "
"Following a large change in :term:`setpoint`, the integral term can "
"accumulate an error larger than the maximal :term:`control input`. As a "
"result, the system overshoots and continues to increase until this "
"accumulated error is unwound."
msgstr ""
"请注意，如果:math:`K_i` "
"过大，则会发生积分缠绕。:term:`setpoint`发生较大变化后，积分项会累积大于最大:term:`control "
"input`的误差。结果，系统超调并继续增加，直到该累积的错误消失为止。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:21
msgid "Actuator Saturation"
msgstr "执行器饱和"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:23
msgid ""
"A controller calculates its output based on the error between the "
":term:`reference` and the current :term:`state`. :term:`Plant <plant>` in "
"the real world don't have unlimited control authority available for the "
"controller to apply. When the actuator limits are reached, the controller "
"acts as if the gain has been temporarily reduced."
msgstr ""
"控制器根据 :term:`reference` 和 :term:`state`之间的误差来计算其输出。现实世界中的 :term:`Plant "
"1`<plant>没有无限的控制权可用于控制器。当达到执行器极限时，控制器的作用就好像增益已暂时减小。"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:25
msgid ""
"We'll try to explain this through a bit of math. Let's say we have a "
"controller :math:`u = k(r - x)` where :math:`u` is the :term:`control "
"effort`, :math:`k` is the gain, :math:`r` is the :term:`reference`, and "
":math:`x` is the current state. Let :math:`u_{max}` be the limit of the "
"actuator's output which is less than the uncapped value of :math:`u` and "
":math:`k_{max}` be the associated maximum gain. We will now compare the "
"capped and uncapped controllers for the same :term:`reference` and current "
":term:`state`."
msgstr ""
"我们将尝试通过一些数学来解释这一点。假设我们有一个控制器:math:`u = k(r - x)` 其中， :math:`u` "
"是:term:`control effort`，而:math:`k`是增益。  :math:`r` "
"是:term:`reference`，:math:`x`是当前状态。令 :math:`u_{max}` "
"是执行器输出的极限，该极限小于执行器的上限值，而:math:`u` 和 :math:`k_{max}` 是相关的最大增益。现在，我们将比较相同的 "
":term:`reference`和当前的 :term:`state`的有上限和无上限控制器"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:27
msgid ""
"u_{max} &< u \\\\\n"
"k_{max}(r - x) &< k(r - x) \\\\\n"
"k_{max} &< k\n"
"\n"
msgstr ""
"u_{max} &< u \\\\\n"
"k_{max}(r - x) &< k(r - x) \\\\\n"
"k_{max} &< k\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/introduction/tuning-pid-controller.rst:32
msgid ""
"For the inequality to hold, :math:`k_{max}` must be less than the original "
"value for :math:`k`. This reduced gain is evident in a :term:`system "
"response` when there is a linear change in state instead of an exponential "
"one as it approaches the :term:`reference`. This is due to the "
":term:`control effort` no longer following a decaying exponential plot. Once"
" the :term:`system` is closer to the :term:`reference`, the controller will "
"stop saturating and produce realistic controller values again."
msgstr ""
"为了保持不等式，:math:`k_{max}` 必须小于 :math:`k`的原始值。当状态出现线性变化而不是指数变化时，这种增益的减少在 "
":term:`system response` 中是明显的，因为它接近于 :term:`reference`。这是由于:term:`control "
"effort` 不再遵循衰减的指数图。一旦 :term:`system` 更接近 "
":term:`reference`，控制器将停止饱和并再次产生逼真的控制器值。"
