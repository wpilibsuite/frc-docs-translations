# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 楚涵 张 <zhangchuhan1210@126.com>, 2020
# Yitong Zhao <lucius300er@outlook.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Yitong Zhao <lucius300er@outlook.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:2
msgid "Linear Filters"
msgstr "线性滤波器"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:4
msgid ""
"The first (and most commonly-employed) sort of filter that WPILib supports "
"is a *linear filter* - or, more specifically, a linear time-invariant (LTI) "
"filter."
msgstr "WPILib支持的第一种(也是最常用的)过滤器是线性过滤器，或者更具体地说，线性定常(LTI)过滤器。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:6
msgid ""
"An LTI filter is, put simply, a weighted moving average - the value of the "
"output stream at any given time is a localized, weighted average of the "
"inputs near that time.  The difference between different types of LTI "
"filters is thus reducible to the difference in the choice of the weighting "
"function (also known as a \"window function\" or an \"impulse response\") "
"used.  Mathematically, this kind of moving average is known as a "
"`convolution <https://en.wikipedia.org/wiki/Convolution>`__."
msgstr ""
"简单地说，LTI滤波器是一个加权移动平均值——输出流在任何给定时间的值是在该时间附近输入的局部加权平均值。因此，不同类型LTI滤波器之间的差异可简化为使用的加权函数(也称为“窗口函数”或“脉冲响应”)选择上的差异。在数学上，这种移动平均线被称为卷积。`convolution"
" <https://en.wikipedia.org/wiki/Convolution>`__."

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:8
msgid ""
"There are two broad \"sorts\" of impulse responses: infinite impulse "
"responses (IIR), and finite impulse responses (FIR)."
msgstr "有两种广义的脉冲响应:无限脉冲响应(IIR)和有限脉冲响应(FIR)。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:10
msgid ""
"Infinite impulse responses have infinite \"support\" - that is, they are "
"nonzero over an infinitely-large region.  This means, broadly, that they "
"also have infinite \"memory\" - once a value appears in the input stream, it"
" will influence *all subsequent outputs, forever*.  This is typically "
"undesirable from a strict signal-processing perspective, however filters "
"with infinite impulse responses tend to be very easy to compute as they can "
"be expressed by simple recursion relations."
msgstr ""
"无限脉冲响应具有无限的“支持”——也就是说，它们在一个无穷大的区域上是非零的。广义上来说，这意味着它们也有无限的“内存”——一旦一个值出现在输入流中，它将永远影响所有后续输出。从严格的信号处理角度来看，这通常是不希望看到的，但是具有无限脉冲响应的滤波器往往非常容易计算，因为它们可以用简单的递归关系来表示。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:12
msgid ""
"Finite impulse responses have finite \"support\" - that is, they are nonzero"
" on a bounded region.  The \"archetypical\" FIR filter is a flat moving "
"average - that is, simply setting the output equal to the average of the "
"past n inputs.  FIR filters tend to have more-desirable properties than IIR "
"filters, but are more costly to compute."
msgstr ""
"有限冲激响应具有有限的“支持”-也就是说，它们在有界区域上不为零。 “典型” FIR滤波器是一个固定的移动平均值-"
"也就是说，只需将输出设置为等于过去n个输入的平均值即可。 FIR滤波器往往比IIR滤波器具有更理想的属性，但计算成本更高。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:17
msgid "Creating a LinearFilter"
msgstr "创建一个LinearFilter"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:19
msgid ""
"The C++ ``LinearFilter`` class is templated on the data type used for the "
"input."
msgstr "c++``LinearFilter``类被模板化为用于输入的数据类型。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:21
msgid ""
"Because filters have \"memory\", each input stream requires its own filter "
"object.  Do *not* attempt to use the same filter object for multiple input "
"streams."
msgstr "因为过滤器有“内存”，所以每个输入流都需要它自己的过滤器对象。不要尝试对多个输入流使用相同的过滤器对象。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:23
msgid ""
"While it is possible to directly instantiate ``LinearFilter`` class to build"
" a custom filter, it is far more convenient (and common) to use one of the "
"supplied factory methods, instead:"
msgstr "虽然可以直接实例化“ LinearFilter”类以构建自定义过滤器，但使用提供的工厂模式之一要方便得多（并且更常见），而不是："

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:26
msgid "singlePoleIIR"
msgstr "单极IIR"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:31
msgid ""
"The ``singlePoleIIR()`` factory method creates a single-pole infinite "
"impulse response filter (also known as `exponential smoothing "
"<https://en.wikipedia.org/wiki/Exponential_smoothing>`__, on account of "
"having an exponential impulse response).  This is the \"go-to,\" \"first-"
"try\" low-pass filter in most applications; it is computationally trivial "
"and works in most cases."
msgstr ""
"singlePoleIIR（）工厂模式创建一个单极无限冲激响应滤波器（由于具有指数冲激响应，因此也称为“指数平滑 `exponential "
"smoothing "
"<https://en.wikipedia.org/wiki/Exponential_smoothing>`__,）。在大多数应用中，这是“首选”，“初试”低通滤波器。它在计算上是微不足道的，并且在大多数情况下都可以使用。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:49
msgid ""
"The \"time constant\" parameter determines the \"characteristic timescale\" "
"of the filter's impulse response; the filter will cancel out any signal "
"dynamics that occur on timescales significantly shorter than this.  "
"Relatedly, it is also the approximate timescale of the introduced "
":ref:`phase lag <docs/software/advanced-controls/filters/introduction:Phase "
"Lag>`.  The reciprocal of this timescale, multiplied by 2 pi, is the "
"\"cutoff frequency\" of the filter."
msgstr ""
"参数“时间常数”决定了滤波器的脉冲响应的“特征时间尺度”。滤波器将抵消在明显短于此的时间范围内发生的任何信号动态。相关地，它也是引入的相位滞后:ref:`phase"
" lag <docs/software/advanced-controls/filters/introduction:Phase "
"Lag>`的近似时间尺度 。该时间标度的倒数乘以2，即为滤波器的“截止频率”。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:51
#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:103
msgid ""
"The \"period\" parameter is the period at which the filter's ``calculate()``"
" method will be called.  For the vast majority of implementations, this will"
" be the standard main robot loop period of 0.02 seconds."
msgstr "参数“ period”是过滤器的calculate（）方法将被调用的时间段。对于绝大多数实施方式，这将是0.02秒的标准主机器人循环周期。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:54
msgid "movingAverage"
msgstr "移动平均值"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:59
msgid ""
"The ``movingAverage`` factory method creates a simple flat moving average "
"filter.  This is the simplest possible low-pass FIR filter, and is useful in"
" many of the same contexts as the single-pole IIR filter.  It is somewhat "
"more costly to compute, but generally behaves in a somewhat nicer manner."
msgstr ""
"``movingAverage''工厂模式创建一个简单的平面移动平均滤波器。这是最简单的低通FIR滤波器，在许多与单极IIR滤波器相同的环境中很有用。它的计算成本较高，但通常表现得更好。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:75
msgid ""
"The \"taps\" parameter is the number of samples that will be included in the"
" flat moving average.  This behaves similarly to the \"time constant\" above"
" - the effective time constant is the number of taps times the period at "
"which ``calculate()`` is called."
msgstr "“抽头”参数是将包含在固定移动平均值中的样本数。这与上面的“时间常数”类似-有效时间常数是抽头数乘以调用calculate（）的时间段。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:78
msgid "highPass"
msgstr "高通"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:83
msgid ""
"The ``highPass`` factory method creates a simple first-order infinite "
"impulse response high-pass filter.  This is the \"counterpart\" to the "
"`singlePoleIIR`_."
msgstr "highPass工厂模式创建一个简单的一阶无限冲激响应高通滤波器。这是“ singlePoleIIR” _的“对手”。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:101
msgid ""
"The \"time constant\" parameter determines the \"characteristic timescale\" "
"of the filter's impulse response; the filter will cancel out any signal "
"dynamics that occur on timescales significantly longer than this.  "
"Relatedly, it is also the approximate timescale of the introduced "
":ref:`phase lead <docs/software/advanced-controls/filters/introduction:Phase"
" lag>`.  The reciprocal of this timescale, multiplied by 2 pi, is the "
"\"cutoff frequency\" of the filter."
msgstr ""
"“时间常数”参数确定了滤波器的脉冲响应的“特征时间尺度”； 滤波器将消除在时间尺度上明显长于此的任何信号动态。相关地，它也是引入的相位超前 "
":ref:`phase lead <docs/software/advanced-controls/filters/introduction:Phase"
" lag>`. 的近似时间表。该时间刻度的倒数乘以2 ，即为滤波器的“截止频率”"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:106
msgid "Using a LinearFilter"
msgstr "使用LinearFilter"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:108
msgid ""
"In order for the created filter to obey the specified timescale parameter, "
"its ``calculate()`` function *must* be called regularly at the specified "
"period.  If, for some reason, a significant lapse in ``calculate()`` calls "
"must occur, the filter's ``reset()`` method should be called before further "
"use."
msgstr ""
"为了使创建的过滤器服从指定的时标参数，必须在指定时间段定期调用其calculate（）函数*。如果由于某种原因，必须在calculate（）调用中发生重大失误，则应在进一步使用之前调用过滤器的reset（）方法。"

#: ../../frc-docs/source/docs/software/advanced-controls/filters/linear-filter.rst:110
msgid ""
"Once your filter has been created, using it is easy - simply call the "
"``calculate()`` method with the most recent input to obtain the filtered "
"output:"
msgstr "创建过滤器后，使用起来很容易-只需使用最新输入调用calculate（）方法即可获取过滤后的输出："
