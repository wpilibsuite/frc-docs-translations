# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 楚涵 张 <zhangchuhan1210@126.com>, 2020
# Atlus Zhang <atluslan@yahoo.co.jp>, 2021
# Yitong Zhao <lucius300er@outlook.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-21 16:03+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:4
msgid "State-Space Controller Walkthrough"
msgstr "状态空间控制器演练"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:6
msgid ""
"Before following this tutorial, readers are recommended to have read an "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."
msgstr ""
"建议您在阅读本教程之前阅读:ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:8
msgid ""
"The goal of this tutorial is to provide \"end-to-end\" instructions on "
"implementing a state-space controller for a flywheel.  By following this "
"tutorial, readers will learn how to:"
msgstr "本教程的目的是提供有关为飞轮实现状态空间控制器的“端到端”指令。遵循本教程，读者将学习如何："

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:10
msgid ""
"Create an accurate state-space model of a flywheel using :term:`system "
"identification` or CAD software."
msgstr "使用:term:`system identification`或CAD软件创建飞轮的准确状态空间模型。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:11
msgid ""
"Implement a Kalman Filter to filter encoder velocity measurements without "
"lag."
msgstr "实现卡尔曼滤波器以无延迟地过滤编码器速度测量值。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:12
msgid ""
"Implement a :ref:`LQR <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` feedback controller which, when"
" combined with model-based feedforward, will generate voltage :term:`inputs "
"<input>` to drive the flywheel to a :term:`reference`."
msgstr ""
"实现一个 :ref:`LQR <docs/software/advanced-controls/state-space/state-space-"
"intro:The Linear-Quadratic Regulator>`反馈控制器，该反馈控制器与基于模型的前馈结合时将产生电压 "
":term:`inputs 1`，来驱动飞轮到:term:`reference`。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:14
msgid ""
"This tutorial is intended to be approachable for teams without a great deal "
"of programming expertise.  While the WPILib library offers significant "
"flexibility in the manner in which its state-space control features are "
"implemented, closely following the implementation outlined in this tutorial "
"should provide teams with a basic structure which can be reused for a "
"variety of state-space systems."
msgstr ""
"本教程适用于没有大量编程专业知识的团队。虽然WPILib库在实现其状态空间控制功能的方式上提供了显着的灵活性，但是紧跟本教程中概述的实现方式，应该为团队提供可以在各种状态空间系统中重用的基本结构。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:16
msgid ""
"The full example is available in the state-space flywheel (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" and state-space flywheel system identification (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" example projects."
msgstr ""
"完整的示例在状态空间飞轮（Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>"
" __ /`C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__）和状态空间飞轮系统标识（Java"
" Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__"
" /`C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__）中可用。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:19
msgid "Why Use State-Space Control?"
msgstr "为什么要使用状态空间控制？"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:21
msgid ""
"Because state-space control focuses on creating an accurate model of our "
"system, we can accurately predict how our :term:`model` will respond to "
"control :term:`inputs <input>`. This allows us to simulate our mechanisms "
"without access to a physical robot, as well as easily choose :term:`gains "
"<gain>` that we know will work well. Having a model also allows us to create"
" lagless filters, such as Kalman Filters, to optimally filter sensor "
"readings."
msgstr ""
"因为状态空间控制关注于创建系统的精确模型，所以我们可以准确地预测:term:`model` 将如何响应控制 :term:`inputs "
"1`。这允许我们在不接触物理机器人的情况下模拟我们的机制，以及轻松地选择我们知道将有效的 :term:`gains "
"2`。拥有模型还可以使我们创建无滞后的滤波器，例如卡尔曼滤波器，以最佳地过滤传感器读数。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:24
msgid "Modeling Our Flywheel"
msgstr "飞轮建模"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:26
msgid ""
":ref:`Recall <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` that continuous state-space systems "
"are modeled using the following system of equations:"
msgstr ""
":ref:`Recall <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` 连续状态空间系统是使用以下方程组建模的："

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:28
msgid ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"
"\n"
msgstr ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:36
msgid ""
"The first step of building up our state-space system is picking our system's"
" states. We can pick anything we want as a state -- we could pick completely"
" unrelated states if we wanted -- but it helps to pick states that are "
"important. We can include :term:`hidden states <hidden state>` in our state "
"(such as elevator velocity if we were only able to measure its position) and"
" let our Kalman Filter estimate their values. Remember that the states we "
"choose will be driven towards their respective :term:`references "
"<reference>` by the feedback controller (typically the :ref:`Linear-"
"Quadratic Regulator <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` since it's optimal)."
msgstr ""
"建立状态空间系统的第一步是选择系统的状态。我们可以选择任何想要的状态——如果需要，我们可以选择完全不相关的状态——但是选择重要的状态是有帮助的。我们可以在我们的状态中包含"
" :term:`hidden states 1` "
"(比如电梯速度，如果我们只能测量它的位置)，并让卡尔曼滤波器估计它们的值。记住，我们选择的状态将被反馈控制器(通常是:ref:`Linear-"
"Quadratic Regulator <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>`，因为它是最优的) 驱动到它们各自的 "
":term:`references 2`。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:38
msgid ""
"For our flywheel, we care only about one state: its velocity. While we could"
" chose to also model its acceleration, the inclusion of this state isn't "
"necessary for our system."
msgstr "对于飞轮，我们只关心一种状态：它的速度。尽管我们可以选择对其加速进行建模，但是对于我们的系统而言，不需要包含此状态。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:40
msgid ""
"Next, we identify the :term:`inputs <input>` to our system. Inputs can be "
"thought of as things we can put \"into\" our system to change its state. In "
"the case of the flywheel (and many other single-jointed mechanisms in FRC\\ "
"|reg|), we have just one input: voltage applied to the motor. By choosing "
"voltage as our input (over something like motor duty cycle), we can "
"compensate for battery voltage sag as battery load increases."
msgstr ""
"接下来，我们识别系统的 :term:`inputs 1`。可以将输入视为可以放入系统以更改其状态的事物。对于飞轮（以及FRC \\ | reg "
"|中的许多其他单联机构），我们只有一个输入:施加到电机的电压。通过选择电压作为我们的输入(而不是像电机占空比这样的东西)，我们可以补偿电池电压下降，电池负载增加。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:42
msgid ""
"A continuous-time state-space system writes :term:`x-dot`, or the "
"instantaneous rate of change of the system's :term:`system`\\'s state, as "
"proportional to the current :term:`state` and :term:`inputs <input>`. "
"Because our state is angular velocity, :math:`\\mathbf{\\dot{x}}` will be "
"the flywheel's angular acceleration."
msgstr ""
"连续时间状态空间系统将 :term:`x-dot`或:term:`system`\\'s状态的瞬时变化率，与:term:`state` 和 "
":term:`inputs 1` 成正比。因为我们的状态是角速度，:math:`\\mathbf{\\dot{x}}` 将是飞轮的角加速度。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:44
msgid ""
"Next, we will model our flywheel as a continuous-time state-space system. "
"WPILib's ``LinearSystem`` will convert this to discrete-time internally. "
"Review :ref:`state-space notation <docs/software/advanced-controls/state-"
"space/state-space-intro:What is State-Space Notation?>` for more on "
"continuous-time and discrete-time systems."
msgstr ""
"接下来，我们将把飞轮建模为一个连续时间状态空间系统。WPILib的线性系统将在内部将其转换为离散时间。回顾更多关于连续时间和离散时间系统的:ref:`state-"
"space notation <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` 。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:47
msgid "Modeling with System Identification"
msgstr "使用系统识别建模"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:49
msgid ""
"To rewrite this in state-space notation using :term:`system identification`,"
" we recall from the flywheel :ref:`state-space notation example "
"<docs/software/advanced-controls/state-space/state-space-intro:State-space "
"Notation Example: Flywheel from kV and kA>`, where we rewrote the following "
"equation in terms of :math:`\\mathbf{a}`."
msgstr ""
"为了使用系统标识将其重写为状态空间符号，我们从  :ref:`state-space notation example "
"<docs/software/advanced-controls/state-space/state-space-intro:State-space "
"Notation Example: Flywheel from kV and kA>`示例中进行回顾，其中我们用 "
":math:`\\mathbf{a}`重写了以下等式。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:51
msgid ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"
"\n"
msgstr ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:55
msgid ""
"Where :math:`\\mathbf{v}` is flywheel velocity, :math:`\\mathbf{a}` and "
":math:`\\mathbf{\\dot{v}}` are flywheel acceleration, and :math:`V` is "
"voltage. Rewriting this with the standard convention of :math:`\\mathbf{x}` "
"for the state vector and :math:`\\mathbf{u}` for the input vector, we find:"
msgstr ""
"其中:math:`\\mathbf{v}` 为飞轮速度，:math:`\\mathbf{a}`和:math:`\\mathbf{\\dot{v}}` "
"为飞轮加速度， :math:`V` 为电压。用 :math:`\\mathbf{x}` "
"的标准约定重写此状态向量，用:math:`\\mathbf{u}`的标准约定重写输入向量，我们发现:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:57
msgid ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} "
"\\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:60
msgid ""
"The second part of state-space notation relates the system's current "
":term:`state` and :term:`inputs <input>` to the :term:`output`. In the case "
"of a flywheel, our output vector :math:`\\mathbf{y}` (or things that our "
"sensors can measure) is our flywheel's velocity, which also happens to be an"
" element of our :term:`state` vector :math:`\\mathbf{x}`. Therefore, our "
"output matrix is :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, and"
" our system feedthrough matrix is :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Writing this out in continuous-time state-space notation "
"yields the following."
msgstr ""
"状态空间符号的第二部分将系统的当前 :term:`state`和:term:`inputs 1` 与 "
":term:`output`联系起来。对于飞轮，我们的输出向量:math:`\\mathbf{y}`(或者传感器可以测量的东西)是飞轮的速度，它也是 "
":term:`state`向量:math:`\\mathbf{x}`的一个元素，因此，我们的输出矩阵是 :math:`\\mathbf{C} = "
"\\begin{bmatrix}1 \\end{bmatrix}`，系统馈通矩阵是:math:`\\mathbf{D} = "
"\\begin{bmatrix}0 \\end{bmatrix}`。用连续时间状态空间符号写出这个结果。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:62
msgid ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:66
msgid ""
"The ``LinearSystem`` class contains methods for easily creating state-space "
"systems identified using :term:`system identification`. This example shows a"
" flywheel model with a kV of 0.023 and a kA of 0.001:"
msgstr ""
"“线性系统”类包含容易创建使用 :term:`system identification`的状态空间系统的方法。这个例子展示了一个kV为0.023 "
"kA为0.001的飞轮模型:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:93
msgid "Modeling Using Flywheel Moment of Inertia and Gearing"
msgstr "利用飞轮的惯性矩和齿轮传动进行建模"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:95
msgid ""
"A flywheel can also be modeled without access to a physical robot, using "
"information about the motors, gearing and flywheel's :term:`moment of "
"inertia`. A full derivation of this model is presented in Section 8.2.1 of  "
"`Controls Engineering in FRC <https://file.tavsys.net/control/controls-"
"engineering-in-frc.pdf>`__."
msgstr ""
"利用电机、传动装置和飞轮 :term:`moment of inertia`的信息，飞轮也可以在不接触实体机器人的情况下进行建模。在`Controls "
"Engineering in FRC <https://file.tavsys.net/control/controls-engineering-in-"
"frc.pdf>`8.2.1节中给出了该模型的完整推导。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:97
msgid ""
"The ``LinearSystem`` class contains methods to easily create a model of a "
"flywheel from the flywheel's motors, gearing and :term:`moment of inertia`. "
"The moment of inertia can be calculated using CAD software or using physics."
" The examples used here are detailed in the flywheel example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."
msgstr ""
"“线性系统”类包含了一些方法，可以很容易地从飞轮的马达、齿轮传动装置和 :term:`moment of "
"inertia`创建飞轮的模型。转动惯量可以用CAD软件计算，也可以用物理计算。这里使用的示例在飞轮示例项目(`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)中有详细说明。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:99
msgid ""
"For WPILib's state-space classes, gearing is written as output over input --"
" that is, if the flywheel spins slower than the motors, this number should "
"be greater than one."
msgstr "对于WPILib的状态空间类，齿轮传动被写为输入的输出-也就是说，如果飞轮的旋转速度慢于电动机的旋转速度，则该数字应大于1。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:101
msgid ""
"The C++ LinearSystem class uses :ref:`the C++ Units Library "
"<docs/software/basic-programming/cpp-units:The C++ Units Library>` to "
"prevent unit mixups and assert dimensionality."
msgstr ""
"线性系统类使用 :ref:`the C++ Units Library <docs/software/basic-programming/cpp-"
"units:The C++ Units Library>`来防止单元混淆和断言维数。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:128
msgid "Kalman Filters: Observing Flywheel State"
msgstr "卡尔曼滤波器:观察飞轮状态"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:130
msgid ""
"Kalman filters are used to filter our velocity measurements using our state-"
"space model to generate a state estimate :math:`\\mathbf{\\hat{x}}`. As our "
"flywheel model is linear, we can use a Kalman filter to estimate the "
"flywheel's velocity. WPILib's Kalman filter takes a ``LinearSystem`` (which "
"we found above), along with standard deviations of model and sensor "
"measurements. We can adjust how \"smooth\" our state estimate is by "
"adjusting these weights. Larger state standard deviations will cause the "
"filter to \"distrust\" our state estimate and favor new measurements more "
"highly, while larger measurement standard deviations will do the opposite."
msgstr ""
"卡尔曼滤波器用于过滤我们的速度测量使用我们的状态空间模型，以产生一个状态估计:math:`\\mathbf{\\hat{x}}`。由于我们的飞轮模型是线性的，我们可以使用卡尔曼滤波估计飞轮的速度。WPILib的卡尔曼滤波器采用线性系统(我们在上面发现的)，以及模型和传感器测量值的标准差。我们可以通过调整这些权重来调整我们的状态估计的“平滑度”。较大的状态标准差会导致过滤器“不信任”我们的状态估计值，更倾向于新的测量值，而较大的测量标准差则相反。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:132
msgid ""
"In the case of a flywheel we start with a state standard deviation of 3 "
"rad/s and a measurement standard deviation of 0.01 rad/s. These values are "
"up to the user to choose -- these weights produced a filter that was "
"tolerant to some noise but whose state estimate quickly reacted to external "
"disturbances for *a* flywheel -- and should be tuned to create a filter that"
" behaves well for your specific flywheel. Graphing states, measurements, "
"inputs, references, and outputs over time is a great visual way to tune "
"Kalman filters."
msgstr ""
"对于飞轮，我们的状态标准偏差为3 rad/s，测量标准偏差为0.01 "
"rad/s。这些值由用户来选择——这些权重产生了一个过滤器，它可以容忍一些噪音，但是它的状态估计可以快速地对*a*飞轮的外部干扰做出反应——应该进行调整，以创建一个适合特定飞轮的过滤器。将状态、测量值、输入、引用和输出随时间变化的图形化是调整卡尔曼滤波器的一种很好的可视化方法。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:137
msgid ""
"The above graph shows two differently tuned Kalman filters, as well as a "
":ref:`single-pole IIR filter <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` and a "
":ref:`docs/software/advanced-controls/filters/median-filter:Median Filter`. "
"This data was collected with a shooter over ~5 seconds, and four balls were "
"run through the shooter (as seen in the four dips in velocity). While there "
"are no hard rules on choosing good state and measurement standard "
"deviations, they should in general be tuned to trust the model enough to "
"reject noise while reacting quickly to external disturbances."
msgstr ""
"上图显示了两个不同调谐的卡尔曼滤波器，以及一个:ref:`single-pole IIR filter <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` 和 "
"一个:ref:`docs/software/advanced-controls/filters/median-filter:Median "
"Filter`。用射手在约5秒钟内收集了此数据，并且有四个球穿过射手（从四个速度下降中可以看出）。尽管没有关于选择良好状态和测量标准偏差的硬性规则，但通常应该对其进行调整以使模型具有足够的信任度，从而在对外部干扰做出快速反应的同时抑制噪声。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:139
msgid ""
"Because the feedback controller computes error using the :term:`x-hat` "
"estimated by the Kalman filter, the controller will react to disturbances "
"only as quickly the filter's state estimate changes. In the above chart, the"
" upper left plot (with a state standard deviation of 3.0 and measurement "
"standard deviation of 0.2) produced a filter that reacted quickly to "
"disturbances while rejecting noise, while the upper right plot shows a "
"filter that was barely affected by the velocity dips."
msgstr ""
"由于反馈控制器使用卡尔曼滤波器估计的 :term:`x-hat` "
"来计算误差，因此控制器只会对滤波器的状态估计值变化迅速做出反应。在上图中，橙色曲线（状态标准偏差为3.0，测量标准偏差为0.2）产生了一个过滤器，该过滤器对干扰快速反应，同时抑制了噪声，而品红色过滤器几乎不受速度下降的影响。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:165
msgid ""
"Because Kalman filters use our state-space model in the "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict step`, it is important that our model is as accurate as "
"possible. One way to verify this is to record a flywheel's input voltage and"
" velocity over time, and replay this data by calling only ``predict`` on the"
" Kalman filter. Then, the kV and kA gains (or moment of inertia and other "
"constants) can be adjusted until the model closely matches the recorded "
"data."
msgstr ""
"由于卡尔曼滤波器在 :ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict "
"step`步骤中使用我们的状态空间模型，因此我们的模型尽可能准确是很重要的。验证这一点的一种方法是记录飞轮随时间变化的输入电压和速度，然后通过仅调用Kalman滤波器上的预测来重放此数据。然后，可以调节kV和kA增益（或惯性矩和其他常数），直到模型与记录的数据紧密匹配为止。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "Todo"
msgstr "要做的事"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "do we need to elaborate on this^ more?"
msgstr "我们还需要详细说明吗？"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:170
msgid "Linear-Quadratic Regulators and Plant Inversion Feedforward"
msgstr "线性二次调节器和设备反转前馈"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:172
msgid ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` finds a feedback controller to drive our "
"flywheel :term:`system` to its :term:`reference`. Because our flywheel has "
"just one state, the control law picked by our LQR will be in the form "
":math:`\\mathbf{u = K (r - x)}` where :math:`\\mathbf{K}` is a 1x1 matrix; "
"in other words, the control law picked by LQR is simply a proportional "
"controller, or a PID controller with only a P gain. This gain is chosen by "
"our LQR based on the state excursion and control efforts we pass it. More on"
" tuning LQR controllers can be found in the :ref:`LQR application example "
"<docs/software/advanced-controls/state-space/state-space-intro:LQR: example "
"application>`."
msgstr ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` 找到了一个反馈控制器来将我们的飞轮 :term:`system` "
"驱动到:term:`reference`。因为我们的飞轮只有一个状态，所以我们的LQR选择的控制律将采用:math:`\\mathbf{u = K (r"
" - x)}` "
"的形式，其中:math:`\\mathbf{K}`是一个1x1矩阵；换句话说，由LQR选择的控制律只是比例控制器，或仅具有P增益的PID控制器。该增益由我们的LQR根据我们通过它的状态偏移和控制努力来选择。更多有关LQR控制器调优的信息可在"
" :ref:`LQR application example <docs/software/advanced-controls/state-"
"space/state-space-intro:LQR: example application>`.中找到。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:174
msgid ""
"Much like ``SimpleMotorFeedforward`` can be used to generate feedforward "
"voltage inputs given kS, kV, and kA constants, the Plant Inversion "
"Feedforward class generate :ref:`feedforward <docs/software/advanced-"
"controls/state-space/state-space-intro:Visualizing Feedforward>` voltage "
"inputs given a state-space system. The voltage commands generated by the "
"``LinearSystemLoop`` class are the sum of the feedforward and feedback "
"inputs."
msgstr ""
"在给定kS，kV和kA常数的情况下，类似于SimpleMotorFeedforward可以用来生成:ref:`feedforward "
"<docs/software/advanced-controls/state-space/state-space-intro:Visualizing "
"Feedforward>` 电压输入，而在状态空间系统下，Plant "
"Inversion前馈类可以生成前馈电压输入。由LinearSystemLoop类生成的电压命令是前馈和反馈输入的总和。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:201
msgid "Bringing it All Together: LinearSystemLoop"
msgstr "整合在一起：LinearSystemLoop"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:203
msgid ""
"LinearSystemLoop combines our system, controller, and observer that we "
"created earlier. The constructor shown will also instantiate a "
"``PlantInversionFeedforward``."
msgstr ""
"LinearSystemLoop结合了我们先前创建的系统，控制器和观察器。所示的构造函数还将实例化``PlantInversionFeedforward''。"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:229
msgid ""
"Once we have our ``LinearSystemLoop``, the only thing left to do is actually"
" run it. To do that, we'll periodically update our Kalman filter with our "
"new encoder velocity measurements and apply new voltage commands to it. To "
"do that, we first set the :term:`reference`, then ``correct`` with the "
"current flywheel speed, ``predict`` the Kalman filter into the next "
"timestep, and apply the inputs generated using ``getU``."
msgstr ""
"一旦我们有了``LinearSystemLoop''，剩下的唯一要做的就是实际运行它。为此，我们将使用新的编码器速度测量值定期更新我们的卡尔曼滤波器，并对其应用新的电压命令。为此，我们首先设置"
" :term:`reference`，然后使用当前飞轮速度进行“校正”，将卡尔曼滤波器“预测”到下一个时间步，然后应用使用“ getU”生成的输入`。"
