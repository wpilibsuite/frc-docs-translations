# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jiangshan Gong <jiangshan_gong@163.com>, 2020
# Yitong Zhao <lucius300er@outlook.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:4
msgid "Combining Motion Profiling and PID in Command-Based"
msgstr "在基于指令中将运动分析和PID结合"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:6
msgid ""
"For a description of the WPILib PID control features used by these command-"
"based wrappers, see :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""
"有关这些基于指令的包装程序使用的WPILib PID控制功能的描述，请参阅:ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:8
msgid ""
"Unlike the earlier version of ``PIDController``, the 2020 "
"``ProfiledPIDController`` class runs *synchronously*, and is not handled in "
"its own thread.  Accordingly, changing its ``period`` parameter will *not* "
"change the actual frequency at which it runs in any of these wrapper "
"classes.  Users should never modify the ``period`` parameter unless they are"
" certain of what they are doing."
msgstr ""
"与早期版本的PIDController不同，2020年的“ProfiledPIDController”类*同步运行*，并且不在其自己的线程中处理。因此，更改其“"
" period”参数将*不会*更改在任何这些包装类中运行的实际频率。用户除非确定自己在做什么，否则切勿修改“period”参数。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:10
msgid ""
"A common FRC\\ |reg| controls solution is to pair a trapezoidal motion "
"profile for setpoint generation with a PID controller for setpoint tracking."
"  To facilitate this, WPILib includes its own :ref:`ProfiledPIDController "
"<docs/software/advanced-controls/controllers/profiled-"
"pidcontroller:Combining Motion Profiling and PID Control with "
"ProfiledPIDController>` class.  To further aid teams in integrating this "
"functionality into their robots, the command-based framework contains two "
"convenience wrappers for the ``ProfiledPIDController`` class: "
"``ProfiledPIDSubsystem``, which integrates the controller into a subsystem, "
"and ``ProfiledPIDCommand``, which integrates the controller into a command."
msgstr ""
"常见的FRC \\ | reg "
"|控制解决方案是将用于设定值生成的梯形运动曲线与用于设定值跟踪的PID控制器配对。为此，WPILib包含了自己的:ref:`ProfiledPIDController"
" <docs/software/advanced-controls/controllers/profiled-"
"pidcontroller:Combining Motion Profiling and PID Control with "
"ProfiledPIDController>` "
"类。为了进一步帮助团队将该功能集成到他们的机器人中，基于指令的框架为“ProfiledPIDController”类提供了两个便捷包装：“ProfiledPIDSubsystem”将控制器集成到子系统中以及“ProfiledPIDCommand”，它将控制器集成到指令中。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:13
msgid "ProfiledPIDSubsystem"
msgstr "ProfiledPIDSubsystem"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:15
msgid ""
"In C++, the ``ProfiledPIDSubsystem`` class is templated on the unit type "
"used for distance measurements, which may be angular or linear.  The passed-"
"in values *must* have units consistent with the distance units, or a "
"compile-time error will be thrown.  For more information on C++ units, see "
":ref:`docs/software/basic-programming/cpp-units:The C++ Units Library`."
msgstr ""
"在C "
"++中，“ProfiledPIDSubsystem”类在用于距离测量的单位类型（可能是角度的或线性的）上模板化。传入的值*必须*具有与距离单位一致的单位，否则将引发编译时错误。有关C"
" ++单元的更多信息，请参阅:ref:`docs/software/basic-programming/cpp-units:The C++ Units "
"Library`。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:20
msgid "Creating a ProfiledPIDSubsystem"
msgstr "创建一个ProfiledPIDSubsystem"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:22
msgid ""
"When subclassing ``ProfiledPIDSubsystem``, users must override two abstract "
"methods to provide functionality that the class will use in its ordinary "
"operation:"
msgstr "子类化\"ProfiledPIDSubsystem\"时，用户必须重写两个抽象方法以提供该类将在其常规操作中使用的功能："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:25
msgid "getMeasurement()"
msgstr "getMeasurement()"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:37
msgid ""
"The ``getMeasurement`` method returns the current measurement of the process"
" variable.  The ``PIDSubsystem`` will automatically call this method from "
"its ``periodic()`` block, and pass its value to the control loop."
msgstr ""
"“getMeasurement”方法返回过程变量的当前测量值。 "
"“PIDSubsystem”将自动从其“periodic()”块中调用此方法，并将其值传递给控制循环。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:39
msgid ""
"Users should override this method to return whatever sensor reading they "
"wish to use as their process variable measurement."
msgstr "用户应重写此方法，以返回他们希望用作过程变量测量的任何传感器读数。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:42
msgid "useOutput()"
msgstr "useOutput()"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:55
msgid ""
"The ``useOutput()`` method consumes the output of the PID controller, and "
"the current setpoint state (which is often useful for computing a "
"feedforward).  The ``PIDSubsystem`` will automatically call this method from"
" its ``periodic()`` block, and pass it the computed output of the control "
"loop."
msgstr ""
"“useOutput()”方法消耗PID控制器的输出和当前设定值状态（这通常对于计算前馈很有用）。 "
"“PIDSubsystem”将自动从其“periodic()”块中调用此方法，并将控制环的计算输出传递给该方法。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:57
msgid ""
"Users should override this method to pass the final computed control output "
"to their subsystem's motors."
msgstr "用户应重写此方法，以将最终计算出的控制输出传递给其子系统的电机。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:60
msgid "Passing In the Controller"
msgstr "传递至控制器"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:62
msgid ""
"Users must also pass in a ``ProfiledPIDController`` to the "
"``ProfiledPIDSubsystem`` base class through the superclass constructor call "
"of their subclass.  This serves to specify the PID gains, the motion profile"
" constraints, and the period (if the user is using a non-standard main robot"
" loop period)."
msgstr ""
"用户还必须通过子类的超类构造函数调用将“ProfiledPIDController”传递给“ProfiledPIDSubsystem”基类。这用于指定PID增益，运动曲线约束和周期（如果用户使用的是非标准主机器人循环周期）。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:64
msgid ""
"Additional modifications (e.g. enabling continuous input) can be made to the"
" controller in the constructor body by calling ``getController()``."
msgstr "可以通过调用“getController()”在构造函数主体中对控制器进行其他修改（例如启用连续输入）。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:67
msgid "Using a ProfiledPIDSubsystem"
msgstr "使用ProfiledPIDSubsystem"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:69
msgid ""
"Once an instance of a ``PIDSubsystem`` subclass has been created, it can be "
"used by commands through the following methods:"
msgstr "一旦创建了“PIDSubsystem”子类的实例，命令就可以通过以下方法使用它："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:72
msgid "setGoal()"
msgstr "setGoal()"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:74
msgid ""
"If you wish to set the goal to a simple distance with an implicit target "
"velocity of zero, an overload of ``setGoal()`` exists that takes a single "
"distance value, rather than a full motion profile state."
msgstr "如果希望将目标设置为隐式目标速度为零的简单距离，则存在“setGoal()”重载，该重载采用单个距离值而不是完整的运动轮廓状态。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:76
msgid ""
"The ``setGoal()`` method can be used to set the setpoint of the "
"``PIDSubsystem``.  The subsystem will automatically track to the setpoint "
"using the defined output:"
msgstr "“setGoal()”方法可用于设置“PIDSubsystem”的设定值。子系统将使用定义的输出自动跟踪到设定点："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:91
msgid "enable() and disable()"
msgstr "enable()和disable()"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:93
msgid ""
"The ``enable()`` and ``disable()`` methods enable and disable the automatic "
"control of the ``ProfiledPIDSubsystem``.  When the subsystem is enabled, it "
"will automatically run the motion profile and the control loop and track to "
"the goal.  When it is disabled, no control is performed."
msgstr ""
"“enable()”和“disable()”方法启用和禁用“ProfiledPIDSubsystem'”的自动控制。启用子系统后，它将自动运行运动曲线和控制循环并跟踪目标。禁用时，不执行任何控制。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:95
msgid ""
"Additionally, the ``enable()`` method resets the internal "
"``ProfiledPIDController``, and the ``disable()`` method calls the user-"
"defined `useOutput()`_ method with both output and setpoint set to ``0``."
msgstr ""
"另外，“enable()”方法重置内部ProfileDPIDController，“disable()”方法调用用户定义的`useOutput()`_方法，将output和setpoint都设置为“0”。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:98
msgid "Full ProfiledPIDSubsystem Example"
msgstr "完整ProfiledPIDSubsystem示例"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:100
msgid ""
"What does a PIDSubsystem look like when used in practice? The following "
"examples are taken from the ArmBot example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armbot>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/ArmBot>`__):"
msgstr ""
"在实际使用中，PIDSubsystem是什么样的？以下示例摘自ArmBot示例项目（Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armbot>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/ArmBot>`__）："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:128
msgid "Using a ``ProfiledPIDSubsystem`` with commands can be very simple:"
msgstr "通过命令使用“ProfiledPIDSubsystem”可以非常简单："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:149
msgid "ProfiledPIDCommand"
msgstr "ProfiledPIDCommand"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:151
msgid ""
"In C++, the ``ProfiledPIDCommand`` class is templated on the unit type used "
"for distance measurements, which may be angular or linear.  The passed-in "
"values *must* have units consistent with the distance units, or a compile-"
"time error will be thrown.  For more information on C++ units, see "
":ref:`docs/software/basic-programming/cpp-units:The C++ Units Library`."
msgstr ""
"在C "
"++中，“ProfiledPIDCommand”类以用于距离测量的单位类型为模板，该单位类型可以是角度或线性的。传入的值*必须*具有与距离单位一致的单位，否则将引发编译时错误。有关C"
" ++单元的更多信息，请参阅:ref:`docs/software/basic-programming/cpp-units:The C++ Units "
"Library`。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:156
msgid "Creating a PIDCommand"
msgstr "创建一个PIDCommand"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:158
msgid ""
"A ``ProfiledPIDCommand`` can be created two ways - by subclassing the "
"``ProfiledPIDCommand`` class, or by defining the command :ref:`inline "
"<docs/software/commandbased/convenience-features:Inline Command "
"Definitions>`.  Both methods ultimately extremely similar, and ultimately "
"the choice of which to use comes down to where the user desires that the "
"relevant code be located."
msgstr ""
"可以通过两种方式创建“ProfiledPIDCommand”：通过对“ProfiledPIDCommand”类进行子类化，或者通过定义指令:ref:`inline"
" <docs/software/commandbased/convenience-features:Inline Command "
"Definitions>`。两种方法最终都极为相似，最终选择使用哪种方法取决于用户希望找到相关代码的位置。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:160
msgid ""
"In either case, a ``ProfiledPIDCommand`` is created by passing the necessary"
" parameters to its constructor (if defining a subclass, this can be done "
"with a `super()` call):"
msgstr ""
"无论哪种情况，都通过向构造函数传递必要的参数来创建“ProfileDPIDCommand”（如果定义了子类，则可以通过调用“super()”来完成）："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:181
msgid "controller"
msgstr "controller"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:183
msgid ""
"The ``controller`` parameter is the ``ProfiledPIDController`` object that "
"will be used by the command.  By passing this in, users can specify the PID "
"gains, the motion profile constraints, and the period for the controller (if"
" the user is using a nonstandard main robot loop period)."
msgstr ""
"“controller”参数是在指令中将使用的“ProfiledPIDController”对象。通过传递此参数，用户可以指定PID增益，运动曲线约束和控制器的周期（如果用户使用的是非标准的主机器人循环周期）。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:185
msgid ""
"When subclassing ``ProfiledPIDCommand``, additional modifications (e.g. "
"enabling continuous input) can be made to the controller in the constructor "
"body by calling ``getController()``."
msgstr ""
"当将“ProfiledPIDCommand”子类化时，可以通过调用“getController()”对构造函数主体中的控制器进行其他修改（例如，启用连续输入）。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:188
msgid "measurementSource"
msgstr "measurementSource"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:190
msgid ""
"The ``measurementSource`` parameter is a function (usually passed as a "
":ref:`lambda <docs/software/commandbased/convenience-features:Lambda "
"Expressions (Java)>`) that returns the measurement of the process variable."
"  Passing in the ``measurementSource`` function in ``ProfiledPIDCommand`` is"
" functionally analogous to overriding the `getMeasurement()`_ function in "
"``ProfiledPIDSubsystem``."
msgstr ""
"“measurementSource”参数是一个函数（通常作为:ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`传递），该函数返回过程变量的度量值。在“ProfiledPIDCommand”中传递“measurementSource”函数在功能上类似于重写“ProfiledPIDSubsystem”中的`getMeasurement()`_函数。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:192
msgid ""
"When subclassing ``ProfiledPIDCommand``, advanced users may further modify "
"the measurement supplier by modifying the class's ``m_measurement`` field."
msgstr "在子类化“ProfiledPIDCommand”时，高级用户可以通过修改类的“m_measurement”字段来进一步修改度量提供者。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:195
msgid "goalSource"
msgstr "goalSource"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:197
msgid ""
"The ``goalSource`` parameter is a function (usually passed as a :ref:`lambda"
" <docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`) that returns the current goal state for the mechanism.  If only a "
"constant goal is needed, an overload exists that takes a constant goal "
"rather than a supplier.  Additionally, if goal velocities are desired to be "
"zero, overloads exist that take a constant distance rather than a full "
"profile state."
msgstr ""
"“goalSource”参数是一个函数（通常作为:ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`传递），返回该机制的当前目标状态。如果仅需要一个不变的目标，那么就存在一个需要一个不变的目标而不是供应商的过载。另外，如果希望目标速度为零，则存在以恒定距离而不是完整轮廓状态存在的过载。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:199
msgid ""
"When subclassing ``ProfiledPIDCommand``, advanced users may further modify "
"the setpoint supplier by modifying the class's ``m_goal`` field."
msgstr "当子类化“ProfiledPIDCommand”时，高级用户可以通过修改类的“m_goal”字段来进一步修改设定值供应商。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:202
msgid "useOutput"
msgstr "useOutput"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:204
msgid ""
"The ``useOutput`` parameter is a function (usually passed as a :ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`) that consumes the output and setpoint state of the control loop.  "
"Passing in the ``useOutput`` function in ``ProfiledPIDCommand`` is "
"functionally analogous to overriding the `useOutput()`_ function in "
"``ProfiledPIDSubsystem``."
msgstr ""
"“useOutput”参数是一个函数（通常作为:ref:`lambda <docs/software/commandbased/convenience-"
"features:Lambda Expressions "
"(Java)>`传递），它消耗控制循环的输出和设定点状态。在“ProfiledPIDCommand”中传递“useOutput”函数在功能上类似于重写“ProfiledPIDSubsystem”中的`useOutput()`_函数。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:206
msgid ""
"When subclassing ``ProfiledPIDCommand``, advanced users may further modify "
"the output consumer by modifying the class's ``m_useOutput`` field."
msgstr "在子类化“ProfiledPIDCommand”时，高级用户可以通过修改类的“m_useOutput”字段来进一步修改输出使用者。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:209
msgid "requirements"
msgstr "requirements"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:211
msgid ""
"Like all inlineable commands, ``ProfiledPIDCommand`` allows the user to "
"specify its subsystem requirements as a constructor parameter."
msgstr "像所有内联命令一样，“ProfiledPIDCommand”允许用户将其子系统要求指定为构造函数参数。"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:214
msgid "Full ProfiledPIDCommand Example"
msgstr "完整ProfiledPIDCommand示例"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:216
msgid ""
"What does a ``ProfiledPIDCommand`` look like when used in practice? The "
"following examples are from the GyroDriveCommands example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__):"
msgstr ""
"在实际使用中，“ ProfiledPIDCommand”是什么样的？以下示例来自GyroDriveCommands示例项目（`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__）："

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:244
msgid "Todo"
msgstr "Todo"

#: ../../frc-docs/source/docs/software/commandbased/profilepid-subsystems-commands.rst:244
msgid "inlined example?"
msgstr "内联示例？"
