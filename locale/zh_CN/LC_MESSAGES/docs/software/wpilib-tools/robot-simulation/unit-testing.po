# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-26 04:30+0000\n"
"PO-Revision-Date: 2021-02-27 16:27+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:2
msgid "Unit Testing"
msgstr "单元测试"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:7
msgid "Writing Testable Code"
msgstr "编写可测试的代码"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:9
msgid ""
"This example can be easily adapted to the command-based paradigm by having "
"``Intake`` inherit from ``SubsystemBase``."
msgstr "通过让“Intake”从“SubsystemBase”继承，这个例子可以很容易地适应基于指令的范例。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:11
msgid ""
"Our subsystem will be an Infinite Recharge intake mechanism containing a "
"piston and a motor: the piston deploys/retracts the intake, and the motor "
"will pull the Power Cells inside. We don't want the motor to run if the "
"intake mechanism isn't deployed because it won't do anything."
msgstr ""
"我们的子系统将是一个 Infinite Recharge "
"进气机构，包含一个活塞和一个电机：活塞展开/收回进气口，电机将把电池拉到里面。如果未部署进气机构，我们不希望电机运行，因为它不会做任何事情。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:13
msgid ""
"To provide a \"clean slate\" for each test, we need to have a function to "
"destroy the object and free all hardware allocations. In Java, this is done "
"by implementing the ``AutoCloseable`` interface and its ``.close()`` method,"
" destroying each member object by calling the member's ``.close()`` method -"
" an object without a ``.close()`` method probably doesn't need to be closed."
" In C++, the default destructor will be called automatically when the object"
" goes out of scope and will call destructors of member objects."
msgstr ""
"为了为每个测试提供一个“干净的石板”，我们需要有一个函数来销毁对象并释放所有硬件分配。在 Java 中，这是通过实现 AutoCloseable "
"接口及其 .close() 方法来完成的，通过调用成员的 .close() 方法来销毁每个成员对象 - 一个没有 ` 的对象`.close()`` "
"方法可能不需要关闭。在C++中，当对象超出作用域时会自动调用默认的析构函数，并调用成员对象的析构函数。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:15
msgid ""
"Vendors might not support resource closing identically to the way shown "
"here. See your vendor's documentation for more information as to what they "
"support and how."
msgstr "供应商可能不支持与此处显示的方式相同的资源关闭。有关他们支持的内容和方式的更多信息，请参阅供应商的文档。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:18
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:59
msgid "C++ (Header)"
msgstr "C++ (Header)"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:80
msgid "C++ (Source)"
msgstr "C++ (Source)"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:104
msgid "Writing Tests"
msgstr "编写测试"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:106
msgid ""
"Tests are placed inside the ``test`` source set: ``/src/test/java/`` and "
"``/src/test/cpp/`` for Java and C++ tests, respectively. Files outside that "
"source root do not have access to the test framework - this will fail "
"compilation due to unresolved references."
msgstr ""
"测试放置在 ``test`` 源集中：``/src/test/java/`` 和 ``/src/test/cpp/`` 分别用于 Java 和 C++ "
"测试。该源根目录之外的文件无法访问测试框架 - 由于未解析的引用，这将导致编译失败。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:108
msgid ""
"In Java, each test class contains at least one test method marked with "
"``@org.junit.Test``, each method representing a test case. Additional "
"methods for opening resources (such as our ``Intake`` object) before each "
"test and closing them after are respectively marked with "
"``@org.junit.Before`` and ``@org.junit.After``. In C++, test fixture classes"
" inheriting from ``testing::Test`` contain our subsystem and simulation "
"hardware objects, and test methods are written using the "
"``TEST_F(testfixture, testname)`` macro. The ``SetUp()`` and ``TearDown()`` "
"methods can be overridden in the test fixture class and will be run "
"respectively before and after each test."
msgstr ""
"在 Java 中，每个测试类至少包含一个标记为“@org.junit.Test”的测试方法，每个方法代表一个测试用例。在每次测试之前打开资源（例如我们的"
" ``Intake`` 对象）和在测试之后关闭它们的附加方法分别用``@org.junit.Before`` 和 "
"``@org.junit.After`` 标记。在 C++ 中，从 ``testing::Test`` "
"继承的测试夹具类包含我们的子系统和模拟硬件对象，并且使用 ``TEST_F(testfixture, testname)`` 宏编写测试方法。 "
"``SetUp()`` 和 ``TearDown()`` 方法可以在测试装置类中被覆盖，并将分别在每次测试之前和之后运行。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:110
msgid ""
"Each test method should contain at least one *assertion* (``assert*()`` in "
"Java or ``EXPECT_*()`` in C++). These assertions verify a condition at "
"runtime and fail the test if the condition isn't met. If there is more than "
"one assertion in a test method, the first failed assertion will crash the "
"test - execution won't reach the later assertions."
msgstr ""
"每个测试方法应至少包含一个 *assertion*（Java 中的“assert*()”或 C++ "
"中的“EXPECT_*()”）。这些断言在运行时验证条件，如果不满足条件，则测试失败。如果测试方法中有多个断言，第一个失败的断言将使测试崩溃 - "
"执行不会到达后面的断言。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:112
msgid ""
"Both JUnit and GoogleTest have multiple assertion types, but the most common"
" is equality: ``assertEquals(expected, actual)``/``EXPECT_EQ(expected, "
"actual)``. When comparing numbers, a third parameter - ``delta``, the "
"acceptable error, can be given. In JUnit (Java), these assertions are static"
" methods and can be used without qualification by adding the static star "
"import ``import static org.junit.Asssert.*``. In Google Test (C++), "
"assertions are macros from the ``<gtest/gtest.h>`` header."
msgstr ""
"JUnit 和 GoogleTest 都有多种断言类型，但最常见的是相等：``assertEquals(expected, "
"actual)``/``EXPECT_EQ(expected, actual)``。比较数字时，可以给出第三个参数 - "
"``delta``，可接受的误差。在 JUnit (Java) 中，这些断言是静态方法，可以通过添加 static star import "
"``import static org.junit.Asssert.*`` 不加限定地使用。在 Google Test (C++) 中，断言是来自 "
"``<gtest/gtest.h>`` 标头的宏。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:114
msgid ""
"Comparison of floating-point values isn't accurate, so comparing them should"
" be done with an acceptable error parameter (``DELTA``)."
msgstr "浮点值的比较不准确，因此应该使用可接受的错误参数（``DELTA``）进行比较。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:214
msgid ""
"For more advanced usage of JUnit and Google Test, see the framework docs."
msgstr "有关 JUnit 和 Google Test 的更高级用法，请参阅框架文档。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:217
msgid "Running Tests"
msgstr "运行测试"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:219
msgid ""
"Tests will always be run in simulation on your desktop. For prerequisites "
"and more info, see :doc:`the simulation introduction <introduction>`."
msgstr "测试将始终在您的桌面上以模拟方式运行。有关先决条件和更多信息，请参阅:doc:`模拟介绍`。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:221
msgid ""
"For Java tests to run, make sure that your ``build.gradle`` file contains "
"the following block:"
msgstr "要运行 Java 测试，请确保您的“build.gradle”文件包含以下块："

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:229
msgid ""
"Use :guilabel:`Test Robot Code` from the Command Palette to run the tests. "
"Results will be reported in the terminal output, each test will have a "
"``FAILED`` or ``PASSED``/``OK`` label next to the test name in the output. "
"JUnit (Java only) will generate a HTML document in "
"``build/reports/tests/test/index.html`` with a more detailed overview of the"
" results; if there are failied test a link to render the document in your "
"browser will be printed in the terminal output."
msgstr ""
"使用指令面板中的 :guilabel:`Test Robot Code` "
"来运行测试。结果将在终端输出中报告，每个测试在输出中的测试名称旁边都有一个“FAILED”或“PASSED”/“OK”标签。 JUnit（仅限 "
"Java）将在“build/reports/tests/test/index.html”中生成一个 HTML "
"文档，其中包含更详细的结果概述；如果测试失败，将在终端输出中打印在浏览器中呈现文档的链接。"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:231
msgid ""
"By default, Gradle runs the tests whenever robot code is built, including "
"deploys. This will increase deploy time, and failing tests will cause the "
"build and deploy to fail. To prevent this from happening, you can use "
":guilabel:`Change Skip Tests On Deploy Setting` from the Command Palette to "
"configure whether to run tests when deploying."
msgstr ""
"默认情况下，Gradle "
"会在构建机器人代码（包括部署）时运行测试。这将增加部署时间，失败的测试将导致构建和部署失败。为了防止这种情况发生，您可以使用指令面板中的:guilabel:`Change"
" Skip Tests On Deploy Setting` 来配置是否在部署时运行测试。"
