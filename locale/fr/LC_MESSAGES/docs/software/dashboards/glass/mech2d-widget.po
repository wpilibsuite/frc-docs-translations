# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Austin Shalit <austinshalit@gmail.com>, 2021
# Andre Theberge <atheberge2@videotron.ca>, 2021
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-21 16:03+0000\n"
"PO-Revision-Date: 2021-09-29 04:10+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:2
msgid "The Mechanism2d Widget"
msgstr "Le widget Mechanism2d"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:4
msgid ""
"Glass supports displaying stick-figure representations of your robot's "
"mechanisms using the :guilabel:`Mechanism2d` widget. It supports "
"combinations of ligaments that can rotate and / or extend or retract, such "
"as arms and elevators and they can be combined for more complicated "
"mechanisms. An instance of the ``Mechanism2d`` class should be created and "
"populated, sent over NetworkTables, and updated periodically with the latest"
" mechanism states in your robot code. It can also be used with the "
":doc:`Physics Simulation </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` to visualize and program your robot's mechanisms "
"before the robot is built."
msgstr ""
"Glass prend en charge l’affichage de représentations en forme de lignes "
"droites des mécanismes de votre robot à l’aide du widget "
":guilabel:`Mechanism2d`. Il prend en charge les combinaisons de ligaments "
"qui peuvent tourner et / ou s’étendre ou se rétracter, tels que les bras et "
"les élevateurs et ils peuvent être combinés pour des mécanismes plus "
"compliqués. Une instance de la classe ``Mechanism2d`` doit être créée et "
"configuréé, envoyée via NetworkTables et mise à jour périodiquement selon "
"les derniers états du mécanisme dans votre code robot. Il peut également "
"être utilisé avec :doc:`Simulation physique </docs/software/wpilib-"
"tools/robot-simulation/physics-sim>` pour visualiser et programmer les "
"mécanismes de votre robot avant sa construction effective."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:7
msgid "Creating and Configuring the Mechanism2d Instance"
msgstr "Création et configuration de l’instance Mechanism2d"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:9
msgid ""
"The ``Mechanism2d`` object is the \"canvas\" where the mechanism is drawn. "
"The root node is where the mechanism is anchored to ``Mechanism2d``. For a "
"single jointed arm this would the pivot point. For an elevator, this would "
"be where it's attached to the robot's base. To get a root node (represented "
"by a ``MechanismRoot2d`` object), call ``getRoot(name, x, y)`` on the "
"container ``Mechanism2d`` object. The name is used to name the root within "
"NetworkTables, and should be unique, but otherwise isn't important. The ``x "
"/ y`` coordinate system follows the same orientation as ``Field2d`` - "
"``(0,0)`` is bottom left."
msgstr ""
"L’objet ``Mechanism2d`` est le \"canvas\" où le mécanisme est dessiné. Le "
"nœud racine est l’endroit où le mécanisme est ancré à ``Mechanism2d``. Pour "
"un seul bras articulé, ce serait le point de pivot. Pour un élevateur, ce "
"serait l’endroit où il est attaché à la base du robot. Pour obtenir un nœud "
"racine (représenté par un objet ``MechanismRoot2d`` object), invoquez la "
"méthode ``getRoot(name, x, y)`` sur l’objet conteneur ``Mechanism2d``. Le "
"nom est utilisé pour nommer la racine dans NetworkTables et doit être "
"unique, mais n’est pas important. Le système de coordonnées ``x / y`` suit "
"la même orientation que ``Field2d`` - ``(0,0)`` est en bas à gauche."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:11
msgid ""
"In the examples below, an elevator is drawn, with a rotational wrist on top "
"of the elevator. The full Mechanism2d example is available in `Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/mechanism2d/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Mechanism2d/cpp/Robot.cpp>`__"
msgstr ""
"Dans les exemples ci-dessous, un élevateur est dessiné, avec un poignet "
"rotatif au dessus de celui-ci. L’exemple complet de Mechanism2d est "
"disponible dans `Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/mechanism2d/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Mechanism2d/cpp/Robot.cpp>`__"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:15
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:36
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:56
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:78
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:23
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:44
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:64
#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:86
msgid "C++"
msgstr "C++"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:32
msgid ""
"Each ``MechanismLigament2d`` object represents a stage of the mechanism. It "
"has a three required parameters, a name, an initial length to draw (relative"
" to the size of the ``Mechanism2d`` object), and an initial angle to draw "
"the ligament in degrees. Ligament angles are relative to the parent "
"ligament, and follow math notation - the same as :ref:`Rotation2d "
"<docs/software/advanced-controls/geometry/pose:Rotation>` (counterclockwise-"
"positive). A ligament based on the root with an angle of zero will point "
"right. Two optional parameters let you change the width (also relative to "
"the size of the Mechanism2d object) and the color. Call "
"``append()``/``Append()`` on a root node or ligament node to add another "
"node to the figure. In Java, pass a constructed ``MechanismLigament2d`` "
"object to add it. In C++, pass the construction parameters in order to "
"construct and add a ligament."
msgstr ""
"Chaque objet ``MechanismLigament2d`` représente un niveau du mécanisme. Il a"
" trois paramètres requis, un nom, une longueur initiale à dessiner (par "
"rapport à la taille de l’objet ``Mechanism2d``), et un angle initial pour "
"dessiner le ligament en degrés. Les angles des ligaments sont relatifs au "
"ligament parent et suivent une notation mathématique - la même que "
":ref:`Rotation2d <docs/software/advanced-controls/geometry/pose:Rotation>` "
"(dans le sens inverse des aiguilles d’une montre, sens positif). Un ligament"
" basé sur la racine avec un angle de zéro pointera vers la droite. Deux "
"paramètres facultatifs vous permettent de modifier la largeur (également par"
" rapport à la taille de l’objet Mechanism2d) et la couleur. Invoquez "
"``append()``/``Append()`` sur un nœud racine ou un nœud de ligament pour "
"ajouter un autre nœud à la figure. En Java, passez un objet "
"``MechanismLigament2d`` déjà construit pour l’ajouter. En C++, passez les "
"paramètres de construction afin de construire et d’ajouter un ligament."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:52
msgid "Then, publish the ``Mechanism2d`` object to NetworkTables:"
msgstr "Ensuite, publiez l’objet ``Mechanism2d`` sur NetworkTables :"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:72
msgid ""
"The ``Mechanism2d`` instance can also be sent using a lower-level "
"NetworkTables API or using the :ref:`Shuffleboard API "
"<docs/software/dashboards/shuffleboard/getting-started/shuffleboard-"
"displaying-data:Displaying data from your robot>`. In this case, the "
"``SmartDashboard`` API was used, meaning that the :guilabel:`Mechanism2d` "
"widget will appear under the ``SmartDashboard`` table name."
msgstr ""
"L’instance ``Mechanism2d`` peut également être envoyée à l’aide d’une API "
"NetworkTables de bas niveau ou à l’aide de l’API :ref:`Shuffleboard API "
"<docs/software/dashboards/shuffleboard/getting-started/shuffleboard-"
"displaying-data:Displaying data from your robot>`. Dans ce cas, l’API "
"``SmartDashboard`` a été utilisée, ce qui signifie que le widget "
":guilabel:`Mechanism2d` apparaîtra sous le nom de la table "
"``SmartDashboard``."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:74
msgid ""
"To manipulate a ligament angle or length, call ``setLength()`` or "
"``setAngle()`` on the ``MechanismLigament2d`` object. When manipulating "
"ligament length based off of sensor measurements, make sure to add the "
"minimum length to prevent 0-length (and therefore invisible) ligaments."
msgstr ""
"Pour manipuler un angle ou une longueur de ligament, invoquer "
"``setLength()``  ou ``setAngle()``  sur l’objet ``MechanismLigament2d``. "
"Lorsque vous manipulez la longueur des ligaments en fonction des mesures du "
"capteur, assurez-vous d’ajouter la longueur minimale pour éviter les "
"ligaments de longueur 0 (et donc invisibles)."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:95
msgid "Viewing the Mechanism2d in Glass"
msgstr "Affichage de Mechanism2d sous Glass"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:97
msgid ""
"After sending the ``Mechanism2d`` instance over NetworkTables, the "
":guilabel:`Mechanism2d` widget can be added to Glass by selecting "
":guilabel:`NetworkTables` in the menu bar, choosing the table name that the "
"instance was sent over, and then clicking on the :guilabel:`Field` button."
msgstr ""
"Après avoir envoyé l’instance ``Mechanism2d`` à traver NetworkTables, le "
"widget :guilabel:`Mechanism2d` peut être ajouté à Glass en sélectionnant "
":guilabel:`NetworkTables` dans la barre de menus, en choisissant le nom de "
"la table sur laquelle l’instance a été envoyée, puis en cliquant sur le "
"bouton  :guilabel:`Field`."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:101
msgid ""
"Once the widget appears as shown below, you can resize and place it on the "
"Glass workspace as you desire. Right-clicking the top of the widget will "
"allow you to customize the name of the widget. As the wrist potentiometer "
"and elevator encoder changes, the mechanism will update in the widget."
msgstr ""
"Une fois que le widget apparaît comme indiqué ci-dessous, vous pouvez le "
"redimensionner et le placer sur l’espace de travail Glass comme vous le "
"souhaitez. Un cliquant sur le bouton droit sur le haut du widget, vous "
"pouver personnaliser le nom du widget. Au fur et à mesure que le "
"potentiomètre du poignet et l’encodeur de l'élevateur changent, les "
"paramètres du mécanisme se mettent à jour dans le widget."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:106
msgid "Next Steps"
msgstr "Prochaines étapes"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:108
msgid ""
"As mentioned above, the Mechanism2d visualization can be combined with "
":doc:`Physics Simulation </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` to help you program mechanisms before your robot is"
" built. The ArmSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ArmSimulation/cpp/Robot.cpp>`__)"
" and ElevatorSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ElevatorSimulation/cpp/Robot.cpp>`__)"
" examples combine physics simulation and Mechanism2d visualization so that "
"you can practice programing a single jointed arm and elevator without a "
"robot."
msgstr ""
"Comme mentionné ci-dessus, la visualisation de Mechanism2d peut être "
"combinée avec :doc:`Simulation physique </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` pour vous aider à programmer les mécanismes avant "
"la construction de votre robot. Les exemples ArmSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ArmSimulation/cpp/Robot.cpp>`__)"
" et ElevatorSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ElevatorSimulation/cpp/Robot.cpp>`__)"
" combinent la simulation physique et la visualisation Mechanism2d afin que "
"vous puissiez vous entraîner à programmer un seul bras articulé et un "
"élevateur sans un robot physique."
