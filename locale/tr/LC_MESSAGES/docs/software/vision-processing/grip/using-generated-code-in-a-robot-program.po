# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020
# Demet Tumkaya <dtumkaya19@ku.edu.tr>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-23 04:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:05+0000\n"
"Last-Translator: Demet Tumkaya <dtumkaya19@ku.edu.tr>, 2020\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:4
msgid "Using Generated Code in a Robot Program"
msgstr "Oluşturulan Kodu Bir Robot Programında Kullanma"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:6
msgid ""
"GRIP generates a class that can be added to an FRC\\ |reg| program that runs"
" on a roboRIO and without a lot of additional code, drive the robot based on"
" the output."
msgstr ""
"GRIP, roboRIO üzerinde ve çok fazla ek kod olmadan çalışan  FRC\\ |reg| 'e "
"eklenebilecek bir program sınıfı üretir, çıktıya göre robotu sürün."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:9
msgid ""
"Included here is a complete sample program that uses a GRIP pipeline that "
"drives a robot towards a piece of retroreflective material."
msgstr ""
"Burada, bir robotu bir retroreflektif malzemeye doğru yönlendiren bir GRIP "
"katmanı kullanan eksiksiz bir örnek program bulunmaktadır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:12
msgid ""
"This program is designed to illustrate how the vision code works and does "
"not necessarily represent the best technique for writing your robot program."
" When writing your own program be aware of the following considerations:"
msgstr ""
"Bu program, görüntü kodunun nasıl çalıştığını göstermek için tasarlanmıştır "
"ve robot programınızı yazmak için en iyi tekniği temsil etmesi gerekmez. "
"Kendi programınızı yazarken aşağıdaki hususlara dikkat edin:"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:15
msgid ""
"**Using the camera output for steering the robot could be problematic**. The"
" camera code in this example that captures and processes images runs at a "
"much slower rate that is desirable for a control loop for steering the "
"robot. A better, and only slightly more complex solution, is to get headings"
" from the camera and it's processing rate, then have a much faster control "
"loop steering to those headings using a gyro sensor."
msgstr ""
"** Robotu yönlendirmek için kamera çıktısını kullanmak sorunlu olabilir **. "
"Bu örnekteki görüntüleri yakalayan ve işleyen kamera kodu, robotu "
"yönlendirmek için bir kontrol döngüsü için arzu edilen çok daha yavaş bir "
"hızda çalışır. Daha iyi ve yalnızca biraz daha karmaşık bir çözüm, kameradan"
" başlıkları ve işlem oranını almak, ardından bir jiroskop sensörü kullanarak"
" bu başlıklara çok daha hızlı bir kontrol döngüsü yönlendirmesi sağlamaktır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:19
msgid ""
"**Keep the vision code in the class that wraps the pipeline**. A better way "
"of writing object oriented code is to subclass or instantiate the generated "
"pipeline class and process the OpenCV results there rather than in the robot"
" program. In this example, the robot code extracts the direction to drive by"
" manipulating the resultant OpenCV contours. By having the OpenCV code "
"exposed throughout the robot program it makes it difficult to change the "
"vision algorithm should you have a better one."
msgstr ""
"** Görüş kodunu ardışık düzeni saran sınıfta tutun **. Nesne yönelimli kod "
"yazmanın daha iyi bir yolu, oluşturulan boru hattı sınıfını alt sınıflara "
"ayırmak veya örneklendirmek ve OpenCV sonuçlarını robot programı yerine "
"orada işlemektir. Bu örnekte robot kodu, ortaya çıkan OpenCV konturlarını "
"değiştirerek sürüş yönünü çıkarır. OpenCV kodunun robot programı boyunca "
"ifşa edilmesi, daha iyi bir algoritmaya sahip olmanız durumunda vizyon "
"algoritmasını değiştirmeyi zorlaştırır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:25
msgid "Iterative program definitions"
msgstr "Iterative-Yinelemeli program tanımları"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:58
msgid ""
"In this first part of the program you can see all the import statements for "
"the WPILib classes used for this program."
msgstr ""
"Programın bu ilk bölümünde, bu program için kullanılan WPILib sınıfları için"
" tüm içe aktarma ifadelerini görebilirsiniz."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:60
msgid "The **image width and height** are defined as 320x240 pixels."
msgstr ""
"** image width and height-görüntü genişliği ve yüksekliği ** 320x240 piksel "
"olarak tanımlanmıştır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:61
msgid ""
"The **VisionThread** is a WPILib class makes it easy to do your camera "
"processing in a separate thread from the rest of the robot program."
msgstr ""
"** VisionThread ** bir WPILib sınıfıdır, kamera işlemenizi robot programının"
" geri kalanından ayrı bir iş parçacığında yapmanızı kolaylaştırır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:63
msgid ""
"**centerX** value will be the computed center X value of the detected "
"target."
msgstr ""
"**centerX** değeri, tespit edilen hedefin hesaplanan merkez X değeri "
"olacaktır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:65
msgid ""
"**imgLock** is a variable to synchronize access to the data being "
"simultaneously updated with each image acquisition pass and the code that's "
"processing the coordinates and steering the robot."
msgstr ""
"**imgLock**, her görüntü edinme geçişi ve koordinatları işleyen ve robotu "
"yönlendiren koda eşzamanlı olarak güncellenen verilere erişimi senkronize "
"etmek için bir değişkendir."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:92
msgid ""
"The **robotInit()** method is called once when the program starts up. It "
"creates a **CameraServer** instance that begins capturing images at the "
"requested resolution (IMG_WIDTH by IMG_HEIGHT)."
msgstr ""
"**robotInit()** methodu, program başladığında bir kez çağrılır. İstenen "
"çözünürlükte (IMG_WIDTH, IMG_HEIGHT) görüntüleri yakalamaya başlayan bir ** "
"CameraServer ** örneği oluşturur."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:95
msgid ""
"Next an instance of the class **VisionThread** is created. VisionThread "
"begins capturing images from the camera asynchronously in a separate thread."
" After processing each image, the pipeline computed **bounding box** around "
"the target is retrieved and it's **center X** value is computed. This "
"centerX value will be the x pixel value of the center of the rectangle in "
"the image."
msgstr ""
"Daha sonra **VisionThread** sınıfının bir örneği oluşturulur. VisionThread, "
"kameradaki görüntüleri eşzamansız olarak ayrı bir iş parçacığında yakalamaya"
" başlar. Her bir görüntüyü işledikten sonra, hedefin etrafındaki hesaplanan "
"**bounding box-sınırlayıcı kutu** geri alınır ve **center X** değeri "
"hesaplanır. Bu centerX değeri, görüntüdeki dikdörtgenin merkezinin x piksel "
"değeri olacaktır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:99
msgid ""
"The VisionThread also takes a **VisionPipeline** instance (here, we have a "
"subclass **MyVisionPipeline** generated by GRIP) as well as a callback that "
"we use to handle the output of the pipeline. In this example, the pipeline "
"outputs a list of contours (outlines of areas in an image) that mark goals "
"or targets of some kind. The callback finds the bounding box of the first "
"contour in order to find its center, then saves that value in the variable "
"centerX. Note the synchronized block around the assignment: this makes sure "
"the main robot thread will always have the most up-to-date value of the "
"variable, as long as it also uses **synchronized** blocks to read the "
"variable."
msgstr ""
"VisionThread ayrıca bir **VisionPipeline** örneğini (burada GRIP tarafından "
"oluşturulan bir alt sınıfımız **MyVisionPipeline** var) ve ayrıca ardışık "
"düzen çıkışını işlemek için kullandığımız bir geri arama var. Bu örnekte, "
"boru hattı, bir türden hedefleri veya hedefleri işaretleyen bir kontur "
"listesi (bir görüntüdeki alanların ana hatları) çıkarır. Geri arama, "
"merkezini bulmak için ilk konturun sınırlayıcı kutusunu bulur ve ardından bu"
" değeri centerX değişkenine kaydeder. Atamanın etrafındaki senkronize bloğa "
"dikkat edin: Bu, değişkeni okumak için **senkronize** bloklar kullandığı "
"sürece ana robot iş parçacığının her zaman değişkenin en güncel değerine "
"sahip olmasını sağlar."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:120
msgid ""
"This, the final part of the program, is called repeatedly during the "
"**autonomous period** of the match. It gets the **centerX** pixel value of "
"the target and **subtracts half the image width** to change it to a value "
"that is **zero when the rectangle is centered** in the image and **positive "
"or negative when the target center is on the left or right side of the "
"frame.** That value is used to steer the robot towards the target."
msgstr ""
"Bu, programın son kısmı, maçın **otonom süresi** boyunca tekrar tekrar "
"çağrılır. Hedefin **centerX** piksel değerini alır **görüntüde dikdörtgen "
"ortalandığında** sıfır olan bir değere değiştirmek için görüntü genişliğinin"
" yarısını çıkarır. ** hedef merkez çerçevenin solunda veya sağında olduğunda"
" pozitif veya negatif. ** bir değer ile değiştirir. Bu değer, robotu hedefe "
"yönlendirmek için kullanılır."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:125
msgid ""
"Note the **synchronized** block at the beginning. This takes a snapshot of "
"the most recent centerX value found by the VisionThread."
msgstr ""
"Başlangıçta ** senkronize ** bloğuna dikkat edin. Bu, VisionThread "
"tarafından bulunan en son centerX değerinin anlık görüntüsünü alır."
