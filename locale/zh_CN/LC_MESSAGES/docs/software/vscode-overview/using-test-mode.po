# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 怡静 陆 <2238710874@qq.com>, 2021
# KeseterG <zhiwan13579@126.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-03 16:03+0000\n"
"PO-Revision-Date: 2020-08-20 04:15+0000\n"
"Last-Translator: KeseterG <zhiwan13579@126.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:2
msgid "Using Test Mode"
msgstr "使用测试模式"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:4
msgid ""
"Test mode is designed to enable programmers to have a place to put code to "
"verify that all systems on the robot are functioning. In each of the robot "
"program templates there is a place to add test code to the robot. If you use"
" the TimedRobot template, or use command-based programming you can easily "
"see the operation of all the motors and sensors through the LiveWindow."
msgstr ""
"测试模式旨在使程序员能够验证机器人上的所有系统都在正常运行。在每个机器人程序模板中，都有一个向机器人添加测试代码的地方。如果使用 TimedRobot "
"模板，或使用基于命令的编程，则可以很容易地通过 LiveWindow 看到所有电机和传感器的运行。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:7
msgid "Enabling Test Mode"
msgstr "启用测试模式"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:9
msgid ""
"Test mode on the robot can be enabled from the Driver Station just like "
"autonomous or teleop. When in test mode, the ``testInit`` method is run "
"once, and the testPeriodic method is run once per tick, in addition to "
"``robotPeriodic``, the same as teleop and autonomous control modes. To "
"enable test mode in the Driver Station, select the \"Test\" button and "
"enable the robot. The test mode code will then run."
msgstr ""
"机器人的测试模式可以像自动模式和远程遥控模式一样从 Driver Station 启用。在测试模式下， testInit 方法仅运行一次，并且每 1 "
"tick 除了 robotPeriodic 还运行一次 testPeriodic 方法（远程遥控模式和自动模式都是如此）。要在Driver "
"Station中启用测试模式，请选择 “ Test” 按钮并启用机器人。测试模式代码将会运行。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:12
msgid "Adding Test mode code to your robot code"
msgstr "将测试模式代码添加到您的机器人代码"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:14
msgid ""
"Adding test mode can be as painless as calling your already written Teleop "
"methods from Test. This will allow you to use the LiveWindow tuning features"
" for classes such as PIDBase and PIDController, as well as PIDSubsystems and"
" PIDCommands, to change PID constants and setpoints. Make sure to add your "
"subsystems to SmartDashboard with the ``putData(subsystem)`` or "
"``PutData(subsystem)`` method."
msgstr ""
"添加测试模式可以像从Test调用您已经编写的Teleop方法一样轻松。这将允许您将LiveWindow调整功能用于PIDBase和PIDController之类的类，以及PIDSubsystems和PIDCommands，以更改PID常数和设定值。确保使用``putData（subsystem）``或``PutData（subsystem）``方法将子系统添加到SmartDashboard。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:53
msgid "Test Mode in SmartDashboard"
msgstr "SmartDashboard中的测试模式"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:55
msgid ""
"The above sample code produces the following output when the Driver Station "
"is put into Test mode then enabled. You can operate the motors by moving the"
" sliders and read the values of sensors such as the wrist potentiometer."
msgstr ""
"将Driver Station置于Test模式然后启用后，上面的示例代码将产生以下输出。您可以通过移动滑块来操作电动机，并读取传感器的值（如电位计）。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:57
msgid ""
"Notice that the values are grouped by the subsystem names to group related "
"actuators and sensors for easy testing. The subsystem names are specified by"
" supplying a name to the ``putData()`` method, or by calling "
"``SendableRegistry.setName()``. This grouping, while not required, makes it "
"much easier to test one subsystem at a time and have all the values next to "
"each other on the screen."
msgstr ""
"请注意，这些值已按子系统名称分组，以将相关的执行器和传感器分组，以便于测试。子系统名称可以通过 putData() 方法或 "
"SendableRegistry.setName() "
"方法来指定。这种分组虽然不是必需的，但使一次测试一个子系统变得容易得多，并且所有值在屏幕上彼此相邻。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:60
msgid "Using Test Mode with the TimedRobot Template"
msgstr "将测试模式与TimedRobot模板一起使用"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:62
msgid ""
"The TimedRobot template lends itself quite nicely to testing since it will "
"periodically call the testPeriodic() method (or TestPeriodic() in C++) in "
"your robot program. The testPeriodic() method will be called every 20ms and "
"it is a good place to test commands or have LiveWindow update. The "
"LiveWindow updating is built into the TimedRobot template so there is very "
"little work to use LiveWindow."
msgstr ""
"TimedRobot 模板非常适合进行测试，因为它将定期在您的机器人程序中调用 testPeriodic() 方法（或C ++中的 "
"TestPeriodic()）。testPeriodic() 方法每20毫秒调用一次，是测试命令或更新 LiveWindow "
"的好地方。LiveWindow 更新内置于 TimedRobot 模板中，因此使用 LiveWindow 的工作量很少。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:64
msgid ""
"This works even if you are using the TimedRobot template and not doing "
"Command-based programming."
msgstr "即使您使用的是TimedRobot模板并且未进行基于命令的编程，此方法也可以使用。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:66
msgid ""
"In this example the sensors are registered with the LiveWindow and during "
"the testPeriodic method, simply update all the values by calling the "
"LiveWindow ``run()`` method. If your program is causing too much network "
"traffic you can call the run method less frequently by, for example, only "
"calling it every 5 updates for a 100ms update rate."
msgstr ""
"在此示例中，传感器已在 LiveWindow 中注册，并且在 testPeriodic 方法执行期间，只需调用 LiveWindow 的 run() "
"方法即可更新所有值。如果您的程序中网络通信太多以至于无法顺畅运行，则可以减少调用该方法的频率（如，每100ms调用方法5次）。"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:69
msgid "PID Tuning in Test Mode"
msgstr "测试模式下的PID调整"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:71
msgid ""
"Tuning PID loops is often a challenging prospect with frequent recompiles of"
" the program to get the correct values. When using the command based "
"programming model, subclassing PIDSubsystem or PIDCommand in your PID "
"commands allows the adjustment of PID constants with immediate feedback of "
"the results."
msgstr ""
"调试PID循环通常是充满挑战的：程序必须被多次编译以找到合适的值。当使用基于命令的编程模型时，可以在 PID 命令中将 PIDSubsystem 或 "
"PIDCommand 子类化。这样，调整 PID 参数后能立即得到结果反馈。"
