# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Arhan Ünay <arhanyo@gmail.com>, 2020
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2021
# ceren oktemer <ceren.oktemer@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-18 04:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: ceren oktemer <ceren.oktemer@gmail.com>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:2
msgid "Structuring a Command-Based Robot Project"
msgstr "Komut Tabanlı Bir Robot Projesi Yapılandırma"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:4
msgid ""
"While users are free to use the command-based libraries however they like "
"(and advanced users are encouraged to do so), new users may want some "
"guidance on how to structure a basic command-based robot project."
msgstr ""
"Kullanıcılar komut tabanlı kütüphaneleri istedikleri gibi kullanmakta özgür "
"olduklarında (ki ileri düzey kullanıcılar bunu yapmaya teşvik edilir),yeni "
"kullanıcılar temel komut tabanlı bir robotun nasıl yapılandırılacağı "
"konusunda yardım isteyebilir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:6
msgid ""
"A standard template for a command-based robot project is included in the "
"WPILib examples repository (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/templates/commandbased>`__)."
" This section will walk users through the structure of this template."
msgstr ""
"Komut tabanlı bir robot projesi için standart bir şablon WPILib örnek "
"havuzunda bulunur (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/templates/commandbased>`"
" __). Bu bölüm, kullanıcılara bu şablonun yapısı boyunca yol gösterecektir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:8
msgid "The root package/directory generally will contain four classes:"
msgstr "Root paket /dizin genellikle 4 sınıf içerir:"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:10
msgid ""
"``Main``, which is the main robot application (Java only). New users *should"
" not* touch this class. ``Robot``, which is responsible for the main control"
" flow of the robot code. ``RobotContainer``, which holds robot subsystems "
"and commands, and is where most of the declarative robot setup (e.g. button "
"bindings) is performed. ``Constants``, which holds globally-accessible "
"constants to be used throughout the robot."
msgstr ""
"''Main'', robotun ana uygulamasıdır (yalnızca Java).Yeni kullanıcılar "
"kesinlikle bu sınıfa dokunmamalıdır. ''Robot'', robotun kodunun ana kontrol "
"akışından sorumludur. ``RobotContainer``, robot alt sistemlerini ve "
"komutlarını tutar, ve açıklayıcı robot kurulumunun çoğunun (örneğin düğme "
"bağlamaları) yapıldığı yerdir.``Constants``, robotun tamamında kullanılacak "
"olan ulusal erişilebilir sabitler tutar."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:12
msgid ""
"The root directory will also contain two sub-packages/sub-directories: "
"``Subsystems`` contains all user-defined subsystem classes. ``Commands`` "
"contains all user-defined command classes."
msgstr ""
"root  dizini ayrıca iki alt-paket / alt-dizin içerir: `` Subsystems '', tüm "
"kullanıcı tanımlı alt sistem sınıflarını içerir. `` Commands '', tüm "
"kullanıcı tanımlı komut sınıflarını içerir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:15
msgid "Robot"
msgstr "Robot"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:17
msgid ""
"As ``Robot`` (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Robot.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Robot.h>`__,"
" `C++ (Source) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/Robot.cpp>`__)"
" is responsible for the program’s control flow, and command-based is an "
"declarative paradigm designed to minimize the amount of attention the user "
"has to pay to explicit program control flow, the ``Robot`` class of a "
"command-based project should be mostly empty. However, there are a few "
"important things that must be included"
msgstr ""
"``Robot`` (`Java  "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Robot.java>`__,"
" `C ++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Robot.h>`"
" __,`C ++ (Source) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/Robot.cpp>`"
" __) programın kontrol akışından sorumlu olduğundan ve komut tabanlı, en aza"
" indirmek için tasarlanmış bir bildirimsel paradigmadır. kullanıcının açık "
"program kontrol akışına göstermesi gereken dikkat miktarı, komut tabanlı bir"
" projenin ``Robot`` sınıfı çoğunlukla boş olmalıdır. Ancak dahil edilmesi "
"gereken birkaç önemli şey var"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:29
msgid ""
"In Java, an instance of ``RobotContainer`` should be constructed during the "
"``robotInit()`` method - this is important, as most of the declarative robot"
" setup will be called from the ``RobotContainer`` constructor."
msgstr ""
"Javada, ''RobotContainer''ın bir örneği ``robotInit()`` yöntemi sırasında "
"oluşturulmalıdır.-Bu çok önemlidir, çünkü açıklayıcı robot kurulumunun çoğu "
"`` RobotContainer '' kurucusu tarafından çağırılacaktır."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:31
msgid ""
"In C++, this is not needed as RobotContainer is a value member and will be "
"constructed during the construction of ``Robot``."
msgstr ""
"C++ da,RobotContainer bir değer üyesi olduğuiçin  ve `` Robot''un yapımı "
"sırasında yapılacağı için buna gerek yoktur."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:51
msgid ""
"The inclusion of the ``CommandScheduler.getInstance().run()`` call in the "
"``robotPeriodic()`` method is essential; without this call, the scheduler "
"will not execute any scheduled commands. Since ``TimedRobot`` runs with a "
"default main loop frequency of 50Hz, this is the frequency with which "
"periodic command and subsystem methods will be called. It is not recommended"
" for new users to call this method from anywhere else in their code."
msgstr ""
"`` RobotPeriodic () '' yöntemine `` CommandScheduler.getInstance (). Run () "
"'' çağrısının dahil edilmesi önemlidir; bu çağrı olmadan, zamanlayıcı "
"programlanmış herhangi bir komutu yürütmeyecektir. `` TimedRobot '' "
"varsayılan ana döngü frekansı 50Hz ile çalıştığı için bu, periyodik komut ve"
" alt sistem yöntemlerinin çağrılacağı frekanstır. Yeni kullanıcıların bu "
"yöntemi kodlarının herhangi bir yerinden çağırmaları önerilmez."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:71
msgid ""
"The ``autonomousInit()`` method schedules an autonomous command returned by "
"the ``RobotContainer`` instance. The logic for selecting which autonomous "
"command to run can be handled inside of ``RobotContainer``."
msgstr ""
"``autonomousInit()\" yöntemi, ``RobotContainer`` örneği tarafından "
"döndürülen bir komutu zamanlar. Hangi otonom komutun çalıştırılacağını seçme"
" mantığı, `` RobotContainer '' içinde kullanılabilir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:91
msgid ""
"The ``teleopInit()`` method cancels any still-running autonomous commands. "
"This is generally good practice."
msgstr ""
"`teleopInit()`` yöntemi her çalışan otonom komutu reddeder.Bu genellikle iyi"
" bir uygulamadır."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:93
msgid ""
"Advanced users are free to add additional code to the various init and "
"periodic methods as they see fit; however, it should be noted that including"
" large amounts of imperative robot code in ``Robot.java`` is contrary to the"
" declarative design philosophy of the command-based paradigm, and can result"
" in confusingly-structured/disorganized code."
msgstr ""
"İleri düzey kullanıcılar, uygun gördükleri şekilde çeşitli başlangıç ve "
"periyodik yöntemlere ek kod eklemekte özgürdürler; fakat, `` Robot.java '' "
"ya büyük miktarlarda zorunlu robot kodu dahil etmenin, komut tabanlı "
"paradigmanın açıklayıcı tasarım felsefesine aykırı olduğunu ve kafa "
"karıştırıcı bir şekilde yapılandırılmış / düzensiz kodla sonuçlanabileceği "
"unutulmamalıdır."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:96
msgid "RobotContainer"
msgstr "RobotContainer"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:98
msgid ""
"This class (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/RobotContainer.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/RobotContainer.h>`__,"
" `C++ (Source) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/RobotContainer.cpp>`__)"
" is where most of the setup for your command-based robot will take place. In"
" this class, you will define your robot’s subsystems and commands, bind "
"those commands to triggering events (such as buttons), and specify which "
"command you will run in your autonomous routine. There are a few aspects of "
"this class new users may want explanations for:"
msgstr ""
"Bu sınıf (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/RobotContainer.java>`"
" __, `C ++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/RobotContainer.h>`"
" __, `C ++ (Kaynak) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/RobotContainer.cpp>`"
" __), komut tabanlı robotunuz için kurulumun çoğunun gerçekleşeceği yerdir. "
"Bu sınıfta, robotunuzun alt sistemlerini ve komutlarını tanımlayacak, bu "
"komutları tetikleyici olaylara (butonlar gibi) bağlayacak ve otonom "
"rutininizde hangi komutu çalıştıracağınızı belirleyeceksiniz. Bu sınıfın "
"yeni kullanıcıların aşağıdakiler için açıklama isteyebilecekleri birkaç yönü"
" vardır:"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:118
msgid ""
"Notice that subsystems are declared as private fields in ``RobotContainer``."
" This is in stark contrast to the previous incarnation of the command-based "
"framework, but is much more-aligned with agreed-upon object-oriented best-"
"practices. If subsystems are declared as global variables, it allows the "
"user to access them from anywhere in the code. While this can make certain "
"things easier (for example, there would be no need to pass subsystems to "
"commands in order for those commands to access them), it makes the control "
"flow of the program much harder to keep track of as it is not immediately "
"obvious which parts of the code can change or be changed by which other "
"parts of the code. This also circumvents the ability of the resource-"
"management system to do its job, as ease-of-access makes it easy for users "
"to accidentally make conflicting calls to subsystem methods outside of the "
"resource-managed commands."
msgstr ""
"Dikkat et Alt-sistemler gizli olarak ``RobotContainer`` içine atanmıştır. "
"Bu, komuta dayalı yapının önceki enkarnasyonuyla büyük bir zıtlık içindedir,"
" ancak üzerinde mutabık kalınan nesne odaklı uygulamalarla çok daha "
"uyumludur. Eğer alt sistemler ulusal değişkenler olarak atanırsa, "
"kullanıcılara kodun istedikleri yerinden bunlara ulaşmalarına izin verir. "
"Bu, bazı şeyleri kolaylaştırabilirken (örneğin, bu komutlara erişmeleri için"
" alt sistemleri komutlara geçirmeye gerek kalmaz), programın kontrol akışını"
" olmadığı için takip etmeyi çok daha zor hale getirir. Kodun hangi "
"bölümlerinin, kodun diğer bölümleri tarafından değiştirilebileceği veya "
"değiştirildiği hemen anlaşılır. Erişim kolaylığı, kullanıcıların kaynak "
"tarafından yönetilen komutların dışında yanlışlıkla alt sistem yöntemlerine "
"çakışan çağrılar yapmasını kolaylaştırdığından, bu aynı zamanda kaynak "
"yönetimi sisteminin işini yapmasına da engel olur."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:138
msgid ""
"Since subsystems are declared as private members, they must be explicitly "
"passed to commands (a pattern called \"dependency injection\") in order for "
"those commands to call methods on them.  This is done here with "
"``ExampleCommand``, which is passed a pointer to an ``ExampleSubsystem``."
msgstr ""
"Alt-sistemler gizli üyeler olarak açıklandığından beri,bu komutların "
"komutları çağırması için komutlara açıkça aktarılmaları gerekir(\"dependency"
" injection\" adı verilen bir kalıp). Bu, burada bir `` ExampleSubsystem '' e"
" bir işaretçi iletilen `` ExampleCommand '' ile yapılır."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:178
msgid ""
"Finally, the ``getAutonomousCommand()`` method provides a convenient way for"
" users to send their selected autonomous command to the main ``Robot`` class"
" (which needs access to it to schedule it when autonomous starts)."
msgstr ""
"Son olarak, `` getAutonomousCommand() '' yöntemi, kullanıcıların seçtikleri "
"otonom komutlarını ana ``Robot``  sınıfına göndermeleri için uygun bir yol "
"sağlar (otonom başladığında onu programlamak için ona erişim gerekir)."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:181
msgid "Constants"
msgstr "Sabitler"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:183
msgid ""
"The ``Constants`` class (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Constants.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Constants.h>`__)"
" (in C++ this is not a class, but simply a header file in which several "
"namespaces are defined) is where globally-accessible robot constants (such "
"as speeds, unit conversion factors, PID gains, and sensor/motor ports) can "
"be stored. It is recommended that users separate these constants into "
"individual inner classes corresponding to subsystems or robot modes, to keep"
" variable names shorter."
msgstr ""
"``Constants`` sınıfı (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Constants.java>`"
" __, `C ++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Constants.h>`"
" __) (C ++ 'da bu bir sınıf değil, yalnızca birkaç ad alanının tanımlandığı "
"bir başlık dosyasıdır) küresel olarak erişilebilir robot sabitler (hızlar, "
"birim dönüştürme faktörleri, PID kazançları ve sensör / motor portları gibi)"
" saklanabilir. Değişken adlarını daha kısa tutmak için, kullanıcıların bu "
"sabitleri alt sistemlere veya robot modlarına karşılık gelen bireysel iç "
"sınıflara ayırmaları önerilir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:185
msgid ""
"In Java, all constants should be declared ``public static final`` so that "
"they are globally accessible and cannot be changed.  In C++, all constants "
"should be ``constexpr``."
msgstr ""
"Javada, tüm sabitler ``public static final`` olarak açıklanmalıdır ki ulusal"
" olarak erişilebilsin ve değiştirilemesin. C++ 'da tüm sabitler "
"``constexpr`` olmalıdır."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:187
msgid ""
"For more illustrative examples of what a ``constants`` class should look "
"like in practice, see those of the various command-based example projects:"
msgstr ""
"Bir `` constants '' sınıfının pratikte nasıl görünmesi gerektiğine dair daha"
" fazla açıklayıcı örnekler için, çeşitli komut tabanlı örnek projelerin "
"örneklerine bakın:"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:189
msgid ""
"FrisbeeBot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot/include/Constants.h>`__)"
msgstr ""
"FrisbeeBot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot/Constants.java>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot/include/Constants.h>`"
" __)"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:190
msgid ""
"GyroDriveCommands (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands/include/Constants.h>`__)"
msgstr ""
"GyroDriveCommands (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands/Constants.java>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands/include/Constants.h>`"
" __)"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:191
msgid ""
"Hatchbot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional/include/Constants.h>`__)"
msgstr ""
"Hatchbot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional/Constants.java>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional/include/Constants.h>`"
" __)"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:193
msgid ""
"In Java, it is recommended that the constants be used from other classes by "
"statically importing the necessary inner class. An ``import static`` "
"statement imports the static namespace of a class into the class in which "
"you are working, so that any ``static`` constants can be referenced directly"
" as if they had been defined in that class.  In C++, the same effect can be "
"attained with ``using namespace``:"
msgstr ""
"Javada, sabitlerin diğer sınıflardan gerekli iç- sınıfı içe aktararak "
"kullanılması önerilir. Bir ``import static`` ifadesi bir sınıfın statik ad "
"alanını içinde çalıştığınız sınıfa aktarır, yani her ``static`` sabiti eğer "
"sınıfın içinde tanımlıysa direkt başvurulanabilir. C++ 'da, aynı etki "
"``using namespace``: kullanılınarak elde edilebilir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:206
msgid "Subsystems"
msgstr "Alt Sistemler"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:208
msgid "User-defined subsystems should go in this package/directory."
msgstr "Kullanıcı tanımlı alt sistemler bu paket / dizinine girmelidir."

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:211
msgid "Commands"
msgstr "Komutlar"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:213
msgid "User-defined commands should go in this package/directory."
msgstr "Kullanıcı tanımlı komutlar bu paket / dizinine girmelidir."
