# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jiangshan Gong <jiangshan_gong@163.com>, 2020
# Yitong Zhao <lucius300er@outlook.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-24 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:2
msgid "Structuring a Command-Based Robot Project"
msgstr "构建基于命令的机器人项目"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:4
msgid ""
"While users are free to use the command-based libraries however they like "
"(and advanced users are encouraged to do so), new users may want some "
"guidance on how to structure a basic command-based robot project."
msgstr "用户可以随意使用自己喜欢的基于命令的库（鼓励高级用户使用），但是新用户可能需要一些有关如何构建基本的基于命令的机器人项目的指南。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:6
msgid ""
"A standard template for a command-based robot project is included in the "
"WPILib examples repository (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/templates/commandbased>`__)."
" This section will walk users through the structure of this template."
msgstr ""
"WPILib示例存储库中包含基于命令的机器人项目的标准模板（Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased>"
" __，C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/templates/commandbased>"
" __）。本节将向用户介绍此模板的结构。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:8
msgid "The root package/directory generally will contain four classes:"
msgstr "根包/目录通常将包含四个类："

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:10
msgid ""
"``Main``, which is the main robot application (Java only). New users *should"
" not* touch this class. ``Robot``, which is responsible for the main control"
" flow of the robot code. ``RobotContainer``, which holds robot subsystems "
"and commands, and is where most of the declarative robot setup (e.g. button "
"bindings) is performed. ``Constants``, which holds globally-accessible "
"constants to be used throughout the robot."
msgstr ""
"“Main”，这是主要的机器人应用程序（仅Java）。新用户*不应*接触此类。“Robot”，负责机器人代码的主控制流程。 "
"“RobotContainer”包含机器人子系统和命令，是执行大多数声明性机器人设置（例如按钮绑定）的地方。 "
"“Constants”，其中包含可在整个机器人中使用的全局可访问常量。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:12
msgid ""
"The root directory will also contain two sub-packages/sub-directories: "
"``Subsystems`` contains all user-defined subsystem classes. ``Commands`` "
"contains all user-defined command classes."
msgstr "根目录还将包含两个子包/子目录：“Subsystems”包含所有用户定义的子系统类。 “Commands”包含所有用户定义的命令类。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:15
msgid "Robot"
msgstr "Robot"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:17
msgid ""
"As ``Robot`` (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Robot.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Robot.h>`__,"
" `C++ (Source) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/Robot.cpp>`__)"
" is responsible for the program’s control flow, and command-based is an "
"declarative paradigm designed to minimize the amount of attention the user "
"has to pay to explicit program control flow, the ``Robot`` class of a "
"command-based project should be mostly empty. However, there are a few "
"important things that must be included"
msgstr ""
"由于``Robot''（Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Robot.java>`__，`C"
" "
"++（Header）<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Robot.h>`__，`C"
" "
"++（Source）<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/Robot.cpp>`__）负责程序的控制流，基于命令的声明式范例旨在最大程度地减少由于用户必须对显式程序控制流程给予足够的关注，基于命令的项目的“机器人”类应该基本上为空。但是，必须包含一些重要的内容"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:29
msgid ""
"In Java, an instance of ``RobotContainer`` should be constructed during the "
"``robotInit()`` method - this is important, as most of the declarative robot"
" setup will be called from the ``RobotContainer`` constructor."
msgstr ""
"在Java中，应在“ "
"robotInit()”方法期间构造“RobotContainer”的实例——这很重要，因为大多数声明式机器人设置将从“RobotContainer”构造函数调用。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:31
msgid ""
"In C++, this is not needed as RobotContainer is a value member and will be "
"constructed during the construction of ``Robot``."
msgstr "在C ++中，这是不需要的，因为RobotContainer是值成员，并且将在构建“Robot”时进行构造。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:51
msgid ""
"The inclusion of the ``CommandScheduler.getInstance().run()`` call in the "
"``robotPeriodic()`` method is essential; without this call, the scheduler "
"will not execute any scheduled commands. Since ``TimedRobot`` runs with a "
"default main loop frequency of 50Hz, this is the frequency with which "
"periodic command and subsystem methods will be called. It is not recommended"
" for new users to call this method from anywhere else in their code."
msgstr ""
"“robotPeriodic()”方法中必须包含“CommandScheduler.getInstance().run()”调用；没有此调用，调度程序将不会执行任何调度的命令。由于“TimedRobot”以默认的主循环频率50Hz运行，因此这是将调用定期命令和子系统方法的频率。不建议新用户从其代码中的其他任何地方调用此方法。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:71
msgid ""
"The ``autonomousInit()`` method schedules an autonomous command returned by "
"the ``RobotContainer`` instance. The logic for selecting which autonomous "
"command to run can be handled inside of ``RobotContainer``."
msgstr ""
"“autonomousInit()”方法调度由“RobotContainer”实例返回的自治命令。选择要运行的自治命令的逻辑可以在“RobotContainer”内部处理。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:91
msgid ""
"The ``teleopInit()`` method cancels any still-running autonomous commands. "
"This is generally good practice."
msgstr "“teleopInit()”方法取消所有仍在运行的自治命令。这通常是好的做法。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:93
msgid ""
"Advanced users are free to add additional code to the various init and "
"periodic methods as they see fit; however, it should be noted that including"
" large amounts of imperative robot code in ``Robot.java`` is contrary to the"
" declarative design philosophy of the command-based paradigm, and can result"
" in confusingly-structured/disorganized code."
msgstr ""
"高级用户可以随意在自己认为合适的各种初始化和定期方法中添加其他代码；但是，应该注意的是，在“Robot.java”中包含大量命令式机器人代码与基于命令的范例的声明式设计哲学相反，并且可能导致结构混乱/结构混乱的代码。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:96
msgid "RobotContainer"
msgstr "RobotContainer"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:98
msgid ""
"This class (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/RobotContainer.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/RobotContainer.h>`__,"
" `C++ (Source) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/RobotContainer.cpp>`__)"
" is where most of the setup for your command-based robot will take place. In"
" this class, you will define your robot’s subsystems and commands, bind "
"those commands to triggering events (such as buttons), and specify which "
"command you will run in your autonomous routine. There are a few aspects of "
"this class new users may want explanations for:"
msgstr ""
"此类（`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/RobotContainer.java>`__，`C"
" "
"++（Header）<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/RobotContainer.h>`__，`C"
" "
"++（Source）<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/cpp/RobotContainer.cpp>`__）是大多数基于命令的机器人的设置地方。在此类中，您将定义机器人的子系统和命令，将这些命令绑定到触发事件（例如按钮），并指定将在自治例程中运行的命令。新手可能需要对此类进行解释："

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:118
msgid ""
"Notice that subsystems are declared as private fields in ``RobotContainer``."
" This is in stark contrast to the previous incarnation of the command-based "
"framework, but is much more-aligned with agreed-upon object-oriented best-"
"practices. If subsystems are declared as global variables, it allows the "
"user to access them from anywhere in the code. While this can make certain "
"things easier (for example, there would be no need to pass subsystems to "
"commands in order for those commands to access them), it makes the control "
"flow of the program much harder to keep track of as it is not immediately "
"obvious which parts of the code can change or be changed by which other "
"parts of the code. This also circumvents the ability of the resource-"
"management system to do its job, as ease-of-access makes it easy for users "
"to accidentally make conflicting calls to subsystem methods outside of the "
"resource-managed commands."
msgstr ""
"请注意，子系统在“RobotContainer”中被声明为私有字段。这与基于命令的框架的前身形成了鲜明的对比，但与商定的面向对象的最佳实践更加一致。如果子系统被声明为全局变量，则它允许用户从代码中的任何位置访问它们。虽然这可以使某些事情变得容易（例如，无需将子系统传递给命令以使这些命令可以访问它们），但由于不立即执行，因此使得程序的控制流更难以跟踪很明显，代码的哪些部分可以更改或可以被代码的其他哪些部分更改。这也妨碍了资源管理系统执行其工作的能力，因为易于访问使用户更容易意外地在资源管理命令之外意外调用子系统方法。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:138
msgid ""
"Since subsystems are declared as private members, they must be explicitly "
"passed to commands (a pattern called \"dependency injection\") in order for "
"those commands to call methods on them.  This is done here with "
"``ExampleCommand``, which is passed a pointer to an ``ExampleSubsystem``."
msgstr ""
"由于子系统被声明为私有成员，因此必须将它们显式传递给命令（一种称为“依赖注入”的模式），以便这些命令在其上调用方法。这是通过“ExampleCommand”完成的，该示例传递了指向“ExampleSubsystem”的指针。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:158
msgid ""
"As mentioned before, the ``RobotContainer()`` constructor is where most of "
"the declarative setup for the robot should take place, including button "
"bindings, configuring autonomous selectors, etc. If the constructor gets too"
" \"busy,\" users are encouraged to migrate code into separate subroutines "
"(such as the ``configureButtonBindings()`` method included by default) which"
" are called from the constructor."
msgstr ""
"如前所述，应在“ "
"RobotContainer（）”构造函数中进行机器人的大多数声明性设置，包括按钮绑定，配置自主选择器等。如果构造函数太“忙”，则鼓励用户将代码迁移到单独的子例程（例如默认包含的configureButtonBindings（）方法）中，这些子例程从构造函数中调用。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:178
msgid ""
"Finally, the ``getAutonomousCommand()`` method provides a convenient way for"
" users to send their selected autonomous command to the main ``Robot`` class"
" (which needs access to it to schedule it when autonomous starts)."
msgstr ""
"最后，“getAutonomousCommand()”方法为用户提供了一种方便的方法，可以将所选的自主命令发送到主要的Robot类（需要在启动自主类时对其进行调度）。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:181
msgid "Constants"
msgstr "Constants"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:183
msgid ""
"The ``Constants`` class (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Constants.java>`__,"
" `C++ (Header) "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Constants.h>`__)"
" (in C++ this is not a class, but simply a header file in which several "
"namespaces are defined) is where globally-accessible robot constants (such "
"as speeds, unit conversion factors, PID gains, and sensor/motor ports) can "
"be stored. It is recommended that users separate these constants into "
"individual inner classes corresponding to subsystems or robot modes, to keep"
" variable names shorter."
msgstr ""
"``Constants''类（`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/templates/commandbased/Constants.java>`__，`C"
" "
"++（Header）<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/templates/commandbased/include/Constants.h>`__）（在C"
" "
"++中这不是一个类，而是一个定义了多个名称空间的头文件）是可全局访问的机器人的位置可以存储常数（例如速度，单位转换系数，PID增益和传感器/电动机端口）。建议用户将这些常量分成与子系统或机械手模式相对应的各个内部类，以使变量名更短。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:185
msgid ""
"In Java, all constants should be declared ``public static final`` so that "
"they are globally accessible and cannot be changed.  In C++, all constants "
"should be ``constexpr``."
msgstr ""
"在Java中，所有常量都应声明为“public static final”，以便它们可以全局访问且不能更改。在C "
"++中，所有常量都应为“constexpr”。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:187
msgid ""
"For more illustrative examples of what a ``constants`` class should look "
"like in practice, see those of the various command-based example projects:"
msgstr "有关实践中“constants”类的外观的更多说明性示例，请参见各种基于命令的示例项目的示例："

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:189
msgid ""
"FrisbeeBot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot/include/Constants.h>`__)"
msgstr ""
"FrisbeeBot（`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot/Constants.java>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot/include/Constants.h>`__）"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:190
msgid ""
"GyroDriveCommands (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands/include/Constants.h>`__)"
msgstr ""
"GyroDriveCommands（`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands/Constants.java>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands/include/Constants.h>`__）"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:191
msgid ""
"Hatchbot (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional/Constants.java>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional/include/Constants.h>`__)"
msgstr ""
"Hatchbot（`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/hatchbottraditional/Constants.java>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/HatchbotTraditional/include/Constants.h>`__）"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:193
msgid ""
"In Java, it is recommended that the constants be used from other classes by "
"statically importing the necessary inner class. An ``import static`` "
"statement imports the static namespace of a class into the class in which "
"you are working, so that any ``static`` constants can be referenced directly"
" as if they had been defined in that class.  In C++, the same effect can be "
"attained with ``using namespace``:"
msgstr ""
"在Java中，建议通过静态导入必要的内部类从其他类中使用常量。“import "
"static”语句将类的静态名称空间导入到您正在工作的类中，以便可以直接引用任何“static”常量，就好像它们是在该类中定义的一样。在C "
"++中，使用``使用命名空间''可以达到相同的效果："

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:206
msgid "Subsystems"
msgstr "Subsystems"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:208
msgid "User-defined subsystems should go in this package/directory."
msgstr "用户定义的子系统应放在此软件包/目录中。"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:211
msgid "Commands"
msgstr "Commands"

#: ../../frc-docs/source/docs/software/commandbased/structuring-command-based-project.rst:213
msgid "User-defined commands should go in this package/directory."
msgstr "用户定义的命令应放在此软件包/目录中。"
