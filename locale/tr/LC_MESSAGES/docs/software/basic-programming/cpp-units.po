# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Melis Aldeniz <aldenizmelis@gmail.com>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-26 04:30+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:2
msgid "The C++ Units Library"
msgstr "C ++ Ünite Kitaplığı"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:7
msgid "Using the Units Library"
msgstr "Ünite Kitaplığını Kullanma"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:9
msgid ""
"The units library is a header-only library. You must include the relevant "
"header in your source files for the units you want to use. Here's a list of "
"available units."
msgstr ""
"Birim kitaplığı, yalnızca başlık içeren bir kitaplıktır. Kullanmak "
"istediğiniz birimler için kaynak dosyalarınıza ilgili başlığı eklemelisiniz."
" İşte mevcut birimlerin listesi."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:53
msgid ""
"The ``units/math.h`` header provides unit-aware functions like "
"``units::math::abs()``."
msgstr ""
"``units/math.h``  başlığı, ``units::math::abs()``  gibi birime duyarlı "
"işlevler sağlar."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:56
msgid "Unit Types and Container Types"
msgstr "Ünite Tipleri ve Taşıyıcı Sınıf Tipleri"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:58
msgid ""
"The C++ units library is based around two sorts of type definitions: unit "
"types and container types."
msgstr ""
"C ++ ünite kitaplığı iki tür tür tanımına dayanır: birim türleri ve "
"kapsayıcı türleri."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:61
msgid "Unit Types"
msgstr "Ünite Tipleri"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:63
msgid ""
"Unit types correspond to the abstract concept of a unit, without any actual "
"stored value.  Unit types are the fundamental \"building block\" of the "
"units library - all unit types are defined constructively (using the "
"``compound_unit`` template) from a small number of \"basic\" unit types "
"(such as ``meters``, ``seconds``, etc)."
msgstr ""
"Birim türleri, herhangi bir gerçek depolanmış değer olmaksızın soyut bir "
"birim kavramına karşılık gelir.  Birim türleri, birimler kitaplığının temel "
"\"building block-yapı taşı\" dır , az sayıda \"basic-temel\"  birim türünden"
" (örneğin `` metre `` , `` saniye ``  vb.) yapıcı bir şekilde (`` "
"compound_unit-birleşik_birim``  şablonu kullanılarak) tanımlanır."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:68
msgid "Container Types"
msgstr "Container-Taşıyıcı Sınıf Türleri"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:70
msgid ""
"Container types correspond to an actual quantity dimensioned according to "
"some unit - that is, they are what actually hold the numerical value. "
"Container types are constructed from unit types with the ``unit_t`` "
"template.  Most unit types have a corresponding container type that has the "
"same name suffixed by ``_t`` - for example, the unit type ``units::meter`` "
"corresponds to the container type ``units::meter_t``."
msgstr ""
"Container-Taşıyıcı Sınıf  türleri, bir birime göre boyutlandırılmış gerçek "
"bir miktara karşılık gelir - yani, bunlar gerçekte sayısal değeri tutan "
"şeydir. Container-Taşıyıcı Sınıf  türleri, ``unit_t`` şablonuna sahip birim "
"türlerinden oluşturulur. Çoğu birim türünün son eki ``_t`` ile aynı adı "
"taşıyan karşılık gelen bir kap türü vardır - örneğin, birim türü "
"``units::meter``, konteyner türü ``units::meter_t`` ye karşılık gelir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:72
msgid ""
"Whenever a specific quantity of a unit is used (as a variable or a method "
"parameter), it will be an instance of the container type.  By default, "
"container types will store the actual value as a ``double`` - advanced users"
" may change this by calling the ``unit_t`` template manually."
msgstr ""
"Bir birimin belirli bir miktarı kullanıldığında (değişken veya yöntem "
"parametresi olarak), bu, Container-Taşıyıcı Sınıf  türünün bir örneği "
"olacaktır. Varsayılan olarak, Container-Taşıyıcı Sınıf türleri gerçek değeri"
" `` double`-çift`` olarak depolar - ileri düzey kullanıcılar bunu manuel "
"olarak ``unit_t``  şablonunu çağırarak değiştirebilir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:74
msgid ""
"A full list of unit and container types can be found in the `documentation "
"<https://github.com/nholthaus/units#namespaces>`__."
msgstr ""
"Birim ve Container-Taşıyıcı Sınıf türler türlerinin tam listesi "
"`documentation <https://github.com/nholthaus/units#namespaces>` __ "
"belgelerinde bulunabilir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:77
msgid "Creating Instances of Units"
msgstr "Ünite Örnekleri Oluşturma"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:79
msgid ""
"To create an instance of a specific unit, we create an instance of its "
"container type:"
msgstr ""
"Belirli bir ünitenin örneğini oluşturmak için, container türünün bir "
"örneğini oluşturuyoruz:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:86
msgid ""
"Alternatively, the units library has `type literals "
"<https://en.cppreference.com/w/cpp/language/user_literal>`__ defined for "
"some of the more common container types.  These can be used in conjunction "
"with type inference via ``auto`` to define a unit more succinctly:"
msgstr ""
"Alternatif olarak, ünite kitaplığı, daha yaygın kap türlerinden bazıları "
"için tanımlanmış `type literals "
"<https://en.cppreference.com/w/cpp/language/user_literal>`__ sahiptir. "
"Bunlar, bir birimi daha kısa ve öz bir şekilde tanımlamak için tür çıkarımı "
"ile birlikte kullanılabilir:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:93
msgid ""
"Units can also be initialized using a value of an another container type, as"
" long as the types can be converted between one another. For example, a "
"``meter_t`` value can be created from a ``foot_t`` value."
msgstr ""
"Türler birbirleri arasında dönüştürülebildiği sürece, birimler başka bir "
"container  türünün değeri kullanılarak da başlatılabilir. Örneğin, bir "
"``foot_t`` değerinden bir ``meter_t`` değeri oluşturulabilir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:100
msgid ""
"In fact, all container types representing convertible unit types are "
"*implicitly convertible*.  Thus, the following is perfectly legal:"
msgstr ""
"Aslında, dönüştürülebilir birim türlerini temsil eden tüm kap türleri "
"*implicitly convertible*. Bu nedenle, aşağıdakiler tamamen doğrudur:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:106
msgid ""
"In short, we can use *any* unit of length in place of *any other* unit of "
"length, anywhere in our code; the units library will automatically perform "
"the correct conversion for us."
msgstr ""
"Kısacası, kodumuzun herhangi bir yerinde * herhangi bir -any other* uzunluk "
"birimi * yerine * herhangi-any * uzunluk birimini kullanabiliriz; birimler "
"kitaplığı bizim için otomatik olarak doğru dönüşümü gerçekleştirecektir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:109
msgid "Performing Arithmetic with Units"
msgstr "Hesap Yapma Ünitesi"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:111
msgid ""
"Container types support all of the ordinary arithmetic operations of their "
"underlying data type, with the added condition that the operation must be "
"*dimensionally* sound.  Thus, addition must always be performed on two "
"compatible container types:"
msgstr ""
"Container-Taşıyıcı türleri, işlemin * boyutsal olarak * sağlam olması "
"gerektiği ek koşuluyla, temel alınan veri türlerinin tüm sıradan aritmetik "
"işlemlerini destekler. Bu nedenle, ekleme her zaman iki uyumlu container  "
"türünde yapılmalıdır:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:124
msgid ""
"Multiplication may be performed on any pair of container types, and yields "
"the container type of a compound unit:"
msgstr ""
"Çarpma, herhangi bir kap türü çiftinde gerçekleştirilebilir ve bir bileşik "
"birimin kap türünü verir:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:126
msgid ""
"When a calculation yields a compound unit type, this type will only be "
"checked for validity at the point of operation if the result type is "
"specified explicitly.  If ``auto`` is used, this check will not occur.  For "
"example, when we divide distance by time, we may want to ensure the result "
"is, indeed, a velocity (i.e. ``units::meter_per_second_t``). If the return "
"type is declared as ``auto``, this check will not be made."
msgstr ""
"Bir hesaplama bir bileşik birim türü verdiğinde, bu tür yalnızca sonuç türü "
"açıkça belirtilmişse işlem noktasında geçerlilik açısından kontrol "
"edilecektir.  `` auto-otomatik`` kullanılırsa, bu kontrol yapılmayacaktır. "
"Örneğin, mesafeyi zamana böldüğümüzde, sonucun gerçekten bir hız olmasını "
"sağlamak isteyebiliriz (yani, `` units :: meter_per_second_t ``). İade "
"türünün `` auto-otomatik `` olarak bildirilmesi durumunda bu kontrol "
"yapılmayacaktır."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:139
msgid "``<cmath>`` Functions"
msgstr "Fonksiyonlar"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:141
msgid ""
"Some ``std`` functions (such as ``clamp``) are templated to accept any type "
"on which the arithmetic operations can be performed.  Quantities stored as "
"container types will work with these functions without issue."
msgstr ""
"Bazı standart işlevler (`` kelepçe-clamp`` gibi), aritmetik işlemlerin "
"gerçekleştirilebileceği herhangi bir türü kabul edecek şekilde "
"şablonlanmıştır.  container-konteyner türleri olarak depolanan miktarlar bu "
"işlevlerle sorunsuz çalışacaktır."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:143
msgid ""
"However, other ``std`` functions work only on ordinary numerical types (e.g."
" ``double``).  The units library's ``units::math`` namespace contains "
"wrappers for several of these functions that accept units. Examples of such "
"functions include ``sqrt``, ``pow``, etc."
msgstr ""
"Bununla birlikte, diğer standart işlevleri yalnızca sıradan sayısal türlerde"
" çalışır (örneğin, ``double``). Birim kitaplığının `` units :: math`` ad "
"alanı, birimleri kabul eden bu işlevlerin birçoğu için sarmalayıcılar "
"içerir. Bu tür işlevlere örnek olarak `` sqrt ``, `` pow ``,vb. verilebilir."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:151
msgid "Removing the Unit Wrapper"
msgstr "Ünite/Birim Sargısının Çıkarılması"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:162
msgid "Example of the Units Library in WPILib Code"
msgstr "WPILib Kodundaki Ünite Kitaplığı Örneği"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:163
msgid ""
"Several arguments for methods in new features of WPILib (ex. "
":ref:`kinematics <docs/software/kinematics-and-odometry/intro-and-chassis-"
"speeds:What is kinematics?>`) use the units library. Here is an example of "
":ref:`sampling a trajectory <docs/software/advanced-"
"controls/trajectories/manipulating-trajectories:Sampling the trajectory>`."
msgstr ""
"WPILib'in yeni özelliklerindeki yöntemler için çeşitli argümanlar (ör "
":ref:`kinematics <docs/software/kinematics-and-odometry/intro-and-chassis-"
"speeds:What is kinematics?>`) Birimler kitaplığını kullanır. İşte bir örnek "
":ref:`yörüngeyi örneklemek <docs/software/advanced-"
"controls/trajectories/manipulating-trajectories:Sampling the trajectory>`."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:174
msgid ""
"Some WPILib classes represent objects that could naturally work with "
"multiple choices of unit types - for example, a motion profile might operate"
" on either linear distance (e.g. meters) or angular distance (e.g. radians)."
"  For such classes, the unit type is required as a template parameter:"
msgstr ""
"Bazı WPILib sınıfları, birden çok birim türü seçeneğiyle doğal olarak "
"çalışabilen nesneleri temsil eder - örneğin, bir hareket profili doğrusal "
"mesafede (ör. Metre) veya açısal mesafede (ör. Radyan) çalışabilir. Bu tür "
"sınıflar için, birim türü şablon parametresi olarak gereklidir:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:188
msgid ""
"For more detailed documentation, please visit the official `GitHub page "
"<https://github.com/nholthaus/units>`_ for the units library."
msgstr ""
"Daha ayrıntılı belgeler için lütfen birim kitaplığı için resmi `GitHub "
"sayfasını <https://github.com/nholthaus/units>\" _ ziyaret edin."
