# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# MARTIN REGIMBALD <MRegimbald@robotiquefirstquebec.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-06-26 00:48-0700\n"
"PO-Revision-Date: 2020-04-25 02:08+0000\n"
"Last-Translator: MARTIN REGIMBALD <MRegimbald@robotiquefirstquebec.org>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:2
msgid "Enabling Test mode (LiveWindow)"
msgstr "Activation du mode Test (LiveWindow)"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:4
msgid ""
"You may add code to your program to display values for your sensors and "
"actuators while the robot is in Test mode. This can be selected from the "
"Driver Station whenever the robot is not on the field. The code to display "
"these values is automatically generated by RobotBuilder and is described in "
"the next article. Test mode is designed to verify the correct operation of "
"the sensors and actuators on a robot. In addition it can be used for "
"obtaining setpoints from sensors such as potentiometers and for tuning PID "
"loops in your code."
msgstr ""
"Vous pouvez ajouter du code à votre programme pour afficher les valeurs de "
"vos capteurs et actionneurs pendant que le robot est en mode Test. Cela peut"
" être fait à partir de Driver Station quand le robot n’est pas sur le "
"terrain en compétition. Le code pour afficher ces valeurs est généré "
"automatiquement par RobotBuilder et est décrit dans l’article suivant. Le "
"mode Test est conçu pour vérifier le bon fonctionnement des capteurs et des "
"actionneurs sur un robot. En outre, il peut être utilisé pour obtenir des "
"valeurs cibles à partir de capteurs tels que des potentiomètres et pour "
"régler les boucles de rétroation PID dans votre code."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:7
msgid "Setting Test mode with the Driver Station"
msgstr "Configuration du mode Test avec Driver Station"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:10
msgid ""
"Enable Test Mode in the Driver Station by clicking on the \"Test\" button "
"and setting \"Enable\" on the robot. When doing this, the SmartDashboard "
"display will switch to test mode (LiveWindow) and will display the status of"
" any actuators and sensors used by your program."
msgstr ""
"Activez le mode Test dans l'application Driver Station en cliquant sur le "
"bouton \"Test\" et en cliquant \"Enable\" pour le robot. Ce faisant, l’écran"
" de SmartDashboard passera en mode Test (LiveWindow) et affichera l’état de "
"tous les actionneurs et capteurs utilisés par votre programme."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:13
msgid "Explicitly vs. implicit test mode display"
msgstr "Affichage en mode test explicite vs implicite"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:16
msgid ""
"All sensors and actuators will automatically be displayed on the "
"SmartDashboard in test mode and will be named using the object type (such as"
" Jaguar, Analog, Victor, etc.) with the module number and channel number "
"with which the object was created. In addition, the program can explicitly "
"add sensors and actuators to the test mode display, in which case "
"programmer-defined subsystem and object names can be specified making the "
"program clearer. This example illustrates explicitly defining those sensors "
"and actuators in the highlighted code."
msgstr ""
"Tous les capteurs et actionneurs seront automatiquement affichés sur "
"SmartDashboard en mode test et seront nommés en utilisant le type d’objet "
"(tel que Jaguar, Analog, Victor, etc.) avec le numéro du module et le numéro"
" de canal avec lequel l’objet a été créé. En outre, le programme peut "
"explicitement ajouter des capteurs et des actionneurs au mode test; dans "
"cas, les noms de sous-systèmes et d’objets définis par le programmeur "
"peuvent être spécifiés, ce qui rend le programme plus clair. Cet exemple "
"illustre la définition explicite des capteurs et actionneurs dans le code "
"mis en surbrillance."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:19
msgid "Understanding what is displayed in Test mode"
msgstr "Comprendre ce qui s’affiche en mode Test"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/test-mode-and-live-window/enabling-test-mode.rst:22
msgid ""
"This is the output in the SmartDashboard display when the robot is placed "
"into test mode. In the display shown above the objects listed as Ungrouped "
"were implicitly created by WPILib when the corresponding objects were "
"created. These objects are contained in a subsystem group called "
"\"Ungrouped\" **(1)** and are named with the device type (Analog, Jaguar in "
"this case), and the module and channel numbers. The objects shown in the "
"\"SomeSubsystem\" **(2)** group are explicitly created by the programmer "
"from the code example in the previous section. These are named in the calls "
"to ``LiveWindow.addActuator()`` and ``LiveWindow.AddSensor()``. Explicitly "
"created sensors and actuators will be grouped by the specified subsystem."
msgstr ""
"Ceci correspond à la sortie affichée par SmartDashboard lorsque le robot est"
" placé en mode test. Dans l’affichage indiqué ci-dessus, les objets listés "
"sous Ungrouped ont été créés implicitement par WPILib lorsque les objets "
"correspondants ont été créés. Ces objets sont contenus dans un groupe de "
"sous-systèmes appelé \"Ungrouped\" **(1)** et sont nommés avec le type du "
"dispositif (dans le cas présent: Analogique, Jaguar), ainsi que les numéros "
"de module et de canal. Les objets apparaissant dans le groupe "
"\"SomeSubsystem\" **(2)**  sont explicitement créés par le programmeur à "
"partir de l’exemple de code de la section précédente. Ceux-ci figurent dans "
"les appels aux méthodes ''LiveWindow.addActuator()'' et "
"''LiveWindow.AddSensor()''. Les capteurs et actionneurs créés explicitement "
"seront regroupés sous le sous-système spécifié."
