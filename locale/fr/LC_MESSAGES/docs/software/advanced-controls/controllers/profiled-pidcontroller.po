# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Austin Shalit <austinshalit@gmail.com>, 2021
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-11 04:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:2
msgid "Combining Motion Profiling and PID Control with ProfiledPIDController"
msgstr ""
"Combinaison du profilage de mouvement et du contrôle PID avec "
"ProfiledPIDController"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:4
msgid ""
"For a guide on implementing the ``ProfiledPIDController`` class in the "
":ref:`command-based framework <docs/software/commandbased/what-is-command-"
"based:What Is \"Command-Based\" Programming?>` framework, see "
":ref:`docs/software/commandbased/profilepid-subsystems-commands:Combining "
"Motion Profiling and PID in Command-Based`."
msgstr ""
"Pour un guide sur l'implémentation de la classe ``ProfiledPIDController`` "
"dans le cadre du :ref:`command-based framework "
"<docs/software/commandbased/what-is-command-based:What Is \"Command-Based\" "
"Programming?>` framework, see :ref:`docs/software/commandbased/profilepid-"
"subsystems-commands:Combining Motion Profiling and PID in Command-Based`."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:6
msgid ""
"In the previous article, we saw how to use the ``TrapezoidProfile`` class to"
" create and use a trapezoidal motion profile.  The example code from that "
"article demonstrates manually composing the ``TrapezoidProfile`` class with "
"the external PID control feature of a \"smart\" motor controller."
msgstr ""
"Dans l'article précédent, nous avons vu comment utiliser la classe "
"``TrapezoidProfile`` pour créer et utiliser un profil de mouvement "
"trapézoïdal. L'exemple de code de cet article montre comment créer "
"manuellement la classe ``TrapezoidProfile`` avec la fonction de contrôle PID"
" externe d'un contrôleur de moteur \"intelligent\"."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:8
msgid ""
"This combination of functionality (a motion profile for generating setpoints"
" combined with a PID controller for following them) is extremely common.  To"
" facilitate this, WPILib comes with a ``ProfiledPIDController`` class (`Java"
" "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/math/controller/ProfiledPIDController.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc_1_1_profiled_p_i_d_controller.html>`__)"
" that does most of the work of combining these two functionalities.  The API"
" of the ``ProfiledPIDController`` is very similar to that of the "
"``PIDController``, allowing users to add motion profiling to a PID-"
"controlled mechanism with very few changes to their code."
msgstr ""
" Cette combinaison de fonctionnalités (un profil de mouvement pour générer "
"des points de consigne combiné à un contrôleur PID pour les suivre) est "
"extrêmement courante. Pour faciliter cela, WPILib est livré avec une classe "
"``ProfiledPIDController`` (`Java "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/java/edu/wpi/first/math/controller/ProfiledPIDController.html>`__,"
" `C++ "
"<https://first.wpi.edu/wpilib/allwpilib/docs/release/cpp/classfrc_1_1_profiled_p_i_d_controller.html>`__)"
" qui fait la majeure partie du travail de combinaison de ces deux "
"fonctionnalités. L’API du ``ProfiledPIDController`` est très similaire à "
"celle du ``PIDController``, permettant aux utilisateurs d’ajouter un "
"profilage de mouvement à un mécanisme contrôlé par PID avec très peu de "
"modifications à leur code."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:11
msgid "Using the ProfiledPIDController class"
msgstr "L'utilisation de la classe ProfiledPIDController"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:13
msgid ""
"In C++, the ``ProfiledPIDController`` class is templated on the unit type "
"used for distance measurements, which may be angular or linear.  The passed-"
"in values *must* have units consistent with the distance units, or a "
"compile-time error will be thrown.  For more information on C++ units, see "
":ref:`docs/software/basic-programming/cpp-units:The C++ Units Library`."
msgstr ""
"En C ++, la classe ``ProfiledPIDController`` est basée sur le type d'unité "
"utilisé pour les mesures de distance, qui peut être angulaire ou linéaire. "
"Les valeurs transmises *doivent* avoir des unités cohérentes avec les unités"
" de distance, sinon une erreur de compilation sera levée. Pour plus "
"d'informations sur les unités C++, voir :ref:`docs/software/basic-"
"programming/cpp-units:The C++ Units Library`."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:15
msgid ""
"Much of the functionality of ``ProfiledPIDController`` is effectively "
"identical to that of ``PIDController``.  Accordingly, this article will only"
" cover features that are substantially-changed to accommodate the motion "
"profiling functionality.  For information on standard ``PIDController`` "
"features, see :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""
"La plupart des fonctionnalités de ``ProfiledPIDController``  sont "
"relativement identiques à celle de ``PIDController``. Par conséquent, cet "
"article ne couvrira que les fonctionnalités qui ont été substantiellement "
"modifiées pour s'adapter à la fonctionnalité de profilage de mouvement. Pour"
" plus d'informations sur les fonctionnalités standard de ``PIDController``, "
"voir :ref:`docs/software/advanced-controls/controllers/pidcontroller:PID "
"Control in WPILib`."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:19
msgid "Constructing a ProfiledPIDController"
msgstr "La construction d'un objet ProfiledPIDController"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:21
msgid ""
"C++ is often able to infer the type of the inner classes, and thus a simple "
"initializer list (without the class name) can be sent as a parameter.  The "
"full class name is included in the example below for clarity."
msgstr ""
"C ++ est souvent capable d'inférer le type des classes internes, et donc une"
" simple liste d'initialisation (sans le nom de la classe) peut être envoyée "
"en tant que paramètre. Le nom complet de la classe est inclus dans l'exemple"
" ci-dessous pour plus de clarté."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:23
msgid ""
"Creating a ``ProfiledPIDController`` is nearly identical to :ref:`creating a"
" PIDController <docs/software/advanced-"
"controls/controllers/pidcontroller:Constructing a PIDController>`.  The only"
" difference is the need to supply a set of :ref:`trapezoidal profile "
"constraints <docs/software/advanced-controls/controllers/trapezoidal-"
"profiles:Constraints>`, which will be automatically forwarded to the "
"internally-generated ``TrapezoidProfile`` instances:"
msgstr ""
"La création d'un ``ProfiledPIDController`` est presque identique à "
":ref:`creating a  PIDController <docs/software/advanced-"
"controls/controllers/pidcontroller:Constructing a PIDController>`. La seule "
"différence est la nécessité de fournir un ensemble de :ref:`trapezoidal "
"profile constraints <docs/software/advanced-"
"controls/controllers/trapezoidal-profiles:Constraints>`, qui seront "
"automatiquement transmises aux instances du \"TrapezoidProfile\" :"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:46
msgid "Goal vs Setpoint"
msgstr "Objectif vs point de consigne"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:48
msgid ""
"A major difference between a standard ``PIDController`` and a "
"``ProfiledPIDController`` is that the actual *setpoint* of the control loop "
"is not directly specified by the user.  Rather, the user specifies a *goal* "
"position or state, and the setpoint for the controller is computed "
"automatically from the generated motion profile between the current state "
"and the goal.  So, while the user-side call looks mostly identical:"
msgstr ""
"Une différence majeure entre un ``PIDController`` normal et un "
"``ProfiledPIDController`` est que le *point de consigne* réel de la boucle "
"de régulation n'est pas directement spécifié par l'utilisateur. Au "
"contraire, l'utilisateur spécifie une position ou un état souhaité, ou "
"*objectif*, et le point de consigne pour le contrôleur est calculé "
"automatiquement à partir du profil de mouvement généré entre l'état actuel "
"et l'état objectif.  Alors que la commande pour appeler cette classe semble "
"essentiellement identique:"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:64
msgid ""
"The specified ``goal`` value (which can be either a position value or a "
"``TrapezoidProfile.State``, if nonzero velocity is desired) is *not* "
"necessarily the *current* setpoint of the loop - rather, it is the "
"*eventual* setpoint once the generated profile terminates."
msgstr ""
"La valeur ``objectif`` spécifiée (qui peut être une valeur de position ou un"
" ``TrapezoidProfile.State``, si une vitesse non nulle est souhaitée) n'est "
"*pas* nécessairement le point de consigne *actuel* de la boucle - plutôt, "
"elle est le point de consigne *éventuel* une fois le profil généré terminé."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:67
msgid "Getting/Using the Setpoint"
msgstr "L'obtention / l'utilisation du point de consigne"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:69
msgid ""
"Since the ``ProfiledPIDController`` goal differs from the setpoint, is if "
"often desirable to poll the current setpoint of the controller (for "
"instance, to get values to use with :ref:`feedforward "
"<docs/software/advanced-controls/controllers/combining-feedforward-"
"feedback:Using Feedforward Components with PID>`).  This can be done with "
"the ``getSetpoint()`` method."
msgstr ""
"Étant donné que l'objectif ``ProfiledPIDController`` diffère du point de "
"consigne, il est souvent souhaitable d'interroger le contrôleur pour obtenir"
" le point de consigne actuel (par exemple, pour obtenir des valeurs à "
"utiliser avec :ref:`feedforward <docs/software/advanced-"
"controls/controllers/combining-feedforward-feedback:Using Feedforward "
"Components with PID>`). Cela peut être fait avec la méthode "
"``getSetpoint()``."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:71
msgid "The returned setpoint might then be used as in the following example:"
msgstr ""
"Le point de consigne renvoyé peut alors être utilisé comme dans l'exemple "
"suivant."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:109
msgid "Complete Usage Example"
msgstr "Un exemple complet d'utilisation"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:111
msgid ""
"A more complete example of ``ProfiledPIDController`` usage is provided in "
"the ElevatorProfilePID example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorprofiledpid>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/ElevatorProfiledPID/cpp>`__):"
msgstr ""
"Un exemple plus complet de l’utilisation de ``ProfiledPIDController`` est "
"fourni dans le projet d’exemple ElevatorProfilePID (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorprofiledpid>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/ElevatorProfiledPID/cpp>`__):"
"  "

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:115
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:123
msgid "C++"
msgstr "C++"
