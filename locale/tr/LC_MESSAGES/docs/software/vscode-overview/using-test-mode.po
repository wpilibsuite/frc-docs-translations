# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Demet T <dtumkaya19@ku.edu.tr>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-21 04:10+0000\n"
"PO-Revision-Date: 2020-08-20 04:15+0000\n"
"Last-Translator: Demet T <dtumkaya19@ku.edu.tr>, 2020\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:2
msgid "Using Test Mode"
msgstr "Test Modunu Kullanma"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:4
msgid ""
"Test mode is designed to enable programmers to have a place to put code to "
"verify that all systems on the robot are functioning. In each of the robot "
"program templates there is a place to add test code to the robot. If you use"
" the TimedRobot template, or use command-based programming you can easily "
"see the operation of all the motors and sensors through the LiveWindow."
msgstr ""
"Test modu, programcıların robot üzerindeki tüm sistemlerin çalıştığını "
"doğrulamak için kod koyabilecekleri bir yere sahip olmasını sağlamak için "
"tasarlanmıştır. Robot programı şablonlarının her birinde, robota test kodu "
"eklemek için bir yer vardır. TimedRobot şablonunu kullanırsanız veya komut "
"tabanlı programlamayı kullanırsanız, tüm motorların ve sensörlerin "
"çalışmasını LiveWindow aracılığıyla kolayca görebilirsiniz."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:7
msgid "Enabling Test Mode"
msgstr "Test Modunu Etkinleştirme"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:9
msgid ""
"Test mode on the robot can be enabled from the Driver Station just like "
"autonomous or teleop. When in test mode, the ``testInit`` method is run "
"once, and the testPeriodic method is run once per tick, in addition to "
"``robotPeriodic``, the same as teleop and autonomous control modes. To "
"enable test mode in the Driver Station, select the \"Test\" button and "
"enable the robot. The test mode code will then run."
msgstr ""
"Robot üzerindeki test modu, otonom veya teleop gibi Driver Station'dan "
"etkinleştirilebilir. Test modundayken, ``testInit`` yöntemi bir kez "
"çalıştırılır ve teleop ve otonom kontrol modlarında olduğu gibi "
"``robotPeriodic``e ek olarak testPeriodic yöntemi, her tık için bir kez "
"çalıştırılır. Driver Station'da test modunu etkinleştirmek için \"Test\" "
"düğmesini seçin ve robotu etkinleştirin. Test modu kodu daha sonra "
"çalışacaktır."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:12
msgid "Adding Test mode code to your robot code"
msgstr "Robot kodunuza Test modu kodu ekleme"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:14
msgid ""
"Adding test mode can be as painless as calling your already written Teleop "
"methods from Test. This will allow you to use the LiveWindow tuning features"
" for classes such as PIDBase and PIDController, as well as PIDSubsystems and"
" PIDCommands, to change PID constants and setpoints. Make sure to add your "
"subsystems to SmartDashboard with the ``putData(subsystem)`` or "
"``PutData(subsystem)`` method."
msgstr ""
"Test modu eklemek, önceden yazılmış Teleop yöntemlerinizi Test'ten aramak "
"kadar zahmetsiz olabilir. Bu, PID sabitlerini ve ayar noktalarını "
"değiştirmek için PIDBase ve PIDController gibi sınıfların yanı sıra "
"PIDSubsystems ve PIDCommands gibi LiveWindow ayarlama özelliklerini "
"kullanmanıza olanak tanır. Alt sistemlerinizi SmartDashboard'a "
"``putData(subsystem)`` veya ``PutData(subsystem)`` yöntemiyle eklediğinizden"
" emin olun."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:53
msgid "Test Mode in SmartDashboard"
msgstr "SmartDashboard'da Test Modu"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:55
msgid ""
"The above sample code produces the following output when the Driver Station "
"is put into Test mode then enabled. You can operate the motors by moving the"
" sliders and read the values of sensors such as the wrist potentiometer."
msgstr ""
"Yukarıdaki örnek kod, Driver Station Test moduna geçirilip "
"etkinleştirildiğinde aşağıdaki çıktıyı üretir. Kaydırıcıları hareket "
"ettirerek motorları çalıştırabilir ve bilek potansiyometresi gibi "
"sensörlerin değerlerini okuyabilirsiniz."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:57
msgid ""
"Notice that the values are grouped by the subsystem names to group related "
"actuators and sensors for easy testing. The subsystem names are specified by"
" supplying a name to the ``putData()`` method, or by calling "
"``SendableRegistry.setName()``. This grouping, while not required, makes it "
"much easier to test one subsystem at a time and have all the values next to "
"each other on the screen."
msgstr ""
"Değerlerin, kolay test için ilgili aktüatörleri ve sensörleri gruplamak için"
" alt sistem adlarına göre gruplandığına dikkat edin. Alt sistem adları, "
"``putData()`` yöntemine bir ad sağlanarak veya "
"``SendableRegistry.setName()`` çağrılarak belirtilir. Bu gruplama, gerekli "
"olmamakla birlikte, tek seferde bir alt sistemi test etmeyi çok daha "
"kolaylaştırır ve tüm değerlerin ekranda yan yana olmasını sağlar."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:60
msgid "Using Test Mode with the TimedRobot Template"
msgstr "TimedRobot Şablonu ile Test Modunu Kullanma"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:62
msgid ""
"The TimedRobot template lends itself quite nicely to testing since it will "
"periodically call the testPeriodic() method (or TestPeriodic() in C++) in "
"your robot program. The testPeriodic() method will be called every 20ms and "
"it is a good place to test commands or have LiveWindow update. The "
"LiveWindow updating is built into the TimedRobot template so there is very "
"little work to use LiveWindow."
msgstr ""
"TimedRobot şablonu, robot programınızda periyodik olarak testPeriodic() "
"yöntemini (veya C++ 'da TestPeriodic()'i) çağıracağından, test etmeye "
"oldukça uygundur. TestPeriodic() yöntemi her 20 ms'de bir çağrılır ve "
"komutları test etmek veya LiveWindow güncellemesini almak için iyi bir "
"yerdir. LiveWindow güncellemesi, TimedRobot şablonuna yerleştirilmiştir, bu "
"nedenle LiveWindow'u kullanmak için çok az iş gerekir."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:64
msgid ""
"This works even if you are using the TimedRobot template and not doing "
"Command-based programming."
msgstr ""
"Bu, TimedRobot şablonunu kullanıyor ve Komut-tabanlı programlama yapmıyor "
"olsanız bile çalışır."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:66
msgid ""
"In this example the sensors are registered with the LiveWindow and during "
"the testPeriodic method, simply update all the values by calling the "
"LiveWindow ``run()`` method. If your program is causing too much network "
"traffic you can call the run method less frequently by, for example, only "
"calling it every 5 updates for a 100ms update rate."
msgstr ""
"Bu örnekte, sensörler LiveWindow ile kaydedilir ve testPeriodic yöntemi "
"sırasında, LiveWindow ``run()`` yöntemini çağırarak tüm değerleri "
"güncelleyin. Programınız çok fazla ağ trafiğine neden oluyorsa, çalıştırma "
"yöntemini daha seyrek olarak çağırabilirsiniz, örneğin 100 ms'lik bir "
"güncelleme hızı için her 5 güncellemede bir çağırabilirsiniz."

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:69
msgid "PID Tuning in Test Mode"
msgstr "Test Modunda PID Ayarı"

#: ../../frc-docs/source/docs/software/vscode-overview/using-test-mode.rst:71
msgid ""
"Tuning PID loops is often a challenging prospect with frequent recompiles of"
" the program to get the correct values. When using the command based "
"programming model, subclassing PIDSubsystem or PIDCommand in your PID "
"commands allows the adjustment of PID constants with immediate feedback of "
"the results."
msgstr ""
"PID döngülerini ayarlamak, doğru değerleri elde etmek için programın sık sık"
" yeniden derlenmesiyle genellikle zorlu bir olasılıktır. Komut-tabanlı "
"programlama modelini kullanırken, PID komutlarınızda PIDSubsystem veya "
"PIDCommand'in alt sınıflara ayrılması, sonuçların anında geri bildirimi ile "
"PID sabitlerinin ayarlanmasına izin verir."
