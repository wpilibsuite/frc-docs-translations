# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Jiangshan Gong <jiangshan_gong@163.com>, 2020
# Tianrui Wu <tw2789@columbia.edu>, 2020
# Yitong Zhao <lucius300er@outlook.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:2
msgid "The Command Scheduler"
msgstr "命令调度程序"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:6
msgid ""
"The ``CommandScheduler`` also runs the ``periodic()`` method of each "
"registered ``Subsystem``."
msgstr "“CommandScheduler”还运行每个已注册“Subsystem”的“periodic()”方法。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:9
msgid "Using the Command Scheduler"
msgstr "使用命令调度程序"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:11
msgid ""
"The ``CommandScheduler`` is a *singleton*, meaning that it is a globally-"
"accessible class with only one instance.  Accordingly, in order to access "
"the scheduler, users must call the ``CommandScheduler.getInstance()`` "
"command."
msgstr ""
"\"CommandScheduler\" 是一个 *单例类* ，这意味着它是一个只有一个实例的全局类。因此，为了访问调度程序，用户必须调用 "
"\"CommandScheduler.getInstance()\" 命令。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:13
msgid ""
"For the most part, users do not have to call scheduler methods directly - "
"almost all important scheduler methods have convenience wrappers elsewhere "
"(e.g. in the ``Command`` and ``Subsystem`` interfaces)."
msgstr ""
"在大多数情况下，用户不必直接调用调度程序方法——几乎所有重要的调度程序方法在其他位置都有方便包装器（例如，在“Command”和“Subsystem”接口中）。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:15
msgid ""
"However, there is one exception: users *must* call "
"``CommandScheduler.getInstance().run()`` from the ``robotPeriodic()`` method"
" of their ``Robot`` class.  If this is not done, the scheduler will never "
"run, and the command framework will not work.  The provided command-based "
"project template has this call already included."
msgstr ""
"但是，有一个例外：用户必须从其“Robot”类的“robotPeriodic()”方法中调用“CommandScheduler.getInstance().run()”。如果不这样做，则调度程序将永远不会运行，并且命令框架将无法运行。提供的基于命令的项目模板已包含此调用。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:18
msgid "The ``schedule()`` Method"
msgstr "“schedule()”方法"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:26
msgid "The Scheduler Run Sequence"
msgstr "调度程序运行顺序"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:28
msgid ""
"The ``initialize()`` method of each ``Command`` is called when the command "
"is scheduled, which is not necessarily when the scheduler runs (unless that "
"command is bound to a button)."
msgstr "每个“Command”的“initialize()”方法都是在调度命令时调用的，而不必在调度程序运行时调用（除非该命令已绑定到按钮）。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:36
msgid "Step 1: Run Subsystem Periodic Methods"
msgstr "步骤1：运行子系统定期方法"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:38
msgid ""
"First, the scheduler runs the ``periodic()`` method of each registered "
"``Subsystem``."
msgstr "首先，调度程序对每个已注册的“子系统”运行“periodic()”方法。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:41
msgid "Step 2: Poll Command Scheduling Triggers"
msgstr "步骤2：轮询命令调度触发器"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:43
msgid ""
"For more information on how trigger bindings work, see :doc:`binding-"
"commands-to-triggers`"
msgstr "有关触发器绑定如何工作的更多信息，请参阅:doc:`binding-commands-to-triggers`"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:45
msgid ""
"Secondly, the scheduler polls the state of all registered triggers to see if"
" any new commands that have been bound to those triggers should be "
"scheduled.  If the conditions for scheduling a bound command are met, the "
"command is scheduled and its ``Initialize()`` method is run."
msgstr ""
"其次，调度程序轮询所有已注册触发器的状态，以查看是否应调度已绑定到这些触发器的任何新命令。如果满足调度绑定命令的条件，则对命令进行调度并运行其“Initialize()”方法。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:48
msgid "Step 3: Run/Finish Scheduled Commands"
msgstr "步骤3：运行/完成计划的命令"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:50
msgid ""
"Thirdly, the scheduler calls the ``execute()`` method of each currently-"
"scheduled command, and then checks whether the command has finished by "
"calling the ``isFinished()`` method.  If the command has finished, the "
"``end()`` method is also called, and the command is de-scheduled and its "
"required subsystems are freed."
msgstr ""
"第三，调度程序调用每个当前调度的命令的“execute()”方法，然后通过调用“isFinished()”方法检查命令是否完成。如果命令已完成，则还将调用“end()”方法，并对该命令进行调度，并释放其所需的子系统。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:52
msgid ""
"Note that this sequence of calls is done in order for each command - thus, "
"one command may have its ``end()`` method called before another has its "
"``execute()`` method called.  Commands are handled in the order they were "
"scheduled."
msgstr ""
"请注意，此调用顺序是针对每个命令按顺序进行的——因此，一个命令可能会先调用其“end()”方法，而另一命令可能会调用其“execute()”方法。命令按计划的顺序处理。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:55
msgid "Step 4: Schedule Default Commands"
msgstr "步骤4：调度默认命令"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:57
msgid ""
"Finally, any registered ``Subsystem`` has its default command scheduled (if "
"it has one).  Note that the ``initialize()`` method of the default command "
"will be called at this time."
msgstr "最后，任何已注册的“子系统”都有其默认命令（如果有的话）。注意，此时将调用默认命令的“initialize()”方法。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:60
msgid "Disabling the Scheduler"
msgstr "禁用调度程序"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:62
msgid ""
"The scheduler can be disabled by calling "
"``CommandScheduler.getInstance().disable()``.  When disabled, the "
"scheduler's ``schedule()`` and ``run()`` commands will not do anything."
msgstr ""
"可以通过调用“CommandScheduler.getInstance().disable()”来禁用调度程序。禁用时，调度程序的“schedule()”和“run()”命令将不执行任何操作。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:64
msgid ""
"The scheduler may be re-enabled by calling "
"``CommandScheduler.getInstance().enable()``."
msgstr "可以通过调用“CommandScheduler.getInstance.()enable()”来重新启用调度程序。"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:67
msgid "Command Event Methods"
msgstr "命令事件方法"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:72
msgid "onCommandInitialize"
msgstr "onCommandInitialize"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:77
msgid "onCommandExecute"
msgstr "onCommandExecute"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:82
msgid "onCommandFinish"
msgstr "onCommandFinish"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:87
msgid "onCommandInterrupt"
msgstr "onCommandInterrupt"

#: ../../frc-docs/source/docs/software/commandbased/command-scheduler.rst:91
msgid ""
"A typical use-case for these methods is adding markers in an event log "
"whenever a command scheduling event takes place, as demonstrated in the "
"SchedulerEventLogging example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/schedulereventlogging>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/SchedulerEventLogging>`__):"
msgstr ""
"这些方法的典型用例是，每当发生命令调度事件时，便在事件日志中添加标记，如SchedulerEventLogging示例项目（Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/schedulereventlogging>"
" __，C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/SchedulerEventLogging>"
" __）所示："
