# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 怡静 陆 <2238710874@qq.com>, 2021
# Tianrui Wu <tw2789@columbia.edu>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-18 16:18+0000\n"
"PO-Revision-Date: 2020-04-25 02:00+0000\n"
"Last-Translator: Tianrui Wu <tw2789@columbia.edu>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:2
msgid "Addressable LEDs"
msgstr "可寻址 LED"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:4
msgid ""
"LED strips have been commonly used by teams for several years for a variety "
"of reasons. They allow teams to debug robot functionality from the audience,"
" provide a visual marker for their robot, and can simply add some visual "
"appeal. WPILib has an API for controlling WS2812 LEDs with their data pin "
"connected via PWM."
msgstr ""
"出于多种原因，LED 灯带在近几年来被各个队伍广泛使用。LED 灯带可以让队伍能够通过观察 LED "
"灯调试机器人的各项功能，为他们的机器人提供一个视觉标记，并且可增添一些视觉上的吸引力。 WPILib 有一个用于控制 WS2812 LED 的 API "
"，其数据线通过 PWM 连接。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:7
msgid "Instantiating the AddressableLED Object"
msgstr "实例化 AddressableLED 对象"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:9
msgid ""
"You first create an ``AddressableLED`` object that takes the PWM port as an "
"argument. It *must* be a PWM header on the roboRIO. Then you set the number "
"of LEDs located on your LED strip, with can be done with the ``setLength()``"
" function."
msgstr ""
"首先，创建一个 AddressableLED 对象，并将 PWM 端口作为构造函数的参数。这个端口必须是 roboRIO 上的 PWM "
"接口。然后，可以通过该 setLength() 功能设置 LED 灯带上的 LED 数量。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:11
msgid ""
"It is important to note that setting the length of the LED header is an "
"expensive task and it's **not** recommended to run this periodically."
msgstr "要注意，设置 LED 的接头长度是一项耗时耗计算量的任务，不建议其在循环中运行。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:13
msgid ""
"After the length of the strip has been set, you'll have to create an "
"``AddressableLEDBuffer`` object that takes the number of LEDs as an input. "
"You'll then call ``myAddressableLed.setData(myAddressableLEDBuffer)`` to set"
" the led output data. Finally, you can call ``myAddressableLed.start()`` to "
"write the output continuously. Below is a full example of the initialization"
" process."
msgstr ""
"设置灯带的长度后，您必须创建一个 \"AddressableLEDBuffer\" 对象，该对象将 LED 的数量作为输入。然后，您可以调用 "
"\"myAddressableLed.setData(myAddressableLEDBuffer)\" 以设置 LED 的输出数据。最后，您可以调用 "
"\"myAddressableLed.start()\" 以连续输入输出。以下是初始化过程的完整示例。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:15
msgid "C++ does not have an AddressableLEDBuffer, and instead uses an Array."
msgstr "C++ 没有 AddressableLEDBuffer 类，而是使用 Array 。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:42
msgid "Setting the Entire Strip to One Color"
msgstr "将整个灯带设置成单色"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:44
msgid ""
"Color can be set to an individual led on the strip using two methods. "
"``setRGB()`` which takes RGB values as an input and ``setHSV()`` which takes"
" HSV values as an input."
msgstr ""
"可以使用两种方法将颜色设置为条带上的单个 LED ：``setRGB()``，即接受 RGB 值作为输入；``setHSV()``，接受 HSV "
"值作为输入。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:47
msgid "Using RGB Values"
msgstr "使用 RGB 值"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:49
msgid ""
"RGB stands for Red, Green, and Blue. This is a fairly common color model as "
"it's quite easy to understand. LEDs can be set with the ``setRGB`` method "
"that takes 4 arguments: index of the LED, amount of red, amount of green, "
"amount of blue. The amount of Red, Green, and Blue are integer values "
"between 0-255."
msgstr ""
"RGB 指红、绿、蓝。这是一个相当常见的色彩模型，因为它很容易理解。可以使用带有4个参数的 ``setRGB`` 方法设置 LED ：LED "
"的索引，红色量，绿色量，蓝色量。红色，绿色和蓝色的量是一个介于 0-255 之间的整数值。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:75
msgid "Using HSV Values"
msgstr "使用 HSV 值"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:77
msgid ""
"HSV stands for Hue, Saturation, and Value. Hue describes the color or tint, "
"saturation being the amount of gray, and value being the brightness. In "
"WPILib, Hue is an integer from 0 - 180. Saturation and Value are integers "
"from 0 - 255. If you look at a color picker like `Google's "
"<https://www.google.com/search?q=color+picker>`_, Hue will be 0 - 360 and "
"Saturation and Value are from 0% to 100%. This is the same way that OpenCV "
"handles HSV colors. Make sure the HSV values entered to WPILib are correct, "
"or the color produced might not be the same as was expected."
msgstr ""
"HSV 中的 H 代表色相，S 代表饱和度，V 代表亮度值。色相描述颜色或色调，饱和度表示灰度，亮度值表示亮度。在 WPILib "
"中，色相是0到180之间的整数。饱和度和值是0到255之间的整数。如果您使用像 `Google's "
"<https://www.google.com/search?q=color+picker>`_ "
"的颜色选择器，色相将是0到360，饱和度和值是0％至100％。这与 OpenCV 处理 HSV 颜色的方式相同。确保输入到 WPILib 的 HSV "
"值正确，否则产生的颜色可能与预期的颜色不同。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:82
msgid ""
"LEDs can be set with the ``setHSV`` method that takes 4 arguments: index of "
"the LED, hue, saturation, and value. An example is shown below for setting "
"the color of an LED strip to red (hue of 0)."
msgstr ""
"可以使用带有4个参数的方法 ``setHSV`` 设置LED：LED的索引，色相，饱和度和亮度值。下面展示了将LED灯条的颜色设置为红色 (色相为0) "
"的示例。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:108
msgid "Creating a Rainbow Effect"
msgstr "创建彩虹效果"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:110
msgid ""
"The below method does a couple of important things. Inside of the *for* "
"loop, it equally distributes the hue over the entire length of the strand "
"and stores the individual LED hue to a variable called ``hue``. Then the for"
" loop sets the HSV value of that specified pixel using the ``hue`` value."
msgstr ""
"下面的方法可以做到一些重要的功能。在 *for* 循环内部，它将色相均匀地分布在整个灯带的长度上，并将各个 LED 色相存储到名为的变量 ``hue``"
" 中。然后 for 循环使用该 ``hue`` 值设置该指定像素的 HSV 值。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:112
msgid ""
"Moving outside of the for loop, the ``m_rainbowFirstPixelHue`` then iterates"
" the pixel that contains the \"initial\" hue creating the rainbow effect. "
"``m_rainbowFirstPixelHue`` then checks to make sure that the hue is inside "
"the hue boundaries of 180. This is because HSV hue is a value from 0-180."
msgstr ""
"循环之外，``m_rainbowFirstPixelHue`` 迭代包含 “初始” 色调的像素，从而创建彩虹效果。然后 "
"``m_rainbowFirstPixelHue`` 检查色相是否位于0-180范围内。这是因为HSV色相的值介于0至180之间。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:114
msgid ""
"It's good robot practice to keep the ``robotPeriodic()`` method as clean as "
"possible, so we'll create a method for handling setting our LED data. We'll "
"call this method ``rainbow()`` and call it from ``robotPeriodic()``."
msgstr ""
"最好让机器人的 ``robotPeriodic()`` 方法尽可能简洁，因此，我们将创建了一种可以设定 LED 参数的方法。此方法名为 "
"``rainbow()`` ，需要从 ``robotPeriodic()``  中调用它。"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:134
msgid ""
"Now that we have our ``rainbow`` method created, we have to actually call "
"the method and set the data of the LED."
msgstr "现在我们已经创建了我们的 ``rainbow()`` 方法，我们需要真正调用此方法并为 LED 设定参数。"
