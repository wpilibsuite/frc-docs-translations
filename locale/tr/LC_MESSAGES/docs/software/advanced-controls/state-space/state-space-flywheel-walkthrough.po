# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Esra ÖZEMRE <esra.ozemre@tfo.k12.tr>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2021
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-21 16:03+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:4
msgid "State-Space Controller Walkthrough"
msgstr "State-Space Kontrolörü Çözüm Yolu"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:6
msgid ""
"Before following this tutorial, readers are recommended to have read an "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."
msgstr ""
"Bu öğreticiyi izlemeden önce, okuyucuların bir durum-uzay kontrolüne girişi "
"okumaları önerilir :ref:`docs/software/advanced-controls/state-space/state-"
"space-intro:Introduction to state-space control` "

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:8
msgid ""
"The goal of this tutorial is to provide \"end-to-end\" instructions on "
"implementing a state-space controller for a flywheel.  By following this "
"tutorial, readers will learn how to:"
msgstr ""
"Bu öğreticinin amacı, bir volan için bir durum-uzay kontrolörünün "
"uygulanmasına ilişkin \"uçtan uca\" talimatlar sağlamaktır. Bu öğreticiyi "
"takip ederek okuyucular şunları öğreneceklerdir:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:10
msgid ""
"Create an accurate state-space model of a flywheel using :term:`system "
"identification` or CAD software."
msgstr ""
":term:`system identification` kullanarak veya CAD yazılımı kullanarak bir "
"çakın doğru durum-uzay modelini oluşturun.  "

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:11
msgid ""
"Implement a Kalman Filter to filter encoder velocity measurements without "
"lag."
msgstr ""
"Enkoder hızı ölçümlerini gecikmeden filtrelemek için bir Kalman Filtresi "
"uygulayın."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:12
msgid ""
"Implement a :ref:`LQR <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` feedback controller which, when"
" combined with model-based feedforward, will generate voltage :term:`inputs "
"<input>` to drive the flywheel to a :term:`reference`."
msgstr ""
"Bir :ref:`LQR <docs/software/advanced-controls/state-space/state-space-"
"intro:The Linear-Quadratic Regulator>` geri besleme denetleyicisi uygulayın;"
" bu, model tabanlı ileri besleme ile birleştirildiğinde, çarkı a "
":term:`reference` \"referans\" a sürmek için voltaj :term:`inputs <input>`  "
"oluşturur."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:14
msgid ""
"This tutorial is intended to be approachable for teams without a great deal "
"of programming expertise.  While the WPILib library offers significant "
"flexibility in the manner in which its state-space control features are "
"implemented, closely following the implementation outlined in this tutorial "
"should provide teams with a basic structure which can be reused for a "
"variety of state-space systems."
msgstr ""
"Bu öğretici, çok fazla programlama uzmanlığı olmayan ekipler için "
"ulaşılabilir olması amaçlanmıştır. WPILib kitaplığı, durum-uzay kontrol "
"özelliklerinin uygulanma biçiminde önemli bir esneklik sunarken, bu eğitimde"
" ana hatları verilen uygulamayı yakından takip etmek, ekiplere çeşitli "
"durum-uzay sistemleri için yeniden kullanılabilecek temel bir yapı "
"sağlamalıdır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:16
msgid ""
"The full example is available in the state-space flywheel (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" and state-space flywheel system identification (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" example projects."
msgstr ""
"Tam örnek, durum uzayı volanında (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`"
" __ / `C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`"
" __) ve durum uzayı volan sistemi tanımlamasında (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`"
" __ / `C ++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`"
" __) mevcuttur."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:19
msgid "Why Use State-Space Control?"
msgstr "State-Space Control-Durum Uzayı Kontrolü Neden Kullanılır?"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:21
msgid ""
"Because state-space control focuses on creating an accurate model of our "
"system, we can accurately predict how our :term:`model` will respond to "
"control :term:`inputs <input>`. This allows us to simulate our mechanisms "
"without access to a physical robot, as well as easily choose :term:`gains "
"<gain>` that we know will work well. Having a model also allows us to create"
" lagless filters, such as Kalman Filters, to optimally filter sensor "
"readings."
msgstr ""
"State-Space Control-Durum-uzay kontrolü, sistemimizin doğru bir modelini "
"oluşturmaya odaklandığından, :term:`model` will respond to control "
":term:`inputs 1` e nasıl tepki vereceğini doğru bir şekilde tahmin "
"edebiliriz. Bu, mekanizmalarımızı fiziksel bir robota erişim olmadan simüle "
"etmemize ve aynı zamanda kolayca seçim yapmamıza olanak tanır :term:`gains "
"<gain>` iyi çalışacağını bildiğimiz kazançlardır.  Bir modele sahip olmak, "
"sensör okumalarını en iyi şekilde filtrelemek için Kalman Filtreleri gibi "
"gecikmesiz filtreler oluşturmamıza da olanak tanır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:24
msgid "Modeling Our Flywheel"
msgstr "Flywheel-Volanımızın Modellenmesi"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:26
msgid ""
":ref:`Recall <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` that continuous state-space systems "
"are modeled using the following system of equations:"
msgstr ""
":ref: `Recall <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>`  sürekli durum uzay sistemlerinin "
"aşağıdaki denklem sistemi kullanılarak modellendiğini hatırlayın:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:28
msgid ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"
"\n"
msgstr ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:36
msgid ""
"The first step of building up our state-space system is picking our system's"
" states. We can pick anything we want as a state -- we could pick completely"
" unrelated states if we wanted -- but it helps to pick states that are "
"important. We can include :term:`hidden states <hidden state>` in our state "
"(such as elevator velocity if we were only able to measure its position) and"
" let our Kalman Filter estimate their values. Remember that the states we "
"choose will be driven towards their respective :term:`references "
"<reference>` by the feedback controller (typically the :ref:`Linear-"
"Quadratic Regulator <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` since it's optimal)."
msgstr ""
"Durum uzayı sistemimizi oluşturmanın ilk adımı, sistemimizin durumlarını "
"seçmektir. Devlet olarak istediğimiz her şeyi seçebiliriz - istersek tamamen"
" ilgisiz durumları seçebiliriz - ama önemli olan durumları seçmeye yardımcı "
"olur. Bizim durumumuzdaki :term:`hidden states <hidden state>` ifadesini "
"dahil edebiliriz (sadece konumunu ölçebilseydik asansör hızı gibi) ve Kalman"
" Filtremizin değerlerini tahmin etmesine izin verebiliriz. Seçtiğimiz "
"durumların, geribildirim denetleyicisi tarafından ilgili :term:`references "
"<reference>` e doğru yönlendirileceğini unutmayın (tipik olarak : ref:` "
"Doğrusal Karesel Düzenleyici <docs/software/advanced-controls/state-"
"space/state-space-intro:The Linear-Quadratic Regulator>`, çünkü optimaldir)."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:38
msgid ""
"For our flywheel, we care only about one state: its velocity. While we could"
" chose to also model its acceleration, the inclusion of this state isn't "
"necessary for our system."
msgstr ""
"Volanımız için yalnızca tek bir durumu önemsiyoruz : hızı. İvmesini de "
"modellemeyi seçebilirken, bu durumun dahil edilmesi sistemimiz için gerekli "
"değildir."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:40
msgid ""
"Next, we identify the :term:`inputs <input>` to our system. Inputs can be "
"thought of as things we can put \"into\" our system to change its state. In "
"the case of the flywheel (and many other single-jointed mechanisms in FRC\\ "
"|reg|), we have just one input: voltage applied to the motor. By choosing "
"voltage as our input (over something like motor duty cycle), we can "
"compensate for battery voltage sag as battery load increases."
msgstr ""
"Daha sonra, : terimini tanımlıyoruz: `sistemimize <input> girişleri. "
"Girdiler, durumunu değiştirmek için sistemimize \"into-içine\" "
"koyabileceğimiz şeyler olarak düşünülebilir. Volan (ve FRC \\ |reg| 'deki "
"diğer birçok tek eklemli mekanizma) durumunda, sadece bir girişimiz var: "
"motora uygulanan voltaj. Girişimiz olarak voltajı seçerek (motor görev "
"döngüsü gibi bir şey üzerinde), akü yükü arttıkça akü voltajındaki düşüşü "
"telafi edebiliriz."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:42
msgid ""
"A continuous-time state-space system writes :term:`x-dot`, or the "
"instantaneous rate of change of the system's :term:`system`\\'s state, as "
"proportional to the current :term:`state` and :term:`inputs <input>`. "
"Because our state is angular velocity, :math:`\\mathbf{\\dot{x}}` will be "
"the flywheel's angular acceleration."
msgstr ""
"Sürekli zaman durum-uzay sistemi şunu yazar :term:`x-dot` veya sistemin "
":term:`system`\\' durumunun anlık değişim oranı, şu anki :term:`state`  ile "
"orantılı olarak ve  :term:`inputs<input>'. Durumumuz açısal hız olduğundan,"
"  :math:`\\mathbf{\\dot{x}}` volanın açısal ivmesi olacaktır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:44
msgid ""
"Next, we will model our flywheel as a continuous-time state-space system. "
"WPILib's ``LinearSystem`` will convert this to discrete-time internally. "
"Review :ref:`state-space notation <docs/software/advanced-controls/state-"
"space/state-space-intro:What is State-Space Notation?>` for more on "
"continuous-time and discrete-time systems."
msgstr ""
"Daha sonra, çarkımızı sürekli zaman durum-uzay sistemi olarak "
"modelleyeceğiz. WPILib'in ``LinearSystem``' sistemi bunu dahili olarak ayrık"
" zamana dönüştürecektir. Gözden geçirme : ref: \"durum uzayı gösterimi "
"<docs/software/advanced-controls/state-space/state-space-intro:What is "
"State-Space Notation?>``, sürekli zamanlı ve ayrık zamanlı sistemler "
"hakkında daha fazla bilgi için."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:47
msgid "Modeling with System Identification"
msgstr "Sistem Tanımlama ile Modelleme"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:49
msgid ""
"To rewrite this in state-space notation using :term:`system identification`,"
" we recall from the flywheel :ref:`state-space notation example "
"<docs/software/advanced-controls/state-space/state-space-intro:State-space "
"Notation Example: Flywheel from kV and kA>`, where we rewrote the following "
"equation in terms of :math:`\\mathbf{a}`."
msgstr ""
"Bunu durum uzayı gösteriminde :term:`system identification` kullanarak "
"yeniden yazmak için , :ref:`state-space notation example "
"<docs/software/advanced-controls/state-space/state-space-intro:State-space "
"Notation Example: Flywheel from kV and kA>` volan örneğini tekrar "
"hatırlıyoruz, burada aşağıdaki denklemi şu terimlerle yeniden yazdık "
":math:`\\mathbf{a}`"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:51
msgid ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"
"\n"
msgstr ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:55
msgid ""
"Where :math:`\\mathbf{v}` is flywheel velocity, :math:`\\mathbf{a}` and "
":math:`\\mathbf{\\dot{v}}` are flywheel acceleration, and :math:`V` is "
"voltage. Rewriting this with the standard convention of :math:`\\mathbf{x}` "
"for the state vector and :math:`\\mathbf{u}` for the input vector, we find:"
msgstr ""
"Burada:math:`\\mathbf{v}` , volan hızıdır,:math:`\\mathbf{a}` "
"ve:math:`\\mathbf{\\dot{v}}`, volan ivmesidir ve :math:`V` voltajdır.  Bunu,"
" durum vektörü için standart :math:`\\mathbf{x}` ve giriş vektörü için : "
"math:`\\ mathbf {u}` standart kuralıyla yeniden yazarak şunu buluruz:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:57
msgid ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:60
msgid ""
"The second part of state-space notation relates the system's current "
":term:`state` and :term:`inputs <input>` to the :term:`output`. In the case "
"of a flywheel, our output vector :math:`\\mathbf{y}` (or things that our "
"sensors can measure) is our flywheel's velocity, which also happens to be an"
" element of our :term:`state` vector :math:`\\mathbf{x}`. Therefore, our "
"output matrix is :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, and"
" our system feedthrough matrix is :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Writing this out in continuous-time state-space notation "
"yields the following."
msgstr ""
"Durum uzayı notasyonunun ikinci bölümü, sistemin o anki :term:``state`` ve "
":term:`girdileri <input>` ile :term:`output` ile ilişkilidir. Bir volan "
"durumunda, çıktı vektörümüz :math:`\\mathbf{y}` (veya sensörlerimizin "
"ölçebildiği şeyler) volanımızın hızıdır ve bu da bizim :term:`state` "
":math:`\\mathbf{x}` vektörümüzün bir unsuru olur . Bu nedenle, çıktı "
"matrisimiz :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}` ve sistem "
"besleme matrisimiz  :math:`\\mathbf{D} = \\begin{bmatrix}0 \\end{bmatrix}` "
"olur. Bunu sürekli zaman durum uzayı gösteriminde yazmak aşağıdakileri "
"verir."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:62
msgid ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:66
msgid ""
"The ``LinearSystem`` class contains methods for easily creating state-space "
"systems identified using :term:`system identification`. This example shows a"
" flywheel model with a kV of 0.023 and a kA of 0.001:"
msgstr ""
"``LinearSystem`` sınıfı, şu şekilde tanımlanmış durum uzayı sistemlerini "
"kolayca oluşturmak için yöntemler içerir :term:`system identification`. Bu "
"örnek, kV değeri 0,023 ve kA değeri 0,001 olan bir volan modelini "
"göstermektedir:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:93
msgid "Modeling Using Flywheel Moment of Inertia and Gearing"
msgstr "Volan Atalet Momenti ve Dişli Kullanarak Modelleme"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:95
msgid ""
"A flywheel can also be modeled without access to a physical robot, using "
"information about the motors, gearing and flywheel's :term:`moment of "
"inertia`. A full derivation of this model is presented in Section 8.2.1 of  "
"`Controls Engineering in FRC <https://file.tavsys.net/control/controls-"
"engineering-in-frc.pdf>`__."
msgstr ""
"Bir volan ayrıca, motorlar, dişliler ve volan hakkındaki bilgiler "
"kullanılarak fiziksel bir robota erişim olmaksızın modellenebilir "
":term:`moment of inertia`. Bu modelin tam bir türevi, `Controls Engineering "
"in FRC <https://file.tavsys.net/control/controls-engineering-in-frc.pdf>`__."
" 'de Kontrol Mühendisliği Bölüm 8.2.1'de sunulmuştur."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:97
msgid ""
"The ``LinearSystem`` class contains methods to easily create a model of a "
"flywheel from the flywheel's motors, gearing and :term:`moment of inertia`. "
"The moment of inertia can be calculated using CAD software or using physics."
" The examples used here are detailed in the flywheel example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."
msgstr ""
"``LinearSystem`` sınıfı, volanın motorlarından, dişlilerinden ve "
":term:``atalet momenti-moment of inertia`` nden kolayca bir volan modeli "
"oluşturmak için yöntemler içerir. Eylemsizlik momenti, CAD yazılımı veya "
"fizik kullanılarak hesaplanabilir. Burada kullanılan örnekler, volan örnek "
"projesinde (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" detaylandırılmıştır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:99
msgid ""
"For WPILib's state-space classes, gearing is written as output over input --"
" that is, if the flywheel spins slower than the motors, this number should "
"be greater than one."
msgstr ""
"WPILib'in durum uzayı sınıfları için dişli, giriş üzerinden çıkış olarak "
"yazılır - yani, volan motorlardan daha yavaş dönüyorsa, bu sayı birden büyük"
" olmalıdır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:101
msgid ""
"The C++ LinearSystem class uses :ref:`the C++ Units Library "
"<docs/software/basic-programming/cpp-units:The C++ Units Library>` to "
"prevent unit mixups and assert dimensionality."
msgstr ""
"C ++ LinearSystem sınıfı, birim karışıklıklarını önlemek ve boyutluluğu "
"ileri sürmek için :ref:`the C++ Units Library <docs/software/basic-"
"programming/cpp-units:The C++ Units Library>`  kullanır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:128
msgid "Kalman Filters: Observing Flywheel State"
msgstr "Kalman Filtreleri: Volan Durumunu Gözlemleme"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:130
msgid ""
"Kalman filters are used to filter our velocity measurements using our state-"
"space model to generate a state estimate :math:`\\mathbf{\\hat{x}}`. As our "
"flywheel model is linear, we can use a Kalman filter to estimate the "
"flywheel's velocity. WPILib's Kalman filter takes a ``LinearSystem`` (which "
"we found above), along with standard deviations of model and sensor "
"measurements. We can adjust how \"smooth\" our state estimate is by "
"adjusting these weights. Larger state standard deviations will cause the "
"filter to \"distrust\" our state estimate and favor new measurements more "
"highly, while larger measurement standard deviations will do the opposite."
msgstr ""
"Kalman filtreleri, bir durum tahmini oluşturmak için durum uzayı modelimizi "
"kullanarak hız ölçümlerimizi filtrelemek için kullanılır : math:`\\ mathbf "
"{\\ hat {x}}`. Volan modelimiz doğrusal olduğundan, volanın hızını tahmin "
"etmek için bir Kalman filtresi kullanabiliriz. WPILib'in Kalman filtresi, "
"model ve sensör ölçümlerinin standart sapmalarıyla birlikte bir "
"``LinearSystem`` (yukarıda bulduğumuz) alır. Bu ağırlıkları ayarlayarak "
"durum tahminimizin ne kadar \"smooth-düzgün\" olduğunu ayarlayabiliriz. Daha"
" büyük durum standart sapmaları, filtrenin durumumuza \"distrust-"
"güvenmemesine\" ve yeni ölçümleri daha fazla tercih etmesine neden olurken, "
"daha büyük ölçüm standart sapmaları bunun tersini yapacaktır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:132
msgid ""
"In the case of a flywheel we start with a state standard deviation of 3 "
"rad/s and a measurement standard deviation of 0.01 rad/s. These values are "
"up to the user to choose -- these weights produced a filter that was "
"tolerant to some noise but whose state estimate quickly reacted to external "
"disturbances for *a* flywheel -- and should be tuned to create a filter that"
" behaves well for your specific flywheel. Graphing states, measurements, "
"inputs, references, and outputs over time is a great visual way to tune "
"Kalman filters."
msgstr ""
"Bir volan durumunda, 3 rad / s'lik bir durum standart sapması ve 0.01 rad / "
"s'lik bir ölçüm standardı sapması ile başlarız. Bu değerler kullanıcının "
"seçmesine bağlıdır - bu ağırlıklar bir miktar gürültüye toleranslı olan "
"ancak durum tahmini *a* volan için dış parazitlere hızlı bir şekilde tepki "
"veren bir filtre üretti ve aşağıdakiler için iyi davranan bir filtre "
"oluşturmak için ayarlanmalıdır. özel volanınız. Zaman içindeki durumları, "
"ölçümleri, girdileri, referansları ve çıktıları grafiklemek, Kalman "
"filtrelerini ayarlamak için harika bir görsel yoldur."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:137
msgid ""
"The above graph shows two differently tuned Kalman filters, as well as a "
":ref:`single-pole IIR filter <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` and a "
":ref:`docs/software/advanced-controls/filters/median-filter:Median Filter`. "
"This data was collected with a shooter over ~5 seconds, and four balls were "
"run through the shooter (as seen in the four dips in velocity). While there "
"are no hard rules on choosing good state and measurement standard "
"deviations, they should in general be tuned to trust the model enough to "
"reject noise while reacting quickly to external disturbances."
msgstr ""
"Yukarıdaki grafik, iki farklı şekilde ayarlanmış Kalman filtresinin yanı "
"sıra bir::ref:`single-pole IIR filter <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>`  ve "
":ref:`docs/software/advanced-controls/filters/median-filter:Median Filter` "
"gösterir. Bu veriler, bir atıcı ile ~ 5 saniyede toplandı ve dört top, "
"atıcıdan geçirildi (hızdaki dört düşüşte görüldüğü gibi). İyi durum ve ölçüm"
" standardı sapmalarını seçme konusunda katı kurallar olmamakla birlikte, "
"bunlar genel olarak, harici rahatsızlıklara hızlı tepki verirken gürültüyü "
"reddedecek kadar modele güvenecek şekilde ayarlanmalıdır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:165
msgid ""
"Because Kalman filters use our state-space model in the "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict step`, it is important that our model is as accurate as "
"possible. One way to verify this is to record a flywheel's input voltage and"
" velocity over time, and replay this data by calling only ``predict`` on the"
" Kalman filter. Then, the kV and kA gains (or moment of inertia and other "
"constants) can be adjusted until the model closely matches the recorded "
"data."
msgstr ""
"Kalman filtreleri : ref: `docs / software / advanced-controls / state-space "
"/ state-space-observers: Predict step`'de durum uzayı modelimizi "
"kullandığından, modelimizin mümkün olduğu kadar doğru olması önemlidir. Bunu"
" doğrulamanın bir yolu, bir volanın giriş voltajını ve zaman içindeki hızını"
" kaydetmek ve bu verileri Kalman filtresinde yalnızca ``predict-tahmin`` "
"olarak adlandırarak yeniden yürütmektir. Daha sonra, kV ve kA kazançları "
"(veya eylemsizlik momenti ve diğer sabitler), model kaydedilen verilerle "
"yakından eşleşene kadar ayarlanabilir."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "Todo"
msgstr "Yapmak"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "do we need to elaborate on this^ more?"
msgstr "Bu ^ daha fazla ayrıntıya ihtiyacımız var mı?"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:170
msgid "Linear-Quadratic Regulators and Plant Inversion Feedforward"
msgstr ""
"Doğrusal-Kuadratik Düzenleyiciler ve Plant Inversion Feedforward-İleri "
"Besleme"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:172
msgid ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` finds a feedback controller to drive our "
"flywheel :term:`system` to its :term:`reference`. Because our flywheel has "
"just one state, the control law picked by our LQR will be in the form "
":math:`\\mathbf{u = K (r - x)}` where :math:`\\mathbf{K}` is a 1x1 matrix; "
"in other words, the control law picked by LQR is simply a proportional "
"controller, or a PID controller with only a P gain. This gain is chosen by "
"our LQR based on the state excursion and control efforts we pass it. More on"
" tuning LQR controllers can be found in the :ref:`LQR application example "
"<docs/software/advanced-controls/state-space/state-space-intro:LQR: example "
"application>`."
msgstr ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator`, volanımızı :term:`system` i :term:`reference` a"
" sürmek için bir geri bildirim denetleyicisi bulur . Volanımızın sadece bir "
"durumu olduğu için, LQR'miz tarafından seçilen kontrol yasası şu biçimde "
"olacaktır :math:`\\mathbf{u = K (r - x)}` burada :math:`\\mathbf{K}`, bir "
"1x1 matrisdir; başka bir deyişle, LQR tarafından seçilen kontrol kuralı "
"basitçe orantılı bir kontrolör veya sadece bir P kazancı olan bir PID "
"kontrolörüdür. Bu kazanç, LQR'miz tarafından, geçtiğimiz durum gezi ve "
"kontrol çabalarına göre seçilir. LQR denetleyicilerinin ayarlanması hakkında"
" daha fazla bilgi şu adreste bulunabilir :ref:`LQR uygulama örneği "
"<docs/software/advanced-controls/state-space/state-space-intro:LQR: example "
"application>`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:174
msgid ""
"Much like ``SimpleMotorFeedforward`` can be used to generate feedforward "
"voltage inputs given kS, kV, and kA constants, the Plant Inversion "
"Feedforward class generate :ref:`feedforward <docs/software/advanced-"
"controls/state-space/state-space-intro:Visualizing Feedforward>` voltage "
"inputs given a state-space system. The voltage commands generated by the "
"``LinearSystemLoop`` class are the sum of the feedforward and feedback "
"inputs."
msgstr ""
"``SimpleMotorFeedforward`` gibi, kS, kV ve kA sabitleri verilen ileri "
"besleme voltaj girişleri oluşturmak için kullanılabilir, Plant Inversion "
"Feedforward sınıfı, bir durum uzay sistemi verilen :ref:`feedforward "
"<docs/software/advanced-controls/state-space/state-space-intro:Visualizing "
"Feedforward>` voltaj girişlerini üretir. `` LinearSystemLoop`` sınıfı "
"tarafından üretilen gerilim komutları ileri besleme ve geri besleme "
"girişlerinin toplamıdır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:201
msgid "Bringing it All Together: LinearSystemLoop"
msgstr "Hepsini Bir Araya Getirin : LinearSystemLoop"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:203
msgid ""
"LinearSystemLoop combines our system, controller, and observer that we "
"created earlier. The constructor shown will also instantiate a "
"``PlantInversionFeedforward``."
msgstr ""
"LinearSystemLoop, daha önce oluşturduğumuz sistemimizi, denetleyicimizi ve "
"gözlemcimizi birleştirir. Gösterilen kurucu ayrıca bir "
"``PlantInversionFeedforward`` başlatacaktır."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:229
msgid ""
"Once we have our ``LinearSystemLoop``, the only thing left to do is actually"
" run it. To do that, we'll periodically update our Kalman filter with our "
"new encoder velocity measurements and apply new voltage commands to it. To "
"do that, we first set the :term:`reference`, then ``correct`` with the "
"current flywheel speed, ``predict`` the Kalman filter into the next "
"timestep, and apply the inputs generated using ``getU``."
msgstr ""
"``LinearSystemLoop`` umuza sahip olduğumuzda, geriye kalan tek şey onu "
"çalıştırmaktır. Bunu yapmak için, Kalman filtremizi yeni enkoder hız "
"ölçümlerimizle periyodik olarak güncelleyeceğiz ve ona yeni voltaj komutları"
" uygulayacağız. Bunu yapmak için, önce :term:`reference` yi, ardından mevcut"
" volan hızıyla `correct``, bir sonraki zaman adımına Kalman filtresini "
"``predict`` ve ``getU`` kullanılarak oluşturulan girdileri uyguluyoruz. ."
