# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Andy Chang, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-05 16:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:05+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:4
msgid "Using Generated Code in a Robot Program"
msgstr "Utilisation du code généré dans un programme de robot"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:6
msgid ""
"GRIP generates a class that can be added to an FRC\\ |reg| program that runs"
" on a roboRIO and without a lot of additional code, drive the robot based on"
" the output."
msgstr ""
"GRIP génère une classe qui peut être ajoutée à un programme FRC\\ |reg| qui "
"fonctionne sur un roboRIO et sans beaucoup de code supplémentaire, permet de"
" conduire le robot en fonction de la sortie."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:9
msgid ""
"Included here is a complete sample program that uses a GRIP pipeline that "
"drives a robot towards a piece of retroreflective material."
msgstr ""
"Voici un exemple de programme complet qui utilise un pipeline GRIP qui "
"dirige un robot vers un morceau de matériau rétroréfléchissant."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:12
msgid ""
"This program is designed to illustrate how the vision code works and does "
"not necessarily represent the best technique for writing your robot program."
" When writing your own program be aware of the following considerations:"
msgstr ""
"Ce programme est conçu pour illustrer le fonctionnement du code de vision et"
" ne représente pas nécessairement la meilleure technique pour écrire votre "
"programme de robot. Lorsque vous écrivez votre propre programme, tenez "
"compte des considérations suivantes:"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:15
msgid ""
"**Using the camera output for steering the robot could be problematic**. The"
" camera code in this example that captures and processes images runs at a "
"much slower rate that is desirable for a control loop for steering the "
"robot. A better, and only slightly more complex solution, is to get headings"
" from the camera and it's processing rate, then have a much faster control "
"loop steering to those headings using a gyro sensor."
msgstr ""
"**L'utilisation de la sortie de la caméra pour diriger le robot peut être "
"problématique**. Dans cet exemple, le code de la caméra qui capture et "
"traite les images s'exécute à un rythme beaucoup trop lent de ce qui est "
"souhaitable pour diriger le robot à l'aide d'une boucle d'asservissement. "
"Une meilleure solution, légèrement plus complexe, consiste à obtenir la "
"direction (Headings) relatif au robot à partir de la position de la caméra "
"sur le robot. Ensuite, rafraîchir cette direction à la fréquence de "
"traitement d'image. Finalement, utiliser un gyroscope comme senseur pour "
"compléter la boucle de contrôle."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:19
msgid ""
"**Keep the vision code in the class that wraps the pipeline**. A better way "
"of writing object oriented code is to subclass or instantiate the generated "
"pipeline class and process the OpenCV results there rather than in the robot"
" program. In this example, the robot code extracts the direction to drive by"
" manipulating the resultant OpenCV contours. By having the OpenCV code "
"exposed throughout the robot program it makes it difficult to change the "
"vision algorithm should you have a better one."
msgstr ""
"**Gardez le code de vision dans la classe qui enveloppe le pipeline**. Une "
"meilleure façon d'écrire du code orienté objet est de sous-classer ou "
"d'instancier la classe de pipeline générée et d'y traiter les résultats "
"OpenCV plutôt que dans le programme du robot. Dans cet exemple, le code du "
"robot détermine la direction ou cap du robot en manipulant les contours "
"OpenCV résultants. En ayant le code OpenCV éparpillé tout au long du "
"programme de robot, il est difficile de changer l'algorithme de vision si "
"vous en avez un meilleur."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:25
msgid "Iterative program definitions"
msgstr "Définitions de programme itératives"

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:58
msgid ""
"In this first part of the program you can see all the import statements for "
"the WPILib classes used for this program."
msgstr ""
"Dans cette première partie du programme, vous pouvez voir toutes les "
"instructions d'importation pour les classes WPILib utilisées pour ce "
"programme."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:60
msgid "The **image width and height** are defined as 320x240 pixels."
msgstr ""
"**La largeur et la hauteur de l'image** sont définies comme 320x240 pixels."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:61
msgid ""
"The **VisionThread** is a WPILib class makes it easy to do your camera "
"processing in a separate thread from the rest of the robot program."
msgstr ""
"Le **VisionThread** est une classe WPILib qui facilite le traitement de "
"votre caméra dans un thread séparé du reste du programme du robot."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:63
msgid ""
"**centerX** value will be the computed center X value of the detected "
"target."
msgstr ""
"**centerX** value sera la valeur X centrale calculée de la cible détectée."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:64
msgid ""
"**DifferentialDrive** encapsulates the drive motors on this robot and allows"
" simplified driving."
msgstr ""
"**DifferentialDrive** encapsule les moteurs d'entraînement de ce robot et "
"permet une conduite simplifiée."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:65
msgid ""
"**imgLock** is a variable to synchronize access to the data being "
"simultaneously updated with each image acquisition pass and the code that's "
"processing the coordinates and steering the robot."
msgstr ""
"**imgLock** est une variable pour synchroniser l'accès aux données mises à "
"jour simultanément avec chaque passe d'acquisition d'image et le code qui "
"traite les coordonnées et dirige le robot."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:92
msgid ""
"The **robotInit()** method is called once when the program starts up. It "
"creates a **CameraServer** instance that begins capturing images at the "
"requested resolution (IMG_WIDTH by IMG_HEIGHT)."
msgstr ""
"La méthode **robotInit()** est appelée une fois au démarrage du programme. "
"Il crée une instance de **CameraServer** qui commence à capturer des images "
"à la résolution demandée (IMG_WIDTH par IMG_HEIGHT)."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:95
msgid ""
"Next an instance of the class **VisionThread** is created. VisionThread "
"begins capturing images from the camera asynchronously in a separate thread."
" After processing each image, the pipeline computed **bounding box** around "
"the target is retrieved and it's **center X** value is computed. This "
"centerX value will be the x pixel value of the center of the rectangle in "
"the image."
msgstr ""
"Ensuite, une instance de la classe **VisionThread** est créée. VisionThread "
"commence à capturer des images de la caméra de manière asynchrone dans un "
"thread séparé. Après le traitement de chaque image, le pipeline calculé "
"**boîte englobante** autour de la cible est récupéré et sa valeur **centre "
"X** est calculée. Cette valeur centerX sera la valeur x pixels du centre du "
"rectangle dans l'image."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:99
msgid ""
"The VisionThread also takes a **VisionPipeline** instance (here, we have a "
"subclass **MyVisionPipeline** generated by GRIP) as well as a callback that "
"we use to handle the output of the pipeline. In this example, the pipeline "
"outputs a list of contours (outlines of areas in an image) that mark goals "
"or targets of some kind. The callback finds the bounding box of the first "
"contour in order to find its center, then saves that value in the variable "
"centerX. Note the synchronized block around the assignment: this makes sure "
"the main robot thread will always have the most up-to-date value of the "
"variable, as long as it also uses **synchronized** blocks to read the "
"variable."
msgstr ""
"Le VisionThread prend également une instance **VisionPipeline** (ici, nous "
"avons une sous-classe **MyVisionPipeline** générée par GRIP) ainsi qu'un "
"rappel que nous utilisons pour gérer la sortie du pipeline. Dans cet "
"exemple, le pipeline génère une liste de contours (contours de zones dans "
"une image) qui marquent des objectifs ou des cibles d'une certaine sorte. Le"
" rappel trouve la boîte englobante du premier contour afin de trouver son "
"centre, puis enregistre cette valeur dans la variable \"centerX\". Notez le "
"bloc synchronisé autour de l'affectation: cela garantit que le thread du "
"robot principal aura toujours la valeur à jour de la variable, tant qu'il "
"utilise également des blocs **synchronisés** pour lire la variable."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:120
msgid ""
"This, the final part of the program, is called repeatedly during the "
"**autonomous period** of the match. It gets the **centerX** pixel value of "
"the target and **subtracts half the image width** to change it to a value "
"that is **zero when the rectangle is centered** in the image and **positive "
"or negative when the target center is on the left or right side of the "
"frame.** That value is used to steer the robot towards the target."
msgstr ""
"Ceci, la dernière partie du programme, est appelé à plusieurs reprises "
"pendant la **période autonome** du match. Il obtient la valeur **centerX** "
"pixel de la cible et **soustrait la moitié de la largeur de l'image** pour "
"la changer en une valeur qui est **zéro lorsque le rectangle est centré** "
"dans l'image et **positif ou négatif lorsque le centre de la cible est sur "
"le côté gauche ou droit du cadre.** Cette valeur est utilisée pour diriger "
"le robot vers la cible."

#: ../../frc-docs/source/docs/software/vision-processing/grip/using-generated-code-in-a-robot-program.rst:125
msgid ""
"Note the **synchronized** block at the beginning. This takes a snapshot of "
"the most recent centerX value found by the VisionThread."
msgstr ""
"Notez le bloc **synchronisé** au début. Ce dernier conserve la valeur la "
"plus récente de centerX trouvée par VisionThread."
