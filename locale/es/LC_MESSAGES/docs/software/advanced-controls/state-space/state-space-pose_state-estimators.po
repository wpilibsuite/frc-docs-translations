# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Rodrigo Acosta <raar7366@gmail.com>, 2020
# Diana Ramos <dianaracasas@gmail.com>, 2020
# Heber Sepúlveda <heber.sepulveda.m@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-01-29 04:20+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Heber Sepúlveda <heber.sepulveda.m@gmail.com>, 2021\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:2
msgid "WPILib Pose Estimators"
msgstr "Estimadores de posición WPILib"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:4
msgid ""
"WPILib includes pose estimators for differential, swerve and mecanum "
"drivetrains. These estimators are designed to be drop-in replacements for "
"the existing :ref:`odometry <docs/software/kinematics-and-"
"odometry/index:Kinematics and Odometry>` classes, with added features that "
"utilize an Unscented :ref:`Kalman Filter <docs/software/advanced-controls"
"/state-space/state-space-observers:Kalman Filters>` to fuse latency-"
"compensated robot pose estimates with encoder and gyro measurements. These "
"estimators can account for encoder drift and noisy vision data. These "
"estimators can behave identically to their corresponding odometry classes if"
" only ``update`` is called on these estimators."
msgstr ""
"WPILib incluye estimadores de posición para transmisiones diferenciales, "
"swerve y mecanum. Estos estimadores han sido diseñados para sustituir a las "
"clases existentes de :ref:`odometría <docs/software/kinematics-and-"
"odometry/index:Kinematics and Odometry>`, con características añadidas que "
"utilizan un :ref:`Filtro Kalman <docs/software/advanced-controls/state-space"
"/state-space-observers:Kalman Filters>` para fusionar las estimaciones de "
"pose del robot compensadas por la latencia con las mediciones del "
"codificador y el giroscopio. Estos estimadores pueden tener en cuenta la "
"deriva del codificador y los datos de visión inexactos. Estos estimadores "
"pueden comportarse de forma idéntica a sus correspondientes clases de "
"odometría si sólo se llama a ``actualización`` de estos estimadores."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:6
msgid ""
"Pose estimators estimate robot position using a state-space system with the "
"states :math:`\\begin{bmatrix}x & y & \\theta \\end{bmatrix}^T`, which can "
"represent robot position as a ``Pose2d``. WPILib includes "
"``DifferentialDrivePoseEstimator``, ``SwerveDrivePoseEstimator`` and "
"``MecanumDrivePoseEstimator`` to estimate robot position. In these, users "
"call ``update`` periodically with encoder and gyro measurements (same as the"
" odometry classes) to update the robot's estimated position. When the robot "
"receives measurements of its field-relative position (encoded as a "
"``Pose2d``) from sensors such as computer vision or V-SLAM, the pose "
"estimator latency-compensates the measurement to accurately estimate robot "
"position."
msgstr ""
"Los estimadores de pose estiman la posición del robot usando un sistema de "
"espacio de estados con los estados :math:`\\begin{bmatrix}x & y & \\theta "
"\\end{bmatrix}^T`, que puede representar la posición del robot como una "
"``Pose2d`` . WPILib incluye ``DifferentialDrivePoseEstimator``, "
"``SwerveDrivePoseEstimator`` y ``MecanumDrivePoseEstimator`` para estimar la"
" posición del robot. En estos, los usuarios llaman \"actualizar\" "
"periódicamente con las mediciones del codificador y del giroscopio (igual "
"que las clases de odometría) para actualizar la posición estimada del robot."
" Cuando el robot recibe mediciones de su posición relativa al campo "
"(codificada como ``Pose2d``) de sensores como la visión por computadora o "
"V-SLAM, el estimador de pose compensa la latencia de la medición para "
"estimar con precisión la posición del robot."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:8
msgid ""
"The pose estimators perform latency compensation by storing a list of past "
"observer states, including estimated state :math:`\\mathbf{\\hat{x}}`, error"
" covariance :math:`\\mathbf{P}`, inputs and local measurements. When new "
"measurements are applied, the state of the estimator is first rolled back to"
" the measurement's timestamp. Then, the filter corrects its state estimate "
"with the new measurement and applies the inputs between the measurement "
"timestamp and the present time to incorporate the new measurement. This "
"allows for vision solutions with framerates which might otherwise make them "
"unusable be a viable solution for robot localization."
msgstr ""
"Los estimadores de pose realizan una compensación de latencia almacenando "
"una lista de estados de observadores pasados, incluido el estado estimado "
":math:`\\mathbf{\\hat{x}}`, covarianza de error :math:`\\mathbf{P}`, "
"entradas y medidas locales . Cuando se aplican nuevas mediciones, el estado "
"del estimador primero se retrae a la marca de tiempo de la medición. Luego, "
"el filtro corrige su estimación de estado con la nueva medición y aplica las"
" entradas entre la marca de tiempo de la medición y el tiempo actual para "
"incorporar la nueva medición. Esto permite que las soluciones de visión con "
"velocidades de fotogramas que de otro modo las inutilicen sean una solución "
"viable para la localización de robots."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:10
msgid ""
"The following example shows the use of the "
"``DifferentialDrivePoseEstimator``:"
msgstr ""
"El siguiente ejemplo muestra el uso del ``DifferentialDrivePoseEstimator``:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:32
msgid "Tuning Pose Estimators"
msgstr "Estimadores de pose de afinación"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-pose_state-estimators.rst:34
msgid ""
"All pose estimators offer user-customizable standard deviations for model "
"and measurements. These standard deviations determine how much the filter "
"\"trusts\" each of these states. For example, increasing the standard "
"deviation for measurements (as one might do for a noisy signal) would lead "
"to the estimator trusting its state estimate more than the incoming "
"measurements. On the field, this might mean that the filter can reject noisy"
" vision data well, at the cost of being slow to correct for model "
"deviations. While these values can be estimated beforehand, they very much "
"depend on the unique setup of each robot and global measurement method."
msgstr ""
"Todos los estimadores de pose ofrecen desviaciones estándar personalizables "
"por el usuario para el modelo y las medidas. Estas desviaciones estándar "
"determinan cuánto \"confía\" el filtro en cada uno de estos estados. Por "
"ejemplo, aumentar la desviación estándar para las mediciones (como se podría"
" hacer para una señal ruidosa) haría que el estimador confiara en su "
"estimación de estado más que en las mediciones entrantes. En el campo, esto "
"podría significar que el filtro puede rechazar bien los datos de visión "
"ruidosos, a costa de ser lento para corregir las desviaciones del modelo. Si"
" bien estos valores se pueden estimar de antemano, dependen en gran medida "
"de la configuración única de cada robot y del método de medición global."
