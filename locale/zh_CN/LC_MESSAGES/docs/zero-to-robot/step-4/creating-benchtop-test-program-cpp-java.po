# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 怡静 陆 <2238710874@qq.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# KeseterG <zhiwan13579@126.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-12 04:05+0000\n"
"PO-Revision-Date: 2020-11-20 04:22+0000\n"
"Last-Translator: KeseterG <zhiwan13579@126.com>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:2
msgid "Creating your Benchtop Test Program (C++/Java)"
msgstr "创建您的台式测试程序（C ++ / Java）"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:4
msgid ""
"Once everything is installed, we're ready to create a robot program.  WPILib"
" comes with several templates for robot programs.  Use of these templates is"
" highly recommended for new users; however, advanced users are free to write"
" their own robot code from scratch. This article walks through creating a "
"project from one of the provided examples which has some code already "
"written to drive a basic robot."
msgstr ""
"一旦所有内容安装完毕，我们就可以创建机器人程序了。WPILib "
"附带了几个机器人程序的模板。强烈建议新用户使用这些模板;但是，高级用户可以从头开始自由编写自己的机器人代码。本文介绍从提供的示例之一创建项目，该示例包含一些代码，用于驱动基础机器人。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:7
msgid "Creating a New WPILib Project"
msgstr "创建新的 WPILib 项目"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rstNone
msgid "Choose \"WPILib: Create a new project\"."
msgstr "选择“WPILib：创建新项目”。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:14
msgid "This will bring up the \"New Project Creator Window:\""
msgstr "这将打开“创建新项目窗口”："

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rstNone
msgid "The different parts of the new project creation window."
msgstr "新项目创建窗口的不同部分。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:19
msgid "The elements of the New Project Creator Window are explained below:"
msgstr "创建新建项目窗口的元素说明如下："

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:21
msgid ""
"**Project Type**: The kind of project we wish to create.  For this example, "
"select **Example**"
msgstr "**项目类型**：我们希望创建的项目类型。对于此示例，请选择**示例**"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:22
msgid ""
"**Language**: This is the language (C++ or Java) that will be used for this "
"project."
msgstr "**语言**：这是将用于该项目的语言（C ++或Java）。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:23
msgid ""
"**Project Base**: This box is used to select the base class or example to "
"generate the project from. For this example, select **Getting Started**"
msgstr "** Project Base **：此框用于选择要从中生成项目的基类或示例。在此示例中，选择“入门” **"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:24
msgid ""
"**Base Folder**: This determines the folder in which the robot project will "
"be located."
msgstr "**基础文件夹**：确定机器人项目所在的文件夹。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:26
msgid ""
"**Create a New Folder**: If this is checked, a new folder will be created to"
" hold the project within the previously-specified folder.  If it is *not* "
"checked, the project will be located directly in the previously-specified "
"folder.  An error will be thrown if the folder is not empty and this is not "
"checked. project folder will be given if the Create New Folder box is "
"checked."
msgstr ""
"**创建新文件夹**：如果选中，将创建一个新文件夹以将项目保存在先前指定的文件夹中。如果未选中，则项目将直接位于先前指定的文件夹中。如果文件夹不为空且未选中，将引发错误。如果选中“创建新文件夹”框，则将提供项目文件夹。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:27
msgid ""
"**Team Number**: The team number for the project, which will be used for "
"package names within the project and to locate the robot when deploying "
"code."
msgstr "**团队编号**：项目的团队编号，将用于项目中的程序包名称并在部署代码时定位机器人。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:28
msgid ""
"**Enable Desktop Support**: Enables unit test and simulation. While WPILib "
"supports this, third party software libraries may not. If libraries do not "
"support desktop, then your code may not compile or may crash. It should be "
"left unchecked unless unit testing or simulation is needed and all libraries"
" support it. For this example, do not check this box."
msgstr ""
"**启用桌面支持**：启用单元测试和模拟。尽管WPILib支持此功能，但第三方软件库可能不支持。如果库不支持桌面，则您的代码可能无法编译或崩溃。除非需要进行单元测试或仿真并且所有库都支持它，否则应将其保留为未选中状态。对于此示例，请勿选中此框。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:30
msgid ""
"Once all the above have been configured, click \"Generate Project\" and the "
"robot project will be created."
msgstr "完成以上所有配置后，单击“生成项目”，将创建机器人项目。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:32
msgid ""
"Any errors in project generation will appear in the bottom right-hand corner"
" of the screen."
msgstr "项目生成中的任何错误将显示在屏幕的右下角。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:35
msgid "Opening The New Project"
msgstr "打开新项目"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:47
msgid ""
"Once opened we will see the project hierarchy on the left. Double clicking "
"on the file will open that file in the editor."
msgstr "打开后，我们将在左侧看到项目层次结构。双击文件将在编辑器中打开该文件。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:53
msgid "C++ Configurations (C++ Only)"
msgstr "C ++配置（仅C ++）"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:55
msgid ""
"For C++ projects, there is one more step to set up IntelliSense.  Whenever "
"we open a project, we should get a pop-up in the bottom right corner asking "
"to refresh C++ configurations.  Click \"Yes\" to set up IntelliSense."
msgstr ""
"对于C ++项目，还有另外一步来设置IntelliSense。每当我们打开一个项目时，我们都应该在右下角出现一个弹出窗口，要求刷新C "
"++配置。单击“是”以设置IntelliSense。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:61
msgid "Imports/Includes"
msgstr "启用"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:64
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:87
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:138
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:163
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:186
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:72
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:95
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:146
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:171
#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:194
msgid "C++"
msgstr "C++"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:80
msgid ""
"Our code needs to reference the components of WPILib that are used. In C++ "
"this is accomplished using ``#include`` statements; in Java it is done with "
"``import`` statements. The program references classes for ``Joystick`` (for "
"driving), ``PWMSparkMax`` (for controlling motors), ``TimedRobot`` (the base"
" class used for the example), ``Timer`` (used for autonomous), "
"``DifferentialDrive`` (for connecting the joystick control to the motors), "
"and ``LiveWindow`` (C++ only)."
msgstr ""
"我们的代码需要引用所使用的 WPILib 组件。在 C++ 中，这是使用“#include”语句完成的；在 Java "
"中，它是通过“import”语句完成的。该程序引用了“操纵杆”（用于驾驶）、“PWMSparkMax”（用于控制电机）、“TimedRobot”（用于示例的基类）、“Timer”（用于自动驾驶的类)、“DifferentialDrive”（用于将操纵杆控制连接到电机）和“LiveWindow”（仅限"
" C++）。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:83
msgid "Defining the variables for our sample robot"
msgstr "定义示例机器人的变量"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:111
msgid "Defines the variables as members of our Robot class."
msgstr "将变量定义为我们的Robot类的成员。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:112
msgid "Initializes the variables."
msgstr "初始化变量。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:114
msgid ""
"The variable initializations for C++ are in the ``private`` section at the "
"bottom of the program. This means they are private to the class (``Robot``)."
" The C++ code also sets the Motor Safety expiration to 0.1 seconds (the "
"drive will shut off if we don't give it a command every .1 seconds) and "
"starts the ``Timer`` used for autonomous."
msgstr ""
"C ++的变量初始化位于程序底部的“private”部分。这意味着它们是该类（``Robot''）的私有对象。 C "
"++代码还将电机安全到期时间设置为0.1秒（如果我们每隔0.1秒不给驱动器发出命令，驱动器将关闭），并启动用于自动阶段的“Timer”。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:117
msgid "Robot Initialization"
msgstr "机器人初始化"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:131
msgid ""
"The ``RobotInit`` method is run when the robot program is starting up, but "
"after the constructor. The ``RobotInit`` for our sample program doesn't do "
"anything. If we wanted to run something here we could provide the code above"
" to override the default)."
msgstr ""
"机器人程序启动时但在构造函数之后运行``RobotInit``方法。示例程序的``RobotInit``没有任何作用。如果我们想在此处运行某些内容，我们可以提供上面的代码以覆盖默认代码）。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:134
msgid "Simple Autonomous Example"
msgstr "简单的自动阶段示例"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:154
msgid ""
"The ``AutonomousInit`` method is run once each time the robot transitions to"
" autonomous from another mode. In this program, we reset the ``Timer`` and "
"then start it in this method."
msgstr ""
"每次机器人从另一种模式转换为自主模式时，都会运行一次“ AutonomousInit”方法。在此程序中，我们重置“ Timer”，然后以这种方法启动它。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:156
msgid ""
"``AutonomousPeriodic`` is run once every period while the robot is in "
"autonomous mode. In the ``TimedRobot`` class the period is a fixed time, "
"which defaults to 20ms. In this example, the periodic code checks if the "
"timer is less than 2 seconds and if so, drives forward at half speed using "
"the ``ArcadeDrive`` method of the ``DifferentialDrive`` class. If more than "
"2 seconds has elapsed, the code stops the robot drive."
msgstr ""
"机器人处于自主模式时，每个周期运行一次``AutonomousPeriodic''。在“ "
"TimedRobot”类中，周期为固定时间，默认为20ms。在此示例中，定期代码检查计时器是否少于2秒，如果是，则使用DifferentialDrive类的ArcadeDrive方法以半速向前行驶。如果超过2秒钟，代码将停止机器人驱动器。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:159
msgid "Joystick Control for teleoperation"
msgstr "遥控操纵杆控制"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:179
msgid ""
"Like in Autonomous, the Teleop mode has a ``TeleopInit`` and "
"``TeleopPeriodic`` function. In this example we don't have anything to do in"
" ``TeleopInit``, it is provided for illustration purposes only. In "
"``TeleopPeriodic``, the code uses the ``ArcadeDrive`` method to map the "
"Y-axis of the ``Joystick`` to forward/back motion of the drive motors and "
"the X-axis to turning motion."
msgstr ""
"像在自主模式中一样，Teleop模式具有“ TeleopInit”和“ "
"TeleopPeriodic”功能。在这个例子中，我们在``TeleopInit``中没有任何关系，仅出于说明目的提供它。在``TeleopPeriodic''中，代码使用``ArcadeDrive''方法将``操纵杆''的Y轴映射到驱动马达的前进/后退运动，而X轴映射到旋转运动。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:182
msgid "Test Mode"
msgstr "测试模式"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:202
msgid ""
"Test Mode is used for testing robot functionality. Similar to "
"``TeleopInit``, the ``TestInit`` and ``TestPeriodic`` methods are provided "
"here for illustrative purposes only."
msgstr ""
"测试模式用于测试机器人功能。与“ TeleopInit”类似，此处提供的“ TestInit”和“ TestPeriodic”方法仅用于说明目的。"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:205
msgid "Deploying the Project to a Robot"
msgstr "将项目部署到机器人"

#: ../../frc-docs/source/docs/zero-to-robot/step-4/creating-benchtop-test-program-cpp-java.rst:207
msgid ""
"Please see the instructions :ref:`here <docs/software/vscode-"
"overview/deploying-robot-code:Building and Deploying Robot Code>` for "
"deploying the program onto a robot."
msgstr ""
"请参阅:ref:`此处 <docs/software/vscode-overview/deploying-robot-code:Building and"
" Deploying Robot Code>` 的说明，以将程序部署到机器人上。"
