# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 楚涵 张 <zhangchuhan1210@126.com>, 2020
# Yitong Zhao <lucius300er@outlook.com>, 2021
# 海宇 鲍 <arlicbao@163.com>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-09 04:10+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: 海宇 鲍 <arlicbao@163.com>, 2022\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:2
msgid "2020 Command-Based Rewrite: What Changed?"
msgstr "2020基于命令的重写：什么改变了？"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:7
msgid "Package Location"
msgstr "包装位置"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:12
msgid "Major Architectural Changes"
msgstr "主要构筑变化"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:14
msgid ""
"The overall structure of the command-based framework has remained largely "
"the same.  However, there are some still a few major architectural changes "
"that users should be aware of:"
msgstr "基于命令的框架的总体结构基本保持不变。然而，仍有一些用户需要注意的主要体系结构变化："

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:17
msgid "Commands and Subsystems as Interfaces"
msgstr "命令和子系统作为接口"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:22
msgid "Multiple Command Group Classes"
msgstr "多命令组类"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:24
msgid ""
"The ``CommandGroup`` class no longer exists, and has been replaced by a "
"number of narrower classes that can be recursively composed to create more-"
"complicated group structures.  For more information see :doc:`command-"
"groups`."
msgstr ""
"这个CommandGroup类不再存在，并且已经被许多递归类所组成的较窄类所取代，以创建更复杂的组结构。有关更多信息，请参见:doc:`command-"
"groups`."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:27
msgid "Inline Command Definitions"
msgstr "内联命令定义"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:29
msgid ""
"Previously, users were required to write a subclass of ``Command`` in almost"
" all cases where a command was needed.  Many of the new commands are "
"designed to allow inline definition of command functionality, and so can be "
"used without the need for an explicit subclass.  For more information, see "
":doc:`convenience-features`."
msgstr ""
"以前，用户需要编写一个Command的子类。命令在几乎所有需要命令的情况下。许多新命令被设计为允许命令功能的内联定义，因此可以在不需要显式子类的情况下使用。有关更多信息，请参见"
" :doc:`convenience-features`."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:32
msgid "Injection of Command Dependencies"
msgstr "注入命令依赖项"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:34
msgid ""
"While not an actual change to the coding of the library, the recommended use"
" pattern for the new command-based framework utilizes injection of subsystem"
" dependencies into commands, so that subsystems are not declared as globals."
"  This is a cleaner, more maintainable, and more reusable pattern than the "
"global subsystem pattern promoted previously.  For more information, see "
":doc:`structuring-command-based-project`."
msgstr ""
"虽然不是对库的编码的实际改变，但是新的基于命令的框架的推荐使用模式利用子系统依赖性注入命令，因此子系统不被声明为全局。这是一种更清洁、更可维护、更可重用的模式，而不是以前所提倡的全局子系统模式。有关更多信息，请参见"
" :doc:`structuring-command-based-project`."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:37
msgid "Command Ownership (C++ Only)"
msgstr " 命令所有权（C++）"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:39
msgid ""
"The previous command framework required users to use raw pointers for all "
"commands, resulting in nearly-unavoidable memory leaks in all C++ command-"
"based projects, as well as leaving room for common errors such as double-"
"allocating commands within command-groups."
msgstr ""
"以前的命令框架要求用户对所有命令使用原始指针，从而导致在所有基于C "
"++命令的项目中几乎不可避免的内存泄漏，并且为常见错误留出了空间，例如在命令组内双重分配命令。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:41
msgid ""
"The new command framework offers ownership management for all commands.  "
"Default commands and commands bound to buttons are typically owned by the "
"scheduler, and component commands are owned by their encapsulating command "
"groups.  As a result, users should generally never heap-allocate a command "
"with ``new`` unless there is a very good reason to do so."
msgstr ""
"新的命令框架为所有命令提供所有权管理。绑定到按钮的默认命令和命令通常由调度器拥有，组件命令由它们的封装命令组拥有。因此，用户通常不应该堆分配new命令。除非有一个很好的理由这样做。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:43
msgid ""
"Transfer of ownership is done using `perfect forwarding "
"<https://cpppatterns.com/patterns/perfect-forwarding.html>`__, meaning "
"rvalues will be *moved* and lvalues will be *copied* (`rvalue/lvalue "
"explanation "
"<http://thbecker.net/articles/rvalue_references/section_01.html>`__)."
msgstr ""
"所有权的转移是通过完美的转发完成的，<https://cpppatterns.com/patterns/perfect-"
"forwarding.html>`__,这意味着右值将被移动，左值将被复制（右值/左值说明<http://thbecker.net/articles/rvalue_references/section_01.html>`__)."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:46
msgid "Changes to the Scheduler"
msgstr "对调度程序的更改"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:49
msgid ""
"Interruptibility of commands is now the responsibility of the scheduler, not"
" the commands, and can be specified during the call to ``schedule``."
msgstr "现在命令的可中断性是调度程序的责任，而不是命令的责任，可以在调用``schedule''时指定。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:50
msgid ""
"Users can now pass actions to the scheduler which are taken whenever a "
"command is scheduled, interrupted, or ends normally.  This is highly useful "
"for cases such as event logging."
msgstr "用户现在可以将操作传递给调度程序，只要命令被调度，中断或正常结束，便会采取这些操作。这对于事件记录之类的情况非常有用。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:53
msgid "Changes to Subsystem"
msgstr "子系统变化"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:55
msgid "For more information on subsystems, see :doc:`subsystems`."
msgstr "有关子系统的更多信息，请参见子系统。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:58
msgid ""
"``initDefaultCommand`` has been removed; subsystems no longer need to \"know"
" about\" their default commands, which are instead registered directly with "
"the ``CommandScheduler``.  The new ``setDefaultCommand`` method simply wraps"
" the ``CommandScheduler`` call."
msgstr ""
"initDefaultCommand已被删除；子系统不再需要“知道”它们的默认命令，而是直接注册到CommandScheduler. "
"新的setDefaultCommand方法简单地包装CommandScheduler程序打电话。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:59
msgid ""
"Subsystems no longer \"know about\" the commands currently requiring them; "
"this is handled exclusively by the ``CommandScheduler``.  A convenience "
"wrapper on the ``CommandScheduler`` method is provided, however."
msgstr ""
"子系统不再“知道”当前需要它们的命令；这只由CommandScheduler. 然而，一个方便包装命CommandScheduler.提供了方法。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:62
msgid "Changes to Command"
msgstr "命令更改"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:64
msgid "For more information on commands, see :doc:`commands`."
msgstr "有关命令的更多信息，请参见：doc:`commands`."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:67
msgid ""
"Commands no longer handle their own scheduling state; this is now the "
"responsibility of the scheduler."
msgstr "命令不再处理自己的调度状态；现在这是调度程序的责任。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:68
msgid ""
"The ``interrupted()`` method has been rolled into the ``end()`` method, "
"which now takes a parameter specifying whether the command was interrupted "
"(``false`` if it ended normally)."
msgstr ""
"``interrupted（）''方法已经被卷入到``end（）``方法中，该方法现在使用一个参数来指定命令是否被中断（如果正常结束则为``false''）。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:69
msgid "The ``requires()`` method has been renamed to ``addRequirement()``."
msgstr "``requires（）``方法已重命名为``addRequirement（）``。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:70
msgid ""
"``void setRunsWhenDisabled(boolean disabled)`` has been replaced by an "
"overrideable ``runsWhenDisabled()`` method.  Commands that should run when "
"disabled should override this method to return true."
msgstr ""
"void setRunsWhenDisabled（boolean "
"disabled）已由可重写的runsWhenDisabled（）方法替换。禁用时应运行的命令应覆盖此方法以返回true。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:71
msgid ""
"``void setInterruptible(boolean interruptible)`` has been removed; "
"interruptibility is no longer an innate property of commands, and can be set"
" when the command is scheduled."
msgstr ""
"``void setInterruptible（boolean "
"interruptible）``已被删除;可中断性不再是命令的固有属性，可以在计划命令时设置。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:72
msgid ""
"Several :ref:`\"decorator\" methods <docs/software/commandbased/convenience-"
"features:Command Decorator Methods>` have been added to allow easy inline "
"modification of commands (e.g. adding a timeout)."
msgstr ""
"添加了几种“ decorator”方法<docs / software / commandbased / convenience-"
"features：Command Decorator Methods>`以允许轻松地内联修改命令（例如，添加超时）。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:73
msgid ""
"(C++ only) In order to allow the decorators to work with the command "
"ownership model, a `CRTP "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>`__ is "
"used via the ``CommandHelper`` `class "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__."
"  Any user-defined Command subclass ``Foo`` *must* extend "
"``CommandHelper<Foo, Base>`` where ``Base`` is the desired base class."
msgstr ""
"（仅C "
"++）为了允许装饰器使用命令所有权模型，请通过CommandHelper类<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibNewCommands/src/main/native/include/frc2/command/CommandHelper.h>`__使用CRTP"
" "
"<https://en.wikipedia.org/wiki/Curiously_recurring_template_pattern>`__。任何用户定义的Command子类“"
" Foo” *必须*扩展“ CommandHelper <Foo, Base>”，其中“ Base”是所需的基类。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:76
msgid "Changes to PIDSubsystem/PIDCommand"
msgstr "PIDS子系统/ PIDCommand的变化"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:78
msgid ""
"For more information, see :doc:`pid-subsystems-commands`, and "
":ref:`docs/software/advanced-controls/controllers/pidcontroller:PID Control "
"in WPILib`"
msgstr ""
"更多的信息，请参见：doc:`pid-subsystems-commands`, and :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:80
msgid ""
"Following the changes to PIDController, these classes now run synchronously "
"from the main robot loop."
msgstr "在对PIDController进行更改之后，这些类现在可以从机器人主循环中同步运行。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:81
msgid ""
"The ``PIDController`` is now injected through the constructor, removing many"
" of the forwarding methods.  It can be modified after construction with "
"``getController()``."
msgstr "l  这个PIDController现在通过构造函数注入，删除许多转发方法，构筑后后可以改建为getController()."

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:82
msgid ""
"``PIDCommand`` is intended largely for inline use, as shown in the "
"GyroDriveCommands example (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__)."
msgstr ""
"如GyroDriveCommands示例（Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__，`C"
" ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__）所示，PIDCommand主要用于内联使用。"

#: ../../frc-docs/source/docs/software/commandbased/command-based-changes.rst:83
msgid ""
"If users wish to use PIDCommand more \"traditionally,\" overriding the "
"protected ``returnPIDInput()`` and ``usePIDOutput(double output)`` methods "
"has been replaced by modifying the protected ``m_measurement`` and "
"``m_useOutput`` fields.  Similarly, rather than calling ``setSetpoint``, "
"users can modify the protected ``m_setpoint`` field."
msgstr ""
"如果用户希望更“传统地”使用PIDCommand，则已覆盖的受保护的“ returnPIDInput（）”和“ usePIDOutput（double "
"output）”方法已被修改为受保护的“ m_measurement”和“ "
"m_useOutput”领域。同样，用户可以调用受保护的m_setpoint字段，而不用调用setSetpoint。"
