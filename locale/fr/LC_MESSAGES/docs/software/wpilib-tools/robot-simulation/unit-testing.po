# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Austin Shalit <austinshalit@gmail.com>, 2021
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-26 04:30+0000\n"
"PO-Revision-Date: 2021-02-27 16:27+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:2
msgid "Unit Testing"
msgstr "Test unitaire"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:7
msgid "Writing Testable Code"
msgstr "Écriture de code testable"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:9
msgid ""
"This example can be easily adapted to the command-based paradigm by having "
"``Intake`` inherit from ``SubsystemBase``."
msgstr ""
"Cet exemple peut être facilement adapté au paradigme orienté commande en "
"dérivant (héritage) ``Intake`` de ``SubsystemBase``."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:11
msgid ""
"Our subsystem will be an Infinite Recharge intake mechanism containing a "
"piston and a motor: the piston deploys/retracts the intake, and the motor "
"will pull the Power Cells inside. We don't want the motor to run if the "
"intake mechanism isn't deployed because it won't do anything."
msgstr ""
"Notre sous-système sera un mécanisme Intake du défin Infinite Recharge "
"constitué d'un piston et d'un moteur : le piston déploie/rétracte le Intake,"
" et le moteur tirera les cellules de puissance à l’intérieur. Nous ne "
"voulons pas que le moteur fonctionne si le mécanisme Intake n’est pas "
"déployé parce qu’il n'aura aucun effet."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:13
msgid ""
"To provide a \"clean slate\" for each test, we need to have a function to "
"destroy the object and free all hardware allocations. In Java, this is done "
"by implementing the ``AutoCloseable`` interface and its ``.close()`` method,"
" destroying each member object by calling the member's ``.close()`` method -"
" an object without a ``.close()`` method probably doesn't need to be closed."
" In C++, the default destructor will be called automatically when the object"
" goes out of scope and will call destructors of member objects."
msgstr ""
"Pour fournir un \"clean slate\" pour chaque test, nous avons besoin d’avoir "
"une fonction pour détruire l’objet et libérer toutes les allocations "
"matérielles. En Java, cela se fait en implémentant l’interface "
"``AutoCloseable`` et sa méthode ``.close()``, détruisant chaque objet membre"
" en appelant la méthode membre ``.close()`` - un objet sans méthode "
"``.close()`` n’a probablement pas besoin d’être fermé. En C++, le "
"destructeur par défaut sera appelé automatiquement lorsque l’objet sort de "
"sa portée et appellera à son tour les destructeurs des objets membres."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:15
msgid ""
"Vendors might not support resource closing identically to the way shown "
"here. See your vendor's documentation for more information as to what they "
"support and how."
msgstr ""
"Les fournisseurs tiers peuvent ne pas prendre en charge la fermeture des "
"ressources de la même manière que celle indiquée ici. Consultez la "
"documentation de votre fournisseur pour plus d’informations sur ce qu’il "
"prend en charge et comment."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:18
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:59
msgid "C++ (Header)"
msgstr "C++ (Header ou en-tête)"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:80
msgid "C++ (Source)"
msgstr "C++ (Source)"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:104
msgid "Writing Tests"
msgstr "Écriture des Tests"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:106
msgid ""
"Tests are placed inside the ``test`` source set: ``/src/test/java/`` and "
"``/src/test/cpp/`` for Java and C++ tests, respectively. Files outside that "
"source root do not have access to the test framework - this will fail "
"compilation due to unresolved references."
msgstr ""
"Les tests sont placés à l’intérieur de l’ensemble source ``test`` : "
"``/src/test/java/`` et ``/src/test/cpp/`` pour les tests Java et C++, "
"respectivement. Les fichiers en dehors de cette racine source n’ont pas "
"accès au cadre de test - cela fera échouer la compilation en raison de "
"références non résolues."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:108
msgid ""
"In Java, each test class contains at least one test method marked with "
"``@org.junit.Test``, each method representing a test case. Additional "
"methods for opening resources (such as our ``Intake`` object) before each "
"test and closing them after are respectively marked with "
"``@org.junit.Before`` and ``@org.junit.After``. In C++, test fixture classes"
" inheriting from ``testing::Test`` contain our subsystem and simulation "
"hardware objects, and test methods are written using the "
"``TEST_F(testfixture, testname)`` macro. The ``SetUp()`` and ``TearDown()`` "
"methods can be overridden in the test fixture class and will be run "
"respectively before and after each test."
msgstr ""
"En Java, chaque classe de test contient au moins une méthode de test marquée"
" de ``@org.junit.Test``, chaque méthode représentant un cas de test. "
"D’autres méthodes d’ouverture des ressources (telles que notre objet "
"``Intake``) avant chaque test et leur fermeture après sont respectivement "
"marquées de ``@org.junit.Before``  et ``@org.junit.After``. En C++, les "
"classes de montage de test héritant de ``testing::Test`` contiennent nos "
"objets matériels pour les sous-systèmes et la simulation, et les méthodes de"
" test sont écrites à l’aide de la macro ``TEST_F(testfixture, testname)``. "
"Les méthodes ``SetUp()`` et ``TearDown()`` peuvent être remplacées dans la "
"classe de montage d’essai et seront exécutés respectivement avant et après "
"chaque test."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:110
msgid ""
"Each test method should contain at least one *assertion* (``assert*()`` in "
"Java or ``EXPECT_*()`` in C++). These assertions verify a condition at "
"runtime and fail the test if the condition isn't met. If there is more than "
"one assertion in a test method, the first failed assertion will crash the "
"test - execution won't reach the later assertions."
msgstr ""
"Chaque méthode de test doit contenir au moins une *assertion* (``assert*()``"
" en Java ou ``EXPECT_*()`` en C++). Ces assertions vérifient une condition à"
" moment de l’exécution et échouent au test si la condition n’est pas "
"remplie. S’il y a plus d’une assertion dans une méthode de test, la première"
" assertion échouée plantera le test - l’exécution n’atteindra pas les "
"assertions subséquentes."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:112
msgid ""
"Both JUnit and GoogleTest have multiple assertion types, but the most common"
" is equality: ``assertEquals(expected, actual)``/``EXPECT_EQ(expected, "
"actual)``. When comparing numbers, a third parameter - ``delta``, the "
"acceptable error, can be given. In JUnit (Java), these assertions are static"
" methods and can be used without qualification by adding the static star "
"import ``import static org.junit.Asssert.*``. In Google Test (C++), "
"assertions are macros from the ``<gtest/gtest.h>`` header."
msgstr ""
"JUnit et GoogleTest ont tous deux plusieurs types d’assertions, mais la plus"
" commune est l’égalité : ``assertEquals(valeur attendue, valeur "
"actuelle)``/``EXPECT_EQ(valeur attendue, valeur actuelle)``. Lors de la "
"comparaison des nombres, un troisième paramètre - ``delta``, l’erreur "
"acceptable, peut être donné. Dans JUnit (Java), ces assertions sont des "
"méthodes statiques et peuvent être utilisées sans qualification en ajoutant "
"l’importation statique étoile (star) ``import static org.junit.Asssert.*``. "
"Dans Google Test (C++), les assertions sont des macros de l’en-tête "
"``<gtest/gtest.h>``."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:114
msgid ""
"Comparison of floating-point values isn't accurate, so comparing them should"
" be done with an acceptable error parameter (``DELTA``)."
msgstr ""
"La comparaison des valeurs en point-flottants n’est pas exacte, de sorte que"
" leur comparaison doit être faite avec un paramètre d’erreur acceptable "
"(``DELTA``)."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:214
msgid ""
"For more advanced usage of JUnit and Google Test, see the framework docs."
msgstr ""
"Pour une utilisation plus avancée de JUnit et Google Test, consultez les "
"documents cadres."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:217
msgid "Running Tests"
msgstr "Exécution des tests"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:219
msgid ""
"Tests will always be run in simulation on your desktop. For prerequisites "
"and more info, see :doc:`the simulation introduction <introduction>`."
msgstr ""
"Les tests seront toujours exécutés en simulation sur votre bureau. Pour les "
"conditions préalables et plus d’informations, consultez :doc:`Introduction à"
" la simulation <introduction>`."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:221
msgid ""
"For Java tests to run, make sure that your ``build.gradle`` file contains "
"the following block:"
msgstr ""
"Pour que les tests Java s’exécutent, assurez-vous que votre fichier "
"``build.gradle`` contient le bloc suivant :"

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:229
msgid ""
"Use :guilabel:`Test Robot Code` from the Command Palette to run the tests. "
"Results will be reported in the terminal output, each test will have a "
"``FAILED`` or ``PASSED``/``OK`` label next to the test name in the output. "
"JUnit (Java only) will generate a HTML document in "
"``build/reports/tests/test/index.html`` with a more detailed overview of the"
" results; if there are failied test a link to render the document in your "
"browser will be printed in the terminal output."
msgstr ""
"Utilisez :guilabel:`Test Robot Code` de la palette de Commande pour exécuter"
" les tests. Les résultats seront affichés dans le terminal de sortie, chaque"
" test aura une étiquette ``FAILED`` ou ``PASSED``/``OK`` à côté du nom de "
"test dans la sortie. JUnit (Java uniquement) générera un document HTML dans "
"``build/reports/tests/test/index.html`` avec une vue d’ensemble plus "
"détaillée des résultats; s’il y a un test qui a échoué un lien pour rendre "
"le document dans votre navigateur sera imprimé dans le terminal de sortie."

#: ../../frc-docs/source/docs/software/wpilib-tools/robot-simulation/unit-testing.rst:231
msgid ""
"By default, Gradle runs the tests whenever robot code is built, including "
"deploys. This will increase deploy time, and failing tests will cause the "
"build and deploy to fail. To prevent this from happening, you can use "
":guilabel:`Change Skip Tests On Deploy Setting` from the Command Palette to "
"configure whether to run tests when deploying."
msgstr ""
"Par défaut, Gradle exécute les tests chaque fois que le code robot est "
"compilé, y compris les déploiements. Cela augmentera le temps de "
"déploiement, et des tests défaillants et provoquera l’échec de la "
"compilation et du déploiement. Pour éviter que cela ne se produise, vous "
"pouvez utiliser  :guilabel:`Change Skip Tests On Deploy Setting` de la "
"palette de commande pour configurer, s’il y a lieu, l'exécution des tests "
"lors du déploiement."
