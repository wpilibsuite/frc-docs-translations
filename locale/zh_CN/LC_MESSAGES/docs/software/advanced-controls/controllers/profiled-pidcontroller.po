# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 楚涵 张 <zhangchuhan1210@126.com>, 2020
# Atlus Zhang <atluslan@yahoo.co.jp>, 2021
# Yitong Zhao <lucius300er@outlook.com>, 2021
# Team 5308 <team5308@163.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Team 5308 <team5308@163.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:2
msgid "Combining Motion Profiling and PID Control with ProfiledPIDController"
msgstr "将运动分析和PID控制与ProfiledPIDController相结合"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:4
msgid ""
"For a guide on implementing the ``ProfiledPIDController`` class in the "
":ref:`command-based framework <docs/software/commandbased/what-is-command-"
"based:What Is \"Command-Based\" Programming?>` framework, see "
":ref:`docs/software/commandbased/profilepid-subsystems-commands:Combining "
"Motion Profiling and PID in Command-Based`."
msgstr ""
"有关在基于命令的框架:ref:`command-based framework <docs/software/commandbased/what-is-"
"command-based:What Is \"Command-Based\" Programming?>` framework，请参阅 "
":ref:`docs/software/commandbased/profilepid-subsystems-commands:Combining "
"Motion Profiling and PID in Command-Based`."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:6
msgid ""
"In the previous article, we saw how to use the ``TrapezoidProfile`` class to"
" create and use a trapezoidal motion profile.  The example code from that "
"article demonstrates manually composing the ``TrapezoidProfile`` class with "
"the external PID control feature of a \"smart\" motor controller."
msgstr ""
"在上一篇文章中，我们看到了如何使用TrapezoidProfile类来创建和使用梯形运动轮廓。该文章中的示例代码演示了如何使用“智能”电机控制器的外部PID控制功能手动组合“"
" TrapezoidProfile”类。"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:11
msgid "Using the ProfiledPIDController class"
msgstr "使用ProfiledPIDController类"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:13
msgid ""
"In C++, the ``ProfiledPIDController`` class is templated on the unit type "
"used for distance measurements, which may be angular or linear.  The passed-"
"in values *must* have units consistent with the distance units, or a "
"compile-time error will be thrown.  For more information on C++ units, see "
":ref:`docs/software/basic-programming/cpp-units:The C++ Units Library`."
msgstr ""
"在C ++中，“ "
"ProfiledPIDController”类在用于距离测量的单位类型（可能是角度的或线性的）上模板化。传入的值*必须*具有与距离单位一致的单位，否则将引发编译时错误。有关C"
" ++单元的更多信息，请参阅：docs / software / basic-programming / cpp-units：C ++单元库。"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:15
msgid ""
"Much of the functionality of ``ProfiledPIDController`` is effectively "
"identical to that of ``PIDController``.  Accordingly, this article will only"
" cover features that are substantially-changed to accommodate the motion "
"profiling functionality.  For information on standard ``PIDController`` "
"features, see :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""
"ProfiledPIDController的许多功能实际上与PIDController的功能相同。因此，本文将仅涵盖经过实质性更改以适应运动分析功能的功能。有关标准``PIDController''功能的信息，请参阅"
" :ref:`docs/software/advanced-controls/controllers/pidcontroller:PID Control"
" in WPILib`."

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:19
msgid "Constructing a ProfiledPIDController"
msgstr "构造一个ProfiledPIDController"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:21
msgid ""
"C++ is often able to infer the type of the inner classes, and thus a simple "
"initializer list (without the class name) can be sent as a parameter.  The "
"full class name is included in the example below for clarity."
msgstr "C ++通常能够推断内部类的类型，因此可以将简单的初始化列表（没有类名）作为参数发送。为了清楚起见，完整的类名包含在下面的示例中。"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:23
msgid ""
"Creating a ``ProfiledPIDController`` is nearly identical to :ref:`creating a"
" PIDController <docs/software/advanced-"
"controls/controllers/pidcontroller:Constructing a PIDController>`.  The only"
" difference is the need to supply a set of :ref:`trapezoidal profile "
"constraints <docs/software/advanced-controls/controllers/trapezoidal-"
"profiles:Constraints>`, which will be automatically forwarded to the "
"internally-generated ``TrapezoidProfile`` instances:"
msgstr ""
"创建``ProfiledPIDController''几乎与创建PIDController :ref:`creating a PIDController"
" <docs/software/advanced-controls/controllers/pidcontroller:Constructing a "
"PIDController>`. 完全相同。唯一的区别是需要提供一组梯形轮廓约束<docs/software/advanced-"
"controls/controllers/trapezoidal-"
"profiles:Constraints>`,这些约束将自动转发到内部生成的``TrapezoidProfile ``实例："

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:46
msgid "Goal vs Setpoint"
msgstr "目标与设定点"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:48
msgid ""
"A major difference between a standard ``PIDController`` and a "
"``ProfiledPIDController`` is that the actual *setpoint* of the control loop "
"is not directly specified by the user.  Rather, the user specifies a *goal* "
"position or state, and the setpoint for the controller is computed "
"automatically from the generated motion profile between the current state "
"and the goal.  So, while the user-side call looks mostly identical:"
msgstr ""
"标准``PIDController''和``ProfiledPIDController''之间的主要区别在于控制环的实际*设置点*不是由用户直接指定的。而是由用户指定目标位置或状态，并根据当前状态和目标之间生成的运动曲线自动计算控制器的设定点。因此，尽管用户端调用看起来大致相同："

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:64
msgid ""
"The specified ``goal`` value (which can be either a position value or a "
"``TrapezoidProfile.State``, if nonzero velocity is desired) is *not* "
"necessarily the *current* setpoint of the loop - rather, it is the "
"*eventual* setpoint once the generated profile terminates."
msgstr ""
"指定的“目标”值（如果需要非零速度，则可以是位置值或“ TrapezoidProfile.State”）*不一定*一定是回路的*当前*设定值-"
"而是一旦生成的配置文件终止，*最终*设定点。"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:67
msgid "Getting/Using the Setpoint"
msgstr "获取/使用设定值"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:69
msgid ""
"Since the ``ProfiledPIDController`` goal differs from the setpoint, is if "
"often desirable to poll the current setpoint of the controller (for "
"instance, to get values to use with :ref:`feedforward "
"<docs/software/advanced-controls/controllers/combining-feedforward-"
"feedback:Using Feedforward Components with PID>`).  This can be done with "
"the ``getSetpoint()`` method."
msgstr ""
"由于ProfiledPIDController目标不同于设定值，因此通常需要轮询控制器的当前设定值（例如，获取:ref:`feedforward "
"<docs/software/advanced-controls/controllers/combining-feedforward-"
"feedback:Using Feedforward Components with PID>`). 这可以通过getSetpoint（）方法来完成。"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:71
msgid "The returned setpoint might then be used as in the following example:"
msgstr "然后，可以将返回的设定值用于以下示例："

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:109
msgid "Complete Usage Example"
msgstr "完整用法示例"

#: ../../frc-docs/source/docs/software/advanced-controls/controllers/profiled-pidcontroller.rst:111
msgid ""
"A more complete example of ``ProfiledPIDController`` usage is provided in "
"the ElevatorProfilePID example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorprofiledpid>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/ElevatorProfiledPID/cpp>`__):"
msgstr ""
"ElevatorProfilePID示例项目(`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/master/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorprofiledpid>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/master/wpilibcExamples/src/main/cpp/examples/ElevatorProfiledPID/cpp>`__):"
