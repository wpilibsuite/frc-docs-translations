# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# 怡静 陆 <2238710874@qq.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-09 04:10+0000\n"
"PO-Revision-Date: 2020-08-20 04:15+0000\n"
"Last-Translator: 怡静 陆 <2238710874@qq.com>, 2021\n"
"Language-Team: Chinese (China) (https://www.transifex.com/wpilib/teams/109324/zh_CN/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: zh_CN\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:2
msgid "3rd Party Libraries"
msgstr "第三方库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:4
msgid ""
"Teams that are not using parts provided in the KoP will likely need to "
"install external dependencies. Please view the below section to see "
"information on adding an external library."
msgstr "不使用KoP中提供的部分的团队可能需要安装外部库。 请查看以下部分以查看有关添加外部库的信息。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:7
msgid "The Mechanism"
msgstr "机制"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:9
msgid ""
"In support of this effort NI (for LabVIEW) and FIRST/WPI (for Java/C++) have"
" developed mechanisms that should make it easy for vendors to plug their "
"code into the WPILib software and for teams to use that code once it has "
"been installed. A brief description of how the system works for each "
"language can be found below."
msgstr ""
"为了支持这项工作，NI（对于LabVIEW）和FIRST / WPI（对于Java / C "
"++）已经开发了机制，使供应商可以轻松地将其代码插入WPILib软件，并且一旦安装该代码，团队就可以使用该代码 。 "
"可以在下面找到有关系统针对每种语言的工作方式的简要说明。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:12
msgid "The Mechanism - Java/C++"
msgstr "机制-Java / C ++"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:14
msgid ""
"For Java and C++ a JSON file describing the vendor library is installed on "
"your system to ``~/wpilib/YYYY/vendordeps`` (where YYYY is the year and ~ is"
" ``C:\\Users\\Public`` on Windows). This can either be done by an offline "
"installer or the file can be fetched from an online location using the menu "
"item in Visual Studio Code. This file is then used from VS Code to add to "
"the library to each individual project. Vendor library information is "
"managed on a per-project basis to make sure that a project is always "
"pointing to a consistent version of a given vendor library. The libraries "
"themselves are placed in the Maven cache at "
"``C:\\Users\\Public\\wpilib\\YYYY\\maven``. Vendors can place a local copy "
"here with an offline installer (recommended) or require users to be online "
"for an initial build to fetch the library from a remote Maven location."
msgstr ""
"对于Java和C ++，在将描述供应商库的JSON文件安装到你的系统上：〜/ wpilib / YYYY / "
"vendordeps（其中YYYY是年份，而〜是Windows上的C：\\ Users \\ "
"Public）。这可以由脱机安装程序完成，也可以使用Visual Studio Code中的菜单项从联机位置获取文件。然后，从VS "
"Code中使用该文件将其添加到每个单独项目的库中。供应商库信息是按项目进行管理的，以确保项目始终指向给定供应商库的一致版本。库本身位于C：\\ "
"Users \\ Public \\ wpilib \\ YYYY \\ "
"maven的Maven缓存中。供应商可以使用脱机安装程序在此处放置本地副本（推荐），或者要求用户在线以进行初始构建以从远程Maven位置获取库。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:16
msgid ""
"The JSON file allows specification of complex libraries with multiple "
"components (Java, C++, JNI, etc.) and also helps handle some complexities "
"related to simulation. Vendors choosing to provide a remote URL in the JSON "
"also enable users to check for updates from within VS Code."
msgstr ""
"JSON文件允许指定具有多个组件（Java，C "
"++，JNI等）的复杂库，还可以帮助处理与仿真相关的一些复杂问题。选择在JSON中提供远程URL的供应商还使用户能够从VS Code中检查更新。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:18
msgid ""
"The vendor JSON files are actually processed by GradleRIO once they are in "
"your projects ``vendordeps`` folder. If you are using another IDE, you will "
"need to manually create a \"vendordeps\" folder in your project and copy any"
" desired vendor JSON files from the \"wpilib/YYYY\" folder (where they "
"should be placed by an offline installer) or download them directly from the"
" vendor and place them into the folder in the project."
msgstr ""
"一旦供应商JSON文件位于您的项目的vendordeps文件夹中，它们便实际上由GradleRIO处理。 如果使用其他IDE，则需要在项目中手动创建“ "
"vendordeps”文件夹，然后从“ wpilib / YYYY”文件夹（脱机安装程序放置它们的位置）复制任何所需的供应商JSON文件 "
"或直接从供应商处下载并将它们放入项目的文件夹中。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:21
msgid "The Mechanism - LabVIEW"
msgstr "机制-LabVIEW"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:23
msgid ""
"For LabVIEW teams, you may notice a few new Third Party items on various "
"palettes (specifically, one in :guilabel:`Actuators`, one in "
":guilabel:`Actuators` -> :guilabel:`Motor Control` labeled :guilabel:`CAN "
"Motor`, and one in :guilabel:`Sensors`). These correspond to folders in "
"``C:\\Program Files\\National Instruments\\LabVIEW YYYY\\vi.lib\\Rock "
"Robotics\\WPI\\Third Party`` where ``YYYY`` is the current year - 1. If it’s"
" 2020, the directory would be ``LabVIEW 2019``."
msgstr ""
"对于LabVIEW团队，您可能会注意到在各种选项版上有一些新的“Third "
"Party”项（特别是，在“Actuators”中一项，在“Actuators -> Motor Control labeled CAN "
"Motor”中一项，在“Sensors”中一项）。 它们对应于C：\\ Program Files \\ National Instruments \\"
" LabVIEW YYYY \\ vi.lib \\ Rock Robotics \\ WPI \\ Third "
"Party中的文件夹，其中YYYY是当前年份-1。如果是2020，则目录为LabVIEW 2019。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:25
msgid ""
"To use installed \"Third Party\" libraries, simply locate the VIs in one of "
"these 3 locations and drag them into your project as you would with any "
"other VI."
msgstr "要使用已安装的“第三方”库，只需将VI放在这三个位置之一，然后将它们拖到项目中即可，就像使用其他VI一样。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:28
msgid "Managing VS Code Libraries"
msgstr "管理VS code库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:31
msgid "Adding Offline Libraries"
msgstr "添加离线库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:34
msgid "VS Code"
msgstr "VS Code"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:39
msgid ""
"To add a vendor library that has been installed by an offline installer, "
"press :kbd:`Ctrl+Shift+P` and type WPILib or click on the WPILib icon in the"
" top right to open the WPILib Command Palette and begin typing "
":guilabel:`Manage Vendor Libraries`, then select it from the menu. Select "
"the option to :guilabel:`Install new libraries (offline)`."
msgstr ""
"要添加由脱机安装程序安装的供应商库，请按Ctrl + Shift + "
"P并输入WPILib/单击右上角的WPILib图标，以打开WPILib命令面板。然后，输入“Manage Vendor "
"Libraries”，然后从下拉菜单中选择它。 选择“Install new libraries (offline)”的选项。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:44
msgid ""
"Select the desired libraries to add to the project by checking the box next "
"to each, then click :guilabel:`OK`. The JSON file will be copied to the "
"``vendordeps`` folder in the project, adding the library as a dependency to "
"the project."
msgstr ""
"选中每个库旁边的框，选择 要添加到项目中的所需库，然后单击“确定”。 "
"这样，JSON文件将被复制到项目中的vendordeps文件夹中，并将库添加为项目的依赖项。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:47
msgid "Command-line"
msgstr "命令行"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:49
msgid ""
"Adding a vendor library dependency from the vendor URL can also be done "
"through the command-line via a gradle task. Open a command-line instance at "
"the project root, and enter ``gradlew vendordep --url=<url>`` where "
"``<url>`` is the vendor JSON URL. This will add the vendor library "
"dependency JSON file to the ``vendordeps`` folder of the project. Vendor "
"libraries can be updated the same way."
msgstr ""
"还可以通过gradle任务通过命令行从供应商URL添加供应商库依赖项。在项目根目录下打开一个命令行，然后输入“gradlew vendordep "
"--url = <url>”，其中<url>是供应商JSON "
"URL。这会将供应商库依赖项JSON文件添加到项目的vendordeps文件夹中。供应商库可以用相同的方式更新。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:51
msgid ""
"The ``vendordep`` gradle task can also fetch vendordep JSONs from the user "
"``wpilib`` folder. To do so, pass ``FRCLOCAL/Filename.json`` as the file "
"URL. For example, ``gradlew vendordep "
"--url=FRCLOCAL/WPILibNewCommands.json`` will fetch the JSON for the new "
"command-based framework."
msgstr ""
"“vendordep” gradle任务还可以从用户“wpilib”文件夹中获取vendordep JSON。为此，请将“FRCLOCAL / "
"Filename.json”作为文件URL传递。例如，“gradlew vendordep --url = FRCLOCAL / "
"WPILibNewCommands.json”将为一个基于命令的新框架获取JSON。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:54
msgid "Checking for Updates (Offline)"
msgstr "检查更新（离线）"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:56
msgid ""
"Dependencies are now version managed and done on a per-project bases. Even "
"if you have installed an updated library using an offline installer, you "
"will need to :guilabel:`Manage Vendor Libraries` and select :guilabel:`Check"
" for updates (offline)` for each project you wish to update."
msgstr ""
"现在，依赖项是在每个项目的基础上进行版本管理和完成的。即使您已使用脱机安装程序安装了更新的库，也需要点击“Manage Vendor "
"Libraries”并为要更新的每个项目选择“Check for updates (offline)”。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:59
msgid "Checking for Updates (Online)"
msgstr "检查更新（在线）"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:61
msgid ""
"Part of the JSON file that vendors may optionally populate is an online "
"update location. If a library has an appropriate location specified, running"
" :guilabel:`Check for updates (online)` will check if a newer version of the"
" library is available from the remote location."
msgstr ""
"供应商可以选择填充一部分JSON文件为在线更新。如果库指定了适当的位置，则运行“Check for updates "
"(online)”可检查远程位置是否有可用的较新版本的库。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:64
msgid "Removing a Library Dependency"
msgstr "删除库依赖"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:66
msgid ""
"To remove a library dependency from a project, select :guilabel:`Manage "
"Current Libraries` from the :guilabel:`Manage Vendor Libraries` menu, check "
"the box for any libraries to uninstall and click :guilabel:`OK`. These "
"libraries will be removed as dependencies from the project."
msgstr ""
"要从项目中删除库依赖性，请从“Manage Vendor Libraries”菜单中选择“Manage Current "
"Libraries”，选中要卸载的任何库的复选框，然后单击“确定”。这些库将从项目中删除。"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:69
msgid "Libraries"
msgstr "库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:76
msgid ""
"`Copperforge LibCu Software Library "
"<https://copperforge.cc/docs/software/libcu/>`__ - Library for all "
"Copperforge devices including the Lasershark"
msgstr ""
"`Copperforge LibCu Software Library "
"<https://copperforge.cc/docs/software/libcu/>`__ - 包括Lasershark在内的所有 "
"Copperforge 设备的库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:82
msgid ""
"`Digilent <https://reference.digilentinc.com/dmc-60c/getting-started>`__ - "
"DMC-60C library"
msgstr ""
"`Digilent <https://reference.digilentinc.com/dmc-60c/getting-started>`__-"
"DMC-60C库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:85
msgid ""
"`Playing With Fusion Driver "
"<https://www.playingwithfusion.com/docview.php?docid=1205>`__ - Library for "
"all PWF devices including the Venom motor/controller"
msgstr ""
"`Playing With Fusion Driver "
"<https://www.playingwithfusion.com/docview.php?docid=1205>`__ - 包括 Venom "
"motor/controller在内的所有PWF设备的库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:88
msgid ""
"`Kauai Labs <https://pdocs.kauailabs.com/navx-mxp/software/roborio-"
"libraries/>`__ - Libraries for NavX-MXP, NavX-Micro, and Sensor Fusion"
msgstr ""
"`Kauai Labs <https://pdocs.kauailabs.com/navx-mxp/software/roborio-"
"libraries/>`__ - NavX-MXP, NavX-Micro, 与Sensor Fusion的库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:94
msgid "Community Libraries"
msgstr "社区库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:97
msgid ""
"`PhotonVision "
"<https://docs.photonvision.org/en/latest/docs/programming/photonlib/adding-"
"vendordep.html>`_ - Library for PhotonVision CV software"
msgstr ""
"`PhotonVision "
"<https://docs.photonvision.org/en/latest/docs/programming/photonlib/adding-"
"vendordep.html>`_-PhotonVision CV软件库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:100
msgid "WPILib Command Libraries"
msgstr "WPILib命令库"

#: ../../frc-docs/source/docs/software/vscode-overview/3rd-party-libraries.rst:106
msgid ""
"To remove a library dependency from a project, select **Manage Current "
"Libraries** from the **Manage Vendor Libraries** menu, check the box for any"
" libraries to uninstall and click OK. These libraries will be removed as "
"dependencies from the project."
msgstr ""
"要从项目中删除库依赖项，请从**管理供应商库**菜单中选择**管理当前库**，选中要卸载的任何库的复选框，然后单击**确定**。这些库将从项目中删除。"
