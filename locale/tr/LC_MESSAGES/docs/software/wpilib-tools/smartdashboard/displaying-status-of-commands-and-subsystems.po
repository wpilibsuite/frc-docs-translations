# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ADA ZAGYAPAN <azagyapan24@my.uaa.k12.tr>, 2020
# Esra özemre <esra.ozemre@tfo.k12.tr>, 2020
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-18 16:14+0000\n"
"PO-Revision-Date: 2020-09-18 04:18+0000\n"
"Last-Translator: Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2020\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:2
msgid "Displaying the Status of Commands and Subsystems"
msgstr "Komutların ve Alt Sistemlerin Durumunu Görüntüleme"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:4
msgid ""
"If you are using the command-based programming features of WPILib, you will "
"find that they are very well integrated with SmartDashboard. It can help "
"diagnose what the robot is doing at any time and it gives you control and a "
"view of what's currently running."
msgstr ""
"WPILib'in komut tabanlı programlama özelliklerini kullanıyorsanız, "
"SmartDashboard ile çok iyi entegre olduklarını göreceksiniz. Robotun "
"herhangi bir zamanda ne yaptığını teşhis etmeye yardımcı olabilir ve size o "
"anda neyin çalıştığının kontrolünü ve görünümünü sunar."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:7
msgid "Overview of Command and Subsystem Displays"
msgstr "Komut ve Alt Sistem Görünümlerine Genel Bakış"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:11
msgid ""
"With SmartDashboard you can display the status of the commands and "
"subsystems in your robot program in various ways. The outputs should "
"significantly reduce the debugging time for your programs. In this picture "
"you can see a number of displays that are possible. Displayed here are:"
msgstr ""
"SmartDashboard ile robot programınızdaki komutların ve alt sistemlerin "
"durumunu çeşitli şekillerde görüntüleyebilirsiniz. Çıktılar, programlarınız "
"için hata ayıklama süresini önemli ölçüde azaltmalıdır. Bu resimde mümkün "
"olan bir dizi ekranı görebilirsiniz. Burada gösterilenler:"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:13
msgid ""
"The Scheduler currently with ``No commands running``. In the next example "
"you can see what it looks like with a few commands running showing the "
"status of the robot."
msgstr ""
"Zamanlayıcı'da şu anda \"Çalışan komut yok\". Bir sonraki örnekte, robotun "
"durumunu gösteren çalışan birkaç komutla neye benzediğini görebilirsiniz."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:14
msgid ""
"A subsystem, ``ExampleSubsystem`` that indicates that there are currently no"
" commands running that are \"requiring\" it. When commands are running, it "
"will indicate the name of the commands that are using the subsystem."
msgstr ""
"Bir alt sistem olan \"ExampleSubsystem\", şu anda onu \"gerektiren\" hiçbir "
"komutun çalışmadığını belirtir. Komutlar çalışırken, alt sistemi kullanan "
"komutların adını gösterecektir."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:15
msgid ""
"A command written to SmartDashboard that shows a ``start`` button that can "
"be pressed to run the command. This is an excellent way of testing your "
"commands one at a time."
msgstr ""
"SmartDashboard'a yazılan ve \"başlat\" düğmesini gösteren bir komut, komutu "
"çalıştırmak için basılabilir . Bu, komutlarınızı birer birer test etmenin "
"mükemmel bir yoludur."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:16
msgid ""
"And a few data values written to the dashboard to help debug the code that's"
" running."
msgstr ""
"Ve çalışan kodda hata ayıklamaya yardımcı olmak için kontrol paneline "
"yazılan birkaç veri değeri."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:18
msgid ""
"In the following examples, you'll see what the screen would look like when "
"there are commands running, and the code that produces this display."
msgstr ""
"Aşağıdaki örneklerde, çalışan komutlar varken ekranın nasıl görüneceğini ve "
"bu ekranı üreten kodu göreceksiniz."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:21
msgid "Displaying the Scheduler Status"
msgstr "Zamanlayıcı Durumunu Görüntüleme"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:25
msgid ""
"You can display the status of the Scheduler (the code that schedules your "
"commands to run). This is easily done by adding a single line to the "
"``RobotInit`` method in your RobotProgram as shown here. In this example the"
" Scheduler instance is written using the ``putData`` method to "
"SmartDashboard. This line of code produces the display in the previous "
"image."
msgstr ""
"Zamanlayıcının (komutlarınızın çalıştırılmasını planlayan kod) durumunu "
"görüntüleyebilirsiniz. Bu, burada gösterildiği gibi Robot Programınızdaki "
"``RobotInit`` yöntemine tek bir satır ekleyerek kolayca yapılabilir. Bu "
"örnekte Scheduler örneği SmartDashboard'a ` ``putData``  yöntemi "
"kullanılarak yazılmıştır. Bu kod satırı, önceki görüntüdeki ekranı "
"oluşturur."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:29
msgid ""
"This is the scheduler status when there are two commands running, "
"``ExampleCommand`` and ``newCommand``. This replaces the ``No commands "
"running.`` message from the previous screen image. You can see commands "
"displayed on the dashboard as the program runs and various commands are "
"triggered."
msgstr ""
"Bu, çalışan iki komut``ExampleCommand`` ve ``newCommand``  olduğunda "
"zamanlayıcı durumudur. Bu, önceki ekran görüntüsündeki ``No commands "
"running.``  mesajının yerini alır. Program çalışırken ve çeşitli komutlar "
"tetiklenirken kontrol panelinde görüntülenen komutları görebilirsiniz."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:32
msgid "Displaying Subsystem Status"
msgstr "Alt Sistem Durumunun Görüntülenmesi"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:36
msgid ""
"In this example we are writing the command instance, ``exampleSubsystem`` "
"and instance of the ``ExampleSubsystem`` class to the SmartDashboard. This "
"causes the display shown in the previous image. The text field will either "
"contain a few dashes, ``---`` indicating that no command is current using "
"this subsystem, or the name of the command currently using this subsystem."
msgstr ""
"Bu örnekte, SmartDashboard'a komut örneğini, ``exampleSubsystem `` ve `` "
"ExampleSubsystem`` sınıfının örneğini yazıyoruz. Bu, önceki görüntüde "
"gösterilen ekrana neden olur. Metin alanı ya bu alt sistemi kullanan hiçbir "
"komutun geçerli olmadığını belirten `` --- '' veya bu alt sistemi "
"halihazırda kullanan komutun adını içeren birkaç çizgi içerecektir."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:40
msgid ""
"Running commands will \"require\" subsystems. That is the command is "
"reserving the subsystem for its exclusive use. If you display a subsystem on"
" SmartDashboard, it will display which command is currently using it. In "
"this example, ``ExampleSubsystem`` is in use by ``ExampleCommand``."
msgstr ""
"Komutları çalıştırmak alt sistemler \"gerektirecektir\". Komut, alt sistemi "
"özel kullanımı için ayırmaktadır. SmartDashboard'da bir alt sistem "
"görüntülerseniz, o anda hangi komutun kullandığını gösterecektir. Bu "
"örnekte, ``ExampleSubsystem``  , ``ExampleCommand`` tarafından kullanılıyor."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:43
msgid "Activating Commands with a Button"
msgstr "Komutları Bir Düğmeyle Etkinleştirme"

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:47
msgid ""
"This is the code required to create a button for the command on "
"SmartDashboard. RobotBuilder will automatically generate this code for you, "
"but it can easily be done by hand as shown here. Pressing the button will "
"schedule the command. While the command is running, the button label changes"
" from ``start`` to ``cancel`` and pressing the button will cancel the "
"command."
msgstr ""
"Bu, SmartDashboard'da komut için bir düğme oluşturmak için gereken koddur. "
"RobotBuilder bu kodu sizin için otomatik olarak oluşturacaktır, ancak burada"
" gösterildiği gibi elle kolaylıkla yapılabilir. Düğmeye basmak komutu "
"programlayacaktır. Komut çalışırken düğme etiketi ``start``dan ``cancel``e "
"değişir ve düğmeye basmak komutu iptal eder."

#: ../../frc-docs/source/docs/software/wpilib-tools/smartdashboard/displaying-status-of-commands-and-subsystems.rst:51
msgid ""
"In this example you can see a button labeled ``Autonomous Command``. "
"Pressing this button will run the associated command and is an excellent way"
" of testing commands one at a time without having to add throw-away test "
"code to your robot program. Adding buttons for each command makes it simple "
"to test the program, one command at a time."
msgstr ""
"Bu örnekte, ``Autonomous Command`` etiketli bir düğme görebilirsiniz. Bu "
"düğmeye basmak, ilgili komutu çalıştırır ve robot programınıza çöpe atma "
"testi kodu eklemenize gerek kalmadan komutları teker teker test etmenin "
"mükemmel bir yoludur. Her komut için düğmeler eklemek, programı her "
"seferinde bir komut olmak üzere test etmeyi kolaylaştırır."
