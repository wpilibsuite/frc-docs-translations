# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021
# Austin Shalit <austinshalit@gmail.com>, 2022
# Andre Theberge <atheberge2@videotron.ca>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-02-14 04:06+0000\n"
"PO-Revision-Date: 2020-06-12 20:56+0000\n"
"Last-Translator: Andre Theberge <atheberge2@videotron.ca>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:2
msgid "Using the CameraServer on the roboRIO"
msgstr "Utilisation de CameraServer sur le roboRIO"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:5
msgid "Simple CameraServer Program"
msgstr "Programme CameraServer élémentaire"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:7
msgid ""
"The following program starts automatic capture of a USB camera like the "
"Microsoft LifeCam that is connected to the roboRIO. In this mode, the camera"
" will capture frames and send them to the dashboard. To view the images, "
"create a CameraServer Stream Viewer widget using the \"View\", then \"Add\" "
"menu in the dashboard. The images are unprocessed and just forwarded from "
"the camera to the dashboard."
msgstr ""
"Le programme suivant démarre la capture automatique d'une caméra USB comme "
"la Microsoft LifeCam connectée au roboRIO. Dans ce mode, la caméra capturera"
" des images et les enverra au tableau de bord. Pour visualiser les images, "
"créez un gadget-widget \"CameraServer Stream Viewer\" à l'aide du menu "
"\"View\", puis \"Add\" -ajouter- dans le tableau de bord. Les images ne sont"
" pas traitées et sont simplement transmises de la caméra au tableau de bord."

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rstNone
msgid ""
"By going to View then \"Add...\" then \"CameraServer Stream Viewer\" "
"SmartDashboard adds a stream viewer widget."
msgstr ""
"En allant dans View puis \"Add...\" puis \"Add...\" SmartDashboard ajoute un"
" widget de visionneuse de flux."

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:14
#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:36
msgid "Java"
msgstr "Java"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:22
#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:44
msgid "C++"
msgstr "C++"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:30
msgid "Advanced Camera Server Program"
msgstr "Programme avancé de serveur de caméras"

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:32
msgid ""
"In the following example a thread created in robotInit() gets the Camera "
"Server instance. Each frame of the video is individually processed, in this "
"case drawing a rectangle on the image using the OpenCV ``rectangle()`` "
"method. The resultant images are then passed to the output stream and sent "
"to the dashboard. You can replace the ``rectangle`` operation with any image"
" processing code that is necessary for your application. You can even "
"annotate the image using OpenCV methods to write targeting information onto "
"the image being sent to the dashboard."
msgstr ""
"Dans l'exemple suivant, un thread créé dans robotInit() obtient l'instance "
"de Camera Server. Chaque image de la vidéo est traitée individuellement, "
"dans ce cas dessinant un rectangle sur l'image en utilisant la méthode "
"OpenCV ``rectangle()``. Les images résultantes sont ensuite transmises au "
"flux de sortie et envoyées au tableau de bord. Vous pouvez remplacer "
"l'opération ``rectangle`` par n'importe quel code de traitement d'image "
"nécessaire à votre application. Vous pouvez même annoter l'image à l'aide "
"des méthodes OpenCV pour écrire des informations de ciblage sur l'image "
"envoyée au tableau de bord."

#: ../../frc-docs/source/docs/software/vision-processing/roborio/using-the-cameraserver-on-the-roborio.rst:50
msgid ""
"Notice that in these examples, the ``PutVideo()`` method writes the video to"
" a named stream. To view that stream on SmartDashboard or Shuffleboard, "
"select that named stream. In this case that is \"Rectangle\"."
msgstr ""
"Notez que dans ces exemples, la méthode ``PutVideo()`` écrit la vidéo dans "
"un flux nommé. Pour afficher ce flux sur SmartDashboard ou Shuffleboard, "
"sélectionnez ce flux nommé. Dans ce cas, c'est \"Rectangle\"."
