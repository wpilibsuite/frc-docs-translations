# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2021
# Müfit ALKAYA <mufit.alkaya@tfo.k12.tr>, 2021
# ceren oktemer <ceren.oktemer@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-08 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:02+0000\n"
"Last-Translator: ceren oktemer <ceren.oktemer@gmail.com>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:4
msgid "PID Control through PIDSubsystems and PIDCommands"
msgstr "PIDSubsystems ve PIDCommands üzerinden PID Kontrol "

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:6
msgid ""
"For a description of the WPILib PID control features used by these command-"
"based wrappers, see :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`."
msgstr ""
"Bu komut tabanlı sarmalayıcılar tarafından kullanılan WPILib PID kontrol "
"özelliklerinin bir açıklaması için, bakınız :ref:`docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib`"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:8
msgid ""
"Unlike the earlier version of ``PIDController``, the 2020 ``PIDController`` "
"class runs *synchronously*, and is not handled in its own thread.  "
"Accordingly, changing its ``period`` parameter will *not* change the actual "
"frequency at which it runs in any of these wrapper classes.  Users should "
"never modify the ``period`` parameter unless they are certain of what they "
"are doing."
msgstr ""
"``PIDController`` in önceki sürümünden farklı olarak, 2020 ``PIDController``"
" sınıfı *eşzamanlı olarak* çalışır ve kendi iş parçacığında ele alınmaz. "
"Buna göre, ``period`` parametresini değiştirmek, bu sarmalayıcı sınıflarının"
" herhangi birinde çalıştığı gerçek frekansı *değiştirmeyecektir*. "
"Kullanıcılar ne yaptıklarından emin olmadıkları sürece ``period`` "
"parametresini asla değiştirmemelidir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:10
msgid ""
"One of the most common control algorithms used in FRC\\ |reg| is the `PID "
"controller <https://en.wikipedia.org/wiki/PID_controller>`__. WPILib offers "
"its own :ref:`PIDController <docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib>` class to help "
"teams implement this functionality on their robots. To further help teams "
"integrate PID control into a command-based robot project, the command-based "
"library includes two convenience wrappers for the ``PIDController`` class: "
"``PIDSubsystem``, which integrates the PID controller into a subsystem, and "
"``PIDCommand``, which integrates the PID controller into a command."
msgstr ""
"FRC \\ | reg | yazılımında kullanılan en yaygın kontrol algoritmalarından "
"biri `PID kontrolörü <https://en.wikipedia.org/wiki/PID_controller>`__. "
"WPILib, ekiplerin bu işlevi robotlarında uygulamalarına yardımcı olmak için "
"kendi  :ref:`PIDController <docs/software/advanced-"
"controls/controllers/pidcontroller:PID Control in WPILib>` sınıfını sunar. "
"Ekiplerin PID kontrolünü komut tabanlı bir robot projesine entegre "
"etmelerine daha fazla yardımcı olmak için, komuta dayalı kütüphane "
"``PIDController``  sınıfı için iki kullanışlı sarmalayıcı içerir: PID "
"denetleyicisini bir alt sisteme entegre eden ``PIDSubsystem``  ve PID "
"denetleyicisini bir komuta entegre eden ``PIDCommand`` ."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:13
msgid "PIDSubsystems"
msgstr "PIDSubsystems"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:18
msgid "Creating a PIDSubsystem"
msgstr "PIDSubsystem oluşturma"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:20
msgid ""
"When subclassing ``PIDSubsystem``, users must override two abstract methods "
"to provide functionality that the class will use in its ordinary operation:"
msgstr ""
"``PIDSubsystem`` alt sınıfını oluştururken, kullanıcılar sınıfın normal "
"işleminde kullanacağı işlevselliği sağlamak için iki soyut yöntemi geçersiz "
"kılmalıdır:"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:23
msgid "getMeasurement()"
msgstr "getMeasurement()"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:35
msgid ""
"The ``getMeasurement`` method returns the current measurement of the process"
" variable.  The ``PIDSubsystem`` will automatically call this method from "
"its ``periodic()`` block, and pass its value to the control loop."
msgstr ""
"``getMeasurement`` yöntemi, süreç değişkeninin mevcut ölçümünü döndürür. "
"``PIDSubsystem`` bu yöntemi ``periodic()`` bloğundan otomatik olarak "
"çağıracak ve değerini kontrol döngüsüne aktaracaktır."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:37
msgid ""
"Users should override this method to return whatever sensor reading they "
"wish to use as their process variable measurement."
msgstr ""
"Kullanıcılar, işlem  değişken ölçümü olarak kullanmak istedikleri sensör "
"okumasını döndürmek için bu yöntemi geçersiz kılmalıdır."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:40
msgid "useOutput()"
msgstr "useOutput()"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:53
msgid ""
"The ``useOutput()`` method consumes the output of the PID controller, and "
"the current setpoint (which is often useful for computing a feedforward).  "
"The ``PIDSubsystem`` will automatically call this method from its "
"``periodic()`` block, and pass it the computed output of the control loop."
msgstr ""
"``useOutput()`` yöntemi, PID denetleyicisinin çıkışını ve mevcut ayar "
"noktası durumunu (bu genellikle bir ileri beslemeyi hesaplamak için "
"yararlıdır) kullanır. ``PIDSubsystem`` , bu yöntemi ``periodic()`` bloğundan"
" otomatik olarak çağıracak ve ona kontrol döngüsünün hesaplanmış çıktısını "
"iletecektir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:55
msgid ""
"Users should override this method to pass the final computed control output "
"to their subsystem's motors."
msgstr ""
"Kullanıcılar, son hesaplanmış kontrol çıkışını alt sistemlerinin motorlarına"
" geçirmek için bu yöntemi geçersiz kılmalıdır."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:58
msgid "Passing In the Controller"
msgstr "Controller'a Geçirme"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:60
msgid ""
"Users must also pass in a ``PIDController`` to the ``PIDSubsystem`` base "
"class through the superclass constructor call of their subclass.  This "
"serves to specify the PID gains, as well as the period (if the user is using"
" a non-standard main robot loop period)."
msgstr ""
"Kullanıcılar ayrıca, alt sınıflarının üst sınıf yapıcı çağrısı aracılığıyla "
"``PIDSubsystem`` temel sınıfına bir ``PIDController`` geçirmelidir. Bu, PID "
"kazançlarının yanı sıra periyodu (kullanıcı standart olmayan bir main robot "
"looğ döngü periyodu kullanıyorsa) belirlemeye yarar."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:62
msgid ""
"Additional modifications (e.g. enabling continuous input) can be made to the"
" controller in the constructor body by calling ``getController()``."
msgstr ""
"``getController()`` çağrısı yapılarak, yapıcı gövdesindeki denetleyicide ek "
"değişiklikler (e.g. enabling continuous input- ör. sürekli girişi "
"etkinleştirmek) yapılabilir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:65
msgid "Using a PIDSubsystem"
msgstr "PIDSubsystem kullanımı"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:67
msgid ""
"Once an instance of a ``PIDSubsystem`` subclass has been created, it can be "
"used by commands through the following methods:"
msgstr ""
"Bir ``PIDSubsystem`` alt sınıfının bir örneği oluşturulduktan sonra, "
"aşağıdaki yöntemler aracılığıyla komutlar tarafından kullanılabilir:"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:70
msgid "setSetpoint()"
msgstr "setSetpoint()"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:72
msgid ""
"The ``setSetpoint()`` method can be used to set the setpoint of the "
"``PIDSubsystem``.  The subsystem will automatically track to the setpoint "
"using the defined output:"
msgstr ""
"``setSetpoint()`` yöntemi, ``PIDSubsystem`` in ayar noktasını ayarlamak için"
" kullanılabilir. Alt sistem, tanımlanan çıktıyı kullanarak ayar noktasını "
"otomatik olarak izleyecektir:"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:87
msgid "enable() and disable()"
msgstr "enable() ve disable()"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:89
msgid ""
"The ``enable()`` and ``disable()`` methods enable and disable the PID "
"control of the ``PIDSubsystem``.  When the subsystem is enabled, it will "
"automatically run the control loop and track the setpoint.  When it is "
"disabled, no control is performed."
msgstr ""
"``enable()`` ve ``disable()`` yöntemleri ``PIDSubsystem`` in PID kontrolünü "
"etkinleştirir ve devre dışı bırakır. Alt sistem etkinleştirildiğinde, "
"kontrol döngüsünü otomatik olarak çalıştıracak ve ayar noktasını "
"izleyecektir. Devre dışı bırakıldığında hiçbir kontrol gerçekleştirilmez."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:91
msgid ""
"Additionally, the ``enable()`` method resets the internal ``PIDController``,"
" and the ``disable()`` method calls the user-defined `useOutput()`_ method "
"with both output and setpoint set to ``0``."
msgstr ""
"Ek olarak, ``enable()``  yöntemi dahili ``PIDController`` i sıfırlar ve "
"``disable()`` yöntemi hem çıktı hem de ayar noktası ``olarak ayarlanmış "
"şekilde kullanıcı tanımlı `useOutput()`_ yöntemini ``0``a ayarlar."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:94
msgid "Full PIDSubsystem Example"
msgstr "Tam PIDSubsystem Örneği"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:96
msgid ""
"What does a ``PIDSubsystem`` look like when used in practice? The following "
"examples are taken from the FrisbeeBot example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot>`__):"
msgstr ""
"Pratikte kullanıldığında bir ``PIDS alt sistemi``neye benzer? Aşağıdaki "
"örnekler, FrisbeeBot örnek projesinden alınmıştır (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/frisbeebot>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/Frisbeebot>`__):"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:124
msgid "Using a ``PIDSubsystem`` with commands can be very simple:"
msgstr "Komutlarla bir ``PIDSubsystem`` kullanmak çok basit olabilir:"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:153
msgid "PIDCommand"
msgstr "PIDCommand"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:155
msgid ""
"The ``PIDCommand`` class allows users to easily create commands with a "
"built-in PIDController.  As with PIDSubsystem, users can create a "
"``PIDCommand`` by subclassing the ``PIDCommand`` class.  However, as with "
"many of the other command classes in the command-based library, users may "
"want to save code by defining a ``PIDCommand`` :ref:`inline "
"<docs/software/commandbased/convenience-features:Inline Command "
"Definitions>`."
msgstr ""
"``PIDCommand`` sınıfı, kullanıcıların yerleşik bir PIDController ile kolayca"
" komutlar oluşturmasına olanak tanır. PIDSubsystem ile olduğu gibi, "
"kullanıcılar ``PIDCommand`` sınıfını alt sınıflayarak bir ``PIDCommand`` "
"oluşturabilir. Bununla birlikte, komut tabanlı kitaplıktaki diğer birçok "
"komut sınıfında olduğu gibi, kullanıcılar bir `` PIDCommand`` tanımlayarak "
"kodu kaydetmek isteyebilir :ref: `inline "
"<docs/software/commandbased/convenience-features:Inline Command "
"Definitions>`."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:158
msgid "Creating a PIDCommand"
msgstr "Bir PIDCommand oluşturma"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:162
msgid ""
"In either case, a ``PIDCommand`` is created by passing the necessary "
"parameters to its constructor (if defining a subclass, this can be done with"
" a `super()` call):"
msgstr ""
"Her iki durumda da, gerekli parametreleri kurucusuna ileterek bir "
"``PIDCommand`` oluşturulur (eğer bir alt sınıf tanımlıyorsa, bu bir "
"`super()` çağrısıyla yapılabilir):"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:183
msgid "controller"
msgstr "Kontrolör - Controller"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:185
msgid ""
"The ``controller`` parameter is the ``PIDController`` object that will be "
"used by the command.  By passing this in, users can specify the PID gains "
"and the period for the controller (if the user is using a nonstandard main "
"robot loop period)."
msgstr ""
"``Controller`` parametresi, komut tarafından kullanılacak olan "
"``PIDController`` nesnesidir. Bunu bilerek, kullanıcılar PID kazanımlarını, "
"ve kontrolör için süreyi belirleyebilir (eğer kullanıcı standart olmayan bir"
" ana robot döngü periyodu kullanıyorsa)."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:187
msgid ""
"When subclassing ``PIDCommand``, additional modifications (e.g. enabling "
"continuous input) can be made to the controller in the constructor body by "
"calling ``getController()``."
msgstr ""
"``PIDCommand`` alt sınıfını oluştururken, ``getController()`` çağrısı "
"yapılarak yapıcı gövdesindeki denetleyicide ek değişiklikler (ör. Sürekli "
"girişi etkinleştirmek) yapılabilir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:190
msgid "measurementSource"
msgstr "measurementSource"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:192
msgid ""
"The ``measurementSource`` parameter is a function (usually passed as a "
":ref:`lambda <docs/software/commandbased/convenience-features:Lambda "
"Expressions (Java)>`) that returns the measurement of the process variable."
"  Passing in the ``measurementSource`` function in ``PIDCommand`` is "
"functionally analogous to overriding the `getMeasurement()`_ function in "
"``PIDSubsystem``."
msgstr ""
"``MeasurementSource`` parametresi, işlem değişkeninin ölçümünü döndüren bir "
"işlevdir (genellikle a: ref: `lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions (Java)> "
"olarak geçer) ``PIDCommand`` içindeki ``MeasurementSource`` işlevini geçmek,"
" işlevsel olarak `` PIDSubsystem`` içindeki  `getMeasurement ()`_ işlevini "
"geçersiz kılmaya benzer."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:194
msgid ""
"When subclassing ``PIDCommand``, advanced users may further modify the "
"measurement supplier by modifying the class's ``m_measurement`` field."
msgstr ""
"``PIDCommand`` alt sınıfını oluştururken, ileri düzey kullanıcılar, sınıfın "
"``m_measurement`` alanını değiştirerek ayar noktası tedarikçisini daha da "
"değiştirebilir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:197
msgid "setpointSource"
msgstr "setpointSource"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:199
msgid ""
"The ``setpointSource`` parameter is a function (usually passed as a "
":ref:`lambda <docs/software/commandbased/convenience-features:Lambda "
"Expressions (Java)>`) that returns the current setpoint for the control "
"loop.  If only a constant setpoint is needed, an overload exists that takes "
"a constant setpoint rather than a supplier."
msgstr ""
"``setpointSource`` parametresi, kontrol döngüsü için geçerli ayar noktasını "
"döndüren bir işlevdir (genellikle :ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions (Java)>`"
" olarak geçer). Yalnızca sabit bir ayar noktasına ihtiyaç duyulursa, bir "
"tedarikçiden ziyade sabit bir ayar noktası alan bir aşırı yük vardır."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:201
msgid ""
"When subclassing ``PIDCommand``, advanced users may further modify the "
"setpoint supplier by modifying the class's ``m_setpoint`` field."
msgstr ""
"``PIDCommand`` alt sınıfını oluştururken, ileri düzey kullanıcılar, sınıfın "
"``m_setpoint`` alanını değiştirerek ayar noktası tedarikçisini daha da "
"değiştirebilir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:204
msgid "useOutput"
msgstr "useOutput"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:206
msgid ""
"The ``useOutput`` parameter is a function (usually passed as a :ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`) that consumes the output and setpoint of the control loop.  "
"Passing in the ``useOutput`` function in ``PIDCommand`` is functionally "
"analogous to overriding the `useOutput()`_ function in ``PIDSubsystem``."
msgstr ""
"``useOutput`` parametresi, kontrol döngüsünün çıkış ve ayar noktası durumunu"
" tüketen bir işlevdir (genellikle :ref:`lambda "
"<docs/software/commandbased/convenience-features:Lambda Expressions "
"(Java)>`) olarak geçirilir. ``PIDCommand`` içindeki ``useOutput`` işlevini "
"geçirmek, işlevsel olarak ``PIDSubsystem`` içindeki `useOutput()' işlevini "
"geçersiz kılmaya benzer."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:208
msgid ""
"When subclassing ``PIDCommand``, advanced users may further modify the "
"output consumer by modifying the class's ``m_useOutput`` field."
msgstr ""
"``PIDCommand`` alt sınıfını oluştururken, ileri düzey kullanıcılar, sınıfın "
"``m_useOutput`` alanını değiştirerek çıktı tüketicisini daha da "
"değiştirebilir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:211
msgid "requirements"
msgstr "Gereksinimler"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:213
msgid ""
"Like all inlineable commands, ``PIDCommand`` allows the user to specify its "
"subsystem requirements as a constructor parameter."
msgstr ""
"Tüm satır içi komutlar gibi, ``PIDCommand`` kullanıcının alt sistem "
"gereksinimlerini bir constructor  parametresi olarak belirtmesine izin "
"verir."

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:216
msgid "Full PIDCommand Example"
msgstr "Tam PIDCommand Örneği"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:218
msgid ""
"What does a ``PIDCommand`` look like when used in practice? The following "
"examples are from the GyroDriveCommands example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`__,"
" `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`__):"
msgstr ""
"Pratikte kullanıldığında bir``PIDCommand`` neye benzer? Aşağıdaki örnekler "
"GyroDriveCommands örnek projesinden alınmıştır (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/gyrodrivecommands>`"
" __, `C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/GyroDriveCommands>`"
" __):"

#: ../../frc-docs/source/docs/software/commandbased/pid-subsystems-commands.rst:246
msgid ""
"And, for an :ref:`inlined <docs/software/commandbased/convenience-"
"features:Inline Command Definitions>`  example:"
msgstr ""
"Ve bir :ref:`inlined<docs/software/commandbased/convenience-features:Inline "
"Command Definitions>` örneği için :"
