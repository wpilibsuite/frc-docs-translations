# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Iván Samaniego <ivan.samaniego.b@gmail.com>, 2020
# Ricardo Rentería <richier_99@hotmail.com>, 2020
# Heber Sepúlveda <heber.sepulveda.m@gmail.com>, 2020
# Emiliano Vargas <joseemilianohernandezvargas04@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-12 04:13+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Emiliano Vargas <joseemilianohernandezvargas04@gmail.com>, 2021\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:4
msgid "PWM Motor Controllers in Depth"
msgstr "Controladores de motor PWM en profundidad"

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:6
msgid ""
"WPILib has extensive support for motor control. There are a number of "
"classes that represent different types of motor controllers and servos.  "
"There are currently two classes of motor controllers, PWM based motor "
"controllers and CAN based motor controllers. WPILib also contains composite "
"classes (like DifferentialDrive) which allow you to control multiple motors "
"with a single object. This article will cover the details of PWM motor "
"controllers; CAN controllers and composite classes will be covered in "
"separate articles."
msgstr ""
"WPLib tiene un amplio soporte para el control de motores. Hay una serie de "
"clases que representan diferentes tipos de controladores para motor y "
"servos. Actualmente existen dos clases de controladores de motor, los "
"basados en PWM y los basados en CAN. WPLib también contiene clases "
"compuestas (como DifferentialDrive) que permite el controlar varios objetos "
"con un solo objeto. Este artículo cubrirá los detalles de los controladores "
"de motor PWM; los controladores CAN y las clases compuestas se tratarán "
"artículos separados."

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:9
msgid "PWM Controllers, brief theory of operation"
msgstr "Controladores PWM, breve teoría de operación"

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:11
msgid ""
"The acronym PWM stands for Pulse Width Modulation. For motor controllers, "
"PWM can refer to both the input signal and the method the controller uses to"
" control motor speed. To control the speed of the motor the controller must "
"vary the perceived input voltage of the motor. To do this the controller "
"switches the full input voltage on and off very quickly, varying the amount "
"of time it is on based on the control signal. Because of the mechanical and "
"electrical time constants of the types of motors used in FRC\\ |reg| this "
"rapid switching produces an effect equivalent to that of applying a fixed "
"lower voltage (50% switching produces the same effect as applying ~6V)."
msgstr ""
"El acrónimo PWM significa modulación de ancho de pulso por sus siglas en "
"inglés. Para controladores de motor, PWM puede referirse tanto a la señal de"
" entrada como al método que utiliza el controlador para controlar la "
"velocidad del motor. Para controlar la velocidad del motor el controlador "
"debe variar el voltaje de entrada percibido del motor. Para hacer esto, el "
"controlador enciende y apaga el voltaje de entrada completo muy rápidamente,"
" variando el cantidad de tiempo que está en función de la señal de control. "
"Debido a la mecánica y eléctrica constantes de tiempo de los tipos de "
"motores utilizados en FRC\\ |reg|, este cambio rápido produce un efecto "
"equivalente a la aplicación de un voltaje inferior fijo (50% de conmutación "
"produce el mismo efecto como aplicando ~ 6V)."

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:13
msgid ""
"The PWM signal the controllers use for an input is a little bit different. "
"Even at the bounds of the signal range (max forward or max reverse) the "
"signal never approaches a duty cycle of 0% or 100%. Instead the controllers "
"use a signal with a period of either 5ms or 10ms and a midpoint pulse width "
"of 1.5ms. Many of the controllers use the typical hobby RC controller timing"
" of 1ms to 2ms."
msgstr ""
"La señal PWM que usan los controladores para una entrada es un poco "
"diferente. Incluso en los límites del rango de señal (avance máximo o "
"retroceso máximo) la señal nunca se acerca a un ciclo de trabajo de 0% o "
"100%. En cambio, los controladores usan una señal con un período de 5 ms o "
"10 ms y un ancho del pulso del punto medio de 1.5ms. Muchos de los "
"controladores usan el típico controlador RC de 1ms a 2ms."

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:16
msgid "Raw vs Scaled output values"
msgstr "Valores de salida Sin Procesar vs Escalados"

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:18
msgid ""
"In general, all of the motor controller classes in WPILib take a scaled -1.0"
" to 1.0 value as the output to an actuator. The PWM module in the FPGA on "
"the roboRIO is capable of generating PWM signals with periods of 5, 10, or "
"20ms and can vary the pulse width in 2000 steps of ~.001ms each around the "
"midpoint (1000 steps in each direction around the midpoint). The raw values "
"sent to this module are in this 0-2000 range with 0 being a special case "
"which holds the signal low (disabled). The class for each motor controller "
"contains information about what the typical bound values (min, max and each "
"side of the deadband) are as well as the typical midpoint. WPILib can then "
"use these values to map the scaled value into the proper range for the motor"
" controller. This allows for the code to switch seamlessly between different"
" types of controllers and abstracts out the details of the specific "
"signaling."
msgstr ""
"En general, todas las clases de controlador de motor en WPILib toman un "
"valor escalado de -1.0 a 1.0 como salida a un operador. El módulo PWM en el "
"FPGA en el roboRIO es capaz de generar Las señales PWM con períodos de 5, 10"
" o 20 ms y pueden variar el ancho del pulso en 2000 pasos de ~ .001ms cada "
"uno alrededor del punto medio (1000 pasos en cada dirección alrededor del "
"punto medio). Los valores brutos enviados a este módulo están en este rango "
"de 0-2000 con 0 siendo un caso especial que contiene la señal baja "
"(deshabilitada). La clase para cada controlador de motor contiene "
"información sobre qué los valores de enlace típicos (min, max y cada lado de"
" la banda muerta) son así como los valores típicos punto medio. WPILib puede"
" usar estos valores para mapear el valor escalado en el rango apropiado para"
" el controlador del motor. Esto permite que el código cambie sin problemas "
"entre diferentes tipos de controladores y resúmenes de los detalles de la "
"señalización específica."

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:21
msgid "Calibrating Motor Controllers"
msgstr "Calibración de controladores de motor"

#: ../../frc-docs/source/docs/software/actuators/pwm-controllers.rst:23
msgid ""
"So if WPILib handles all this scaling, why would you ever need to calibrate "
"your motor controller? The values WPILib uses for scaling are approximate "
"based on measurement of a number of samples of each controller type. Due to "
"a variety of factors, the timing of an individual motor controller may vary "
"slightly. In order to definitively eliminate \"humming\" (midpoint signal "
"interpreted as slight movement in one direction) and drive the controller "
"all the way to each extreme, calibrating the controllers is still "
"recommended. In general, the calibration procedure for each controller "
"involves putting the controller into calibration mode then driving the input"
" signal to each extreme, then back to the midpoint. For examples on how to "
"use these motor controllers in your code, see :doc:`Using Motor Controllers "
"in Code/Using PWM Motor Controllers <using-motor-controllers>`"
msgstr ""
"Entonces, sí WPLib se encarga de todo este escalado, ¿Por qué tendrías que "
"calibrar el controlador de motor? Los valores que usa WPLib para el escalado"
" son aproximados, basados en la medición de un número de muestras de cada "
"tipo de controlador. Debido a una variedad de factores, la sincronización de"
" un controlador de motor individual puede variar ligeramente. Para eliminar "
"definitivamente el \"zumbido\" (señal de punto medio interpretada como un "
"ligero movimiento en una dirección) y conducir el controlador hasta cada "
"extremo, se recomienda calibrar los controladores. En general, el "
"procedimiento de calibración para cada controlador consiste en poner el "
"controlador en modo en modo de calibración y luego conducir la señal de "
"entrada a cada extremo, y luego volver al punto medio. Para ver ejemplos de "
"cómo utilizar estos controladores de motor en su código, consulte "
":doc:`Using Motor Controllers in Code/Using PWM Motor Controllers <using-"
"motor-controllers>`"
