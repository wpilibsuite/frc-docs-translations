# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Diana Ramos <dianaracasas@gmail.com>, 2020
# Heber Sepúlveda <heber.sepulveda.m@gmail.com>, 2021
# Paulina Maynez <paump22@hotmail.com>, 2021
# Austin Shalit <austinshalit@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-21 16:03+0000\n"
"PO-Revision-Date: 2020-10-04 04:16+0000\n"
"Last-Translator: Austin Shalit <austinshalit@gmail.com>, 2021\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:4
msgid "State-Space Controller Walkthrough"
msgstr "Tutorial de Controlador de Estado-Espacio"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:6
msgid ""
"Before following this tutorial, readers are recommended to have read an "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."
msgstr ""
"Antes de seguir este tutorial, se recomienda que los lectores hayan leído "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"intro:Introduction to state-space control`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:8
msgid ""
"The goal of this tutorial is to provide \"end-to-end\" instructions on "
"implementing a state-space controller for a flywheel.  By following this "
"tutorial, readers will learn how to:"
msgstr ""
"La meta de este tutorial es proveer \"de principio a fin\" instrucciones "
"para implementar el controlador de estado-espacio para un volante. Siguiendo"
" este tutorial, los lectores podrán aprender a hacer:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:10
msgid ""
"Create an accurate state-space model of a flywheel using :term:`system "
"identification` or CAD software."
msgstr ""
"Crear un modelo de estado-espacio preciso de un volante usando :term:`system"
" identification` o software CAD."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:11
msgid ""
"Implement a Kalman Filter to filter encoder velocity measurements without "
"lag."
msgstr ""
"Implementar un Filtro Kalman para filtrar las mediciones de velocidad del "
"encoder sin retraso."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:12
msgid ""
"Implement a :ref:`LQR <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` feedback controller which, when"
" combined with model-based feedforward, will generate voltage :term:`inputs "
"<input>` to drive the flywheel to a :term:`reference`."
msgstr ""
"Implementar un controlador de retroalimentación :ref:`LQR "
"<docs/software/advanced-controls/state-space/state-space-intro:The Linear-"
"Quadratic Regulator>` que, cuando lo combinamos con uno de feedforward "
"basado en modelo, generará :term:`inputs 1<input>` de voltaje para manejar "
"el volante a una :term:`reference`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:14
msgid ""
"This tutorial is intended to be approachable for teams without a great deal "
"of programming expertise.  While the WPILib library offers significant "
"flexibility in the manner in which its state-space control features are "
"implemented, closely following the implementation outlined in this tutorial "
"should provide teams with a basic structure which can be reused for a "
"variety of state-space systems."
msgstr ""
"Este tutorial tiene el propósito de ser alcanzable para los equipos sin "
"experiencia en programación o buen manejo de ella. Mientras que la librería "
"de WPILib ofrece cierta flexibilidad en el modo que las características del "
"control de estado-espacio son implementadas, siguen de cerca la "
"implementación descrita en este tutorial debe dar a los equipos una "
"estructura base que pueda ser reusada para sistemas variados de estado-"
"espacio."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:16
msgid ""
"The full example is available in the state-space flywheel (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" and state-space flywheel system identification (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" example projects."
msgstr ""
"Los ejemplos completos están disponibles en el flywheel de estado-espacio "
"(`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)"
" y de identificación del sistema del flywheel de estado-espacio (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheelsysid/Robot.java>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheelSysId/cpp/Robot.cpp>`__)"
" proyectos de ejemplo."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:19
msgid "Why Use State-Space Control?"
msgstr "¿Por qué usar Control de Estado-Espacio?"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:21
msgid ""
"Because state-space control focuses on creating an accurate model of our "
"system, we can accurately predict how our :term:`model` will respond to "
"control :term:`inputs <input>`. This allows us to simulate our mechanisms "
"without access to a physical robot, as well as easily choose :term:`gains "
"<gain>` that we know will work well. Having a model also allows us to create"
" lagless filters, such as Kalman Filters, to optimally filter sensor "
"readings."
msgstr ""
"Porque el control de estado-espacio se enfoca en crear un modelo preciso de "
"nuestro sistema, podemos predecir de manera certera como el :term:`modelo` "
"responderá para controlar :term:`entradas <input>`. Esto nos permite simular"
" nuestros mecanismos sin acceso al robot físico, como bien escoger "
"fácilmente las :term:`ganancias <gain>` que sabemos que trabajarán bien. "
"Teniendo un modelo también nos permite crear filtros sin retrasos, como los "
"Filtros Kalman, para filtrar óptimamente las lecturas del sensor."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:24
msgid "Modeling Our Flywheel"
msgstr "Modelando Nuestro Flywheel"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:26
msgid ""
":ref:`Recall <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` that continuous state-space systems "
"are modeled using the following system of equations:"
msgstr ""
":ref:`Recuerde <docs/software/advanced-controls/state-space/state-space-"
"intro:What is State-Space Notation?>` que el sistema continuo de estado-"
"espacio son modelados usando el siguiente sistema de ecuaciones:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:28
msgid ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"
"\n"
msgstr ""
"\\dot{\\mathbf{x}} &= \\mathbf{A}\\mathbf{x} + \\mathbf{B}\\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\mathbf{C}\\mathbf{x} + \\mathbf{D}\\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:36
msgid ""
"The first step of building up our state-space system is picking our system's"
" states. We can pick anything we want as a state -- we could pick completely"
" unrelated states if we wanted -- but it helps to pick states that are "
"important. We can include :term:`hidden states <hidden state>` in our state "
"(such as elevator velocity if we were only able to measure its position) and"
" let our Kalman Filter estimate their values. Remember that the states we "
"choose will be driven towards their respective :term:`references "
"<reference>` by the feedback controller (typically the :ref:`Linear-"
"Quadratic Regulator <docs/software/advanced-controls/state-space/state-"
"space-intro:The Linear-Quadratic Regulator>` since it's optimal)."
msgstr ""
"El primer paso para construir nuestro sistema estado-espacio es elegir "
"nuestros estados del sistema. Podemos elegir cualquiera que queramos como "
"estado -- podemos elegir estados completamente diferentes si queremos -- "
"pero ayudará si elegimos estados que son importantes. Podemos incluir "
":term:`estados ocultos <hidden state>` en nuestro estado (como la velocidad "
"del elevador si solo podemos medir su posición) y dejar al Filtro Kalman "
"estimar sus valores. Recuerda que los estados que elegimos serán conducidos "
"hacia sus respectivas :term:`referencias <reference>` por el controlador de "
"retroalimentación (normalmente el  :ref:`Regulador Lineal Cuadrático "
"<docs/software/advanced-controls/state-space/state-space-intro:The Linear-"
"Quadratic Regulator>` ya que es el óptimo)."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:38
msgid ""
"For our flywheel, we care only about one state: its velocity. While we could"
" chose to also model its acceleration, the inclusion of this state isn't "
"necessary for our system."
msgstr ""
"Para nuestro volante, solo nos importa un estado: su velocidad. Mientras que"
" podamos elegir también modelar su aceleración, incluir este estado no es "
"necesario para nuestro sistema."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:40
msgid ""
"Next, we identify the :term:`inputs <input>` to our system. Inputs can be "
"thought of as things we can put \"into\" our system to change its state. In "
"the case of the flywheel (and many other single-jointed mechanisms in FRC\\ "
"|reg|), we have just one input: voltage applied to the motor. By choosing "
"voltage as our input (over something like motor duty cycle), we can "
"compensate for battery voltage sag as battery load increases."
msgstr ""
"A continuación, identificamos los :term:`inputs <input>` a nuestro sistema. "
"Las entradas se pueden considerar como cosas que podemos poner \"en\" "
"nuestro sistema para cambiar su estado. En el caso del flywheel (y muchos "
"otros mecanismos de articulación simple en FRC\\ |reg|), tenemos solo una "
"entrada: voltaje aplicado al motor. Al elegir el voltaje como nuestra "
"entrada (sobre algo como el ciclo de trabajo del motor), podemos compensar "
"la caída del voltaje de la batería a medida que aumenta la carga de la "
"batería."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:42
msgid ""
"A continuous-time state-space system writes :term:`x-dot`, or the "
"instantaneous rate of change of the system's :term:`system`\\'s state, as "
"proportional to the current :term:`state` and :term:`inputs <input>`. "
"Because our state is angular velocity, :math:`\\mathbf{\\dot{x}}` will be "
"the flywheel's angular acceleration."
msgstr ""
"Un sistema de tiempo continuo de estado-espacio escribe :term:`x-dot`, o la "
"velocidad instantánea de cambio del :term:`sistema`\\ estado del sistema, "
"proporcional al :term:`estado` actual y las :term:`entradas <input>`. Porque"
" nuestro estado es velocidad angular, :math:`\\mathbf{\\dot{x}}` va a ser la"
" aceleración angular del volante."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:44
msgid ""
"Next, we will model our flywheel as a continuous-time state-space system. "
"WPILib's ``LinearSystem`` will convert this to discrete-time internally. "
"Review :ref:`state-space notation <docs/software/advanced-controls/state-"
"space/state-space-intro:What is State-Space Notation?>` for more on "
"continuous-time and discrete-time systems."
msgstr ""
"Después, modelaremos nuestro volante como un sistema de tiempo continuo de "
"estado-espacio. ``LinearSystem`` de WPILib convertirá este tiempo discreto "
"internamente. Repase :ref:`notación de estado-espacio "
"<docs/software/advanced-controls/state-space/state-space-intro:What is "
"State-Space Notation?>` para más sistemas de tiempo continuo y discreto."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:47
msgid "Modeling with System Identification"
msgstr "Modelando con Identificación de Sistema"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:49
msgid ""
"To rewrite this in state-space notation using :term:`system identification`,"
" we recall from the flywheel :ref:`state-space notation example "
"<docs/software/advanced-controls/state-space/state-space-intro:State-space "
"Notation Example: Flywheel from kV and kA>`, where we rewrote the following "
"equation in terms of :math:`\\mathbf{a}`."
msgstr ""
"Para reescriir en notación de estado-espacio usando :term:`identificación de"
" sistema`, nosotros volvemos a llamar desde el volante :ref:`ejemplo de "
"notación de estado-espacio <docs/software/advanced-controls/state-"
"space/state-space-intro:State-space Notation Example: Flywheel from kV and "
"kA>`, donde reescribiremos la siguiente ecuación en terminos de "
":math:`\\mathbf{a}`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:51
msgid ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"
"\n"
msgstr ""
"V = kV \\cdot \\mathbf{v} + kA \\cdot \\mathbf{a}\\\\\n"
"\\mathbf{a} = \\mathbf{\\dot{v}} = \\begin{bmatrix}\\frac{-kV}{kA}\\end{bmatrix} v + \\begin{bmatrix}\\frac{1}{kA}\\end{bmatrix} V\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:55
msgid ""
"Where :math:`\\mathbf{v}` is flywheel velocity, :math:`\\mathbf{a}` and "
":math:`\\mathbf{\\dot{v}}` are flywheel acceleration, and :math:`V` is "
"voltage. Rewriting this with the standard convention of :math:`\\mathbf{x}` "
"for the state vector and :math:`\\mathbf{u}` for the input vector, we find:"
msgstr ""
"Donde :math:`\\mathbf{v}` es la velocidad del volante, :math:`\\mathbf{a}` y"
" :math:`\\mathbf{\\dot{v}}` son la aceleración del volante, y :math:`V` es "
"el voltaje. Reescribiendo esto como la convención estándar de "
":math:`\\mathbf{x}` para el vector del estado y :math:`\\mathbf{u}` para el "
"vector de entrada, encontramos:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:57
msgid ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} = \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:60
msgid ""
"The second part of state-space notation relates the system's current "
":term:`state` and :term:`inputs <input>` to the :term:`output`. In the case "
"of a flywheel, our output vector :math:`\\mathbf{y}` (or things that our "
"sensors can measure) is our flywheel's velocity, which also happens to be an"
" element of our :term:`state` vector :math:`\\mathbf{x}`. Therefore, our "
"output matrix is :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, and"
" our system feedthrough matrix is :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Writing this out in continuous-time state-space notation "
"yields the following."
msgstr ""
"La segunda parte de la notación de estado-espacio relata que el "
":term:`estado` actual del sistema y :term:`entradas <input>` a la "
":term:`salida`. En caso de un volante, nuestro vector de salida "
":math:`\\mathbf{y}` (o cosas que pueda medir un sensor) es la velocidad de "
"nuestro volante, que también resulta ser un elemento de nuestro vector de "
":term:`estado` :math:`\\mathbf{x}`. Por lo tanto, nuestra matriz de salida "
"es :math:`\\mathbf{C} = \\begin{bmatrix}1 \\end{bmatrix}`, y nuestra matriz "
"de sistema de alimentación es :math:`\\mathbf{D} = \\begin{bmatrix}0 "
"\\end{bmatrix}`. Escribiendo esto en notación de estado-espacio con tiempo "
"continuo produce lo siguiente."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:62
msgid ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"
"\n"
msgstr ""
"\\mathbf{\\dot{x}} &= \\begin{bmatrix}\\frac{-kV}{kA} \\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}\\frac{1}{kA} \\end{bmatrix} \\mathbf{u} \\\\\n"
"\\mathbf{y} &= \\begin{bmatrix}1\\end{bmatrix} \\mathbf{x} + \\begin{bmatrix}0\\end{bmatrix} \\mathbf{u}\n"
"\n"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:66
msgid ""
"The ``LinearSystem`` class contains methods for easily creating state-space "
"systems identified using :term:`system identification`. This example shows a"
" flywheel model with a kV of 0.023 and a kA of 0.001:"
msgstr ""
"La clase ``LinearSystem`` contiene métodos para crear fácilmente sistemas de"
" estado-espacio identificados usando :term:`system identification`. Este "
"ejemplo muestra un modelo de volante con un kV de 0.023 y un kA de 0.001:"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:93
msgid "Modeling Using Flywheel Moment of Inertia and Gearing"
msgstr "Modelando Usando el Volante con Momento de Inercia y Engranaje"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:95
msgid ""
"A flywheel can also be modeled without access to a physical robot, using "
"information about the motors, gearing and flywheel's :term:`moment of "
"inertia`. A full derivation of this model is presented in Section 8.2.1 of  "
"`Controls Engineering in FRC <https://file.tavsys.net/control/controls-"
"engineering-in-frc.pdf>`__."
msgstr ""
"Un volante también puede ser modelado sin el acceso a un robot físico, "
"usando información sobre los motores, engranes y el :term:`momento de "
"inercia` del volante. Una derivación completa de este modelo se presenta en "
"la Sección 8.2.1 de `Controles de Ingeniería en FRC "
"<https://file.tavsys.net/control/controls-engineering-in-frc.pdf>`__."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:97
msgid ""
"The ``LinearSystem`` class contains methods to easily create a model of a "
"flywheel from the flywheel's motors, gearing and :term:`moment of inertia`. "
"The moment of inertia can be calculated using CAD software or using physics."
" The examples used here are detailed in the flywheel example project (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."
msgstr ""
"La clase ``LinearSystem`` contiene métodos para crear fácilmente un modelo "
"de un volante desde los motores, engranes y :term:`momento de inercia` del "
"volante. El momento de inercia puede ser calculado usado el software CAD o "
"usando física. Los ejemplos utilizados aquí están detallados en el proyecto "
"de ejemplo del volante (`Java "
"<https://github.com/wpilibsuite/allwpilib/tree/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/statespaceflywheel>`__/`C++"
" "
"<https://github.com/wpilibsuite/allwpilib/blob/3b283ab9aaf9d23d7870b9c3723d03760a0bd378/wpilibcExamples/src/main/cpp/examples/StateSpaceFlywheel/cpp/Robot.cpp>`__)."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:99
msgid ""
"For WPILib's state-space classes, gearing is written as output over input --"
" that is, if the flywheel spins slower than the motors, this number should "
"be greater than one."
msgstr ""
"Para las clases de estado-espacio de WIPLib, los engranes son escritos como "
"salida en vez de entrada -- es esto, si el volante gira más lento que los "
"motores, este número debe ser mayor que uno."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:101
msgid ""
"The C++ LinearSystem class uses :ref:`the C++ Units Library "
"<docs/software/basic-programming/cpp-units:The C++ Units Library>` to "
"prevent unit mixups and assert dimensionality."
msgstr ""
"La clase LinearSystem de C++ usa :ref:`la Libreria de Unidades de C++ "
"<docs/software/basic-programming/cpp-units:The C++ Units Library>` para "
"prevenir mezla de unidades y afirmar dimensionalmente."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:128
msgid "Kalman Filters: Observing Flywheel State"
msgstr "Filtros Kalman: Observando el Estado del Flywheel"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:130
msgid ""
"Kalman filters are used to filter our velocity measurements using our state-"
"space model to generate a state estimate :math:`\\mathbf{\\hat{x}}`. As our "
"flywheel model is linear, we can use a Kalman filter to estimate the "
"flywheel's velocity. WPILib's Kalman filter takes a ``LinearSystem`` (which "
"we found above), along with standard deviations of model and sensor "
"measurements. We can adjust how \"smooth\" our state estimate is by "
"adjusting these weights. Larger state standard deviations will cause the "
"filter to \"distrust\" our state estimate and favor new measurements more "
"highly, while larger measurement standard deviations will do the opposite."
msgstr ""
"Los filtros Kalman son usados para filtrar nuestras mediciones de velocidad "
"usando nuestro modelo de estado-espacio para generar un estado estimado "
":math:`\\mathbf{\\hat{x}}`. Como nuestro modelo de volante es lineal, "
"podemos usar un filtro Kalman para estimar la velocidad del volante. EL "
"filtro Kalman de WPILib toma un ``LinearSystem`` (que encontramos arriba), a"
" lo largo con derivaciones estándar de mediciones de modelo y sensores. "
"Podemos ajustar que tan \"fluido\" es nuestra estimación de estado es por "
"ajustar estas cargas. Las desviaciones estándar de estado más grandes harán "
"que el filtro \"desconfíe\" de nuestra estimación estatal y favorezca más "
"las nuevas mediciones, mientras que las desviaciones estándar de las "
"mediciones más grandes harán lo contrario."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:132
msgid ""
"In the case of a flywheel we start with a state standard deviation of 3 "
"rad/s and a measurement standard deviation of 0.01 rad/s. These values are "
"up to the user to choose -- these weights produced a filter that was "
"tolerant to some noise but whose state estimate quickly reacted to external "
"disturbances for *a* flywheel -- and should be tuned to create a filter that"
" behaves well for your specific flywheel. Graphing states, measurements, "
"inputs, references, and outputs over time is a great visual way to tune "
"Kalman filters."
msgstr ""
"En el caso de un volante comenzamos con una desviación estándar de estado de"
" 3 rad/s y una desviación estándar de medición de 0.01 rad/s. Estos valores "
"son a elección del usuario -- estos pesos produjeron un filtro que era "
"tolerante a algo de ruido pero cuya estimación de estado reaccionó "
"rápidamente a perturbaciones externas para *un* volante de inercia -- y "
"deben ajustarse para crear un filtro que se comporte bien para su volante "
"específico. Graficar estados, medidas, entradas, referencias y salidas a lo "
"largo del tiempo es una excelente forma visual de ajustar los filtros de "
"Kalman."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:137
msgid ""
"The above graph shows two differently tuned Kalman filters, as well as a "
":ref:`single-pole IIR filter <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` and a "
":ref:`docs/software/advanced-controls/filters/median-filter:Median Filter`. "
"This data was collected with a shooter over ~5 seconds, and four balls were "
"run through the shooter (as seen in the four dips in velocity). While there "
"are no hard rules on choosing good state and measurement standard "
"deviations, they should in general be tuned to trust the model enough to "
"reject noise while reacting quickly to external disturbances."
msgstr ""
"La gráfica de arriba muestra 2 diferentes ajustes del filtro Kalman, así "
"como :ref:`filtro IIR con un polo <docs/software/advanced-"
"controls/filters/linear-filter:Linear Filters>` y un "
":ref:`docs/software/advanced-controls/filters/median-filter:Median Filter`. "
"Estos datos fueron recolectados con un lanzador arriba de ~5 segundos, y "
"cuatro bolas pasaron a través del lanzador (como se ve en las cuatro caídas "
"de velocidad). Si bien no existen reglas estrictas para elegir un buen "
"estado y medir las desviaciones estándar, en general deben ajustarse para "
"confiar en el modelo lo suficiente como para rechazar el ruido y reaccionar "
"rápidamente a las perturbaciones externas."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:139
msgid ""
"Because the feedback controller computes error using the :term:`x-hat` "
"estimated by the Kalman filter, the controller will react to disturbances "
"only as quickly the filter's state estimate changes. In the above chart, the"
" upper left plot (with a state standard deviation of 3.0 and measurement "
"standard deviation of 0.2) produced a filter that reacted quickly to "
"disturbances while rejecting noise, while the upper right plot shows a "
"filter that was barely affected by the velocity dips."
msgstr ""
"Dado que el controlador de retroalimentación calcula el error utilizando el "
":término:`x-hat` estimado por el filtro Kalman, el controlador reaccionará a"
" las perturbaciones sólo con la rapidez con la que cambie la estimación de "
"estado del filtro. En el gráfico anterior, el gráfico superior de la "
"izquierda (con una desviación estándar del estado de 3,0 y una desviación "
"estándar de la medición de 0,2) produjo un filtro que reaccionó rápidamente "
"a las perturbaciones mientras rechazaba el ruido, mientras que el gráfico "
"superior de la derecha muestra un filtro que apenas se vio afectado por las "
"caídas de velocidad."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:165
msgid ""
"Because Kalman filters use our state-space model in the "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict step`, it is important that our model is as accurate as "
"possible. One way to verify this is to record a flywheel's input voltage and"
" velocity over time, and replay this data by calling only ``predict`` on the"
" Kalman filter. Then, the kV and kA gains (or moment of inertia and other "
"constants) can be adjusted until the model closely matches the recorded "
"data."
msgstr ""
"Porque los filtros Kalman usan nuestros modelos de estado-espacio en el "
":ref:`docs/software/advanced-controls/state-space/state-space-"
"observers:Predict step`, es importante que nuestro modelo es tan preciso "
"como es posible. Una manera de verificar esto es registrar el voltaje de "
"entrada del volante y la velocidad en el tiempo, y vuelve a reproducir esta "
"información llamando solo ``predict`` en el filtro Kalman. Después, las "
"ganancias de kV y kA (o el momento de inercia y otras constantes) pueden ser"
" justadas hasta que el modelo se acerque a igualar los datos registrados."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "Todo"
msgstr "QuéHacer"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:167
msgid "do we need to elaborate on this^ more?"
msgstr "¿necesitamos hablar de esto^ más?"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:170
msgid "Linear-Quadratic Regulators and Plant Inversion Feedforward"
msgstr "Reguladores Lineales Cuadráticos y Feedforward de Inversión de Planta"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:172
msgid ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` finds a feedback controller to drive our "
"flywheel :term:`system` to its :term:`reference`. Because our flywheel has "
"just one state, the control law picked by our LQR will be in the form "
":math:`\\mathbf{u = K (r - x)}` where :math:`\\mathbf{K}` is a 1x1 matrix; "
"in other words, the control law picked by LQR is simply a proportional "
"controller, or a PID controller with only a P gain. This gain is chosen by "
"our LQR based on the state excursion and control efforts we pass it. More on"
" tuning LQR controllers can be found in the :ref:`LQR application example "
"<docs/software/advanced-controls/state-space/state-space-intro:LQR: example "
"application>`."
msgstr ""
":ref:`docs/software/advanced-controls/state-space/state-space-intro:The "
"Linear-Quadratic Regulator` encuentra un controlador de retroalimentación "
"para manejar nuestro :term:`sistema` de volante a su :term:`referencia`. "
"Porque nuestro volante solo tiene un estado, la ley de control tomada por "
"nuestro LQR va a estar en la forma :math:`\\mathbf{u = K (r - x)}` donde "
":math:`\\mathbf{K}` es una matriz de 1x1; en otras palabras, la ley de "
"control tomada por el LQR es simplemente un controlador proporcional, o un "
"controlador PID con solo ganancia P. Esta ganancia es elegida por nuestro "
"LQR en función de la excursión de estado y los esfuerzos de control que la "
"pasamos. Más de la afinación de controladores LQR puede encontrarse en "
":ref:`ejemplo de aplicación de LQR  <docs/software/advanced-controls/state-"
"space/state-space-intro:LQR: example application>`."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:174
msgid ""
"Much like ``SimpleMotorFeedforward`` can be used to generate feedforward "
"voltage inputs given kS, kV, and kA constants, the Plant Inversion "
"Feedforward class generate :ref:`feedforward <docs/software/advanced-"
"controls/state-space/state-space-intro:Visualizing Feedforward>` voltage "
"inputs given a state-space system. The voltage commands generated by the "
"``LinearSystemLoop`` class are the sum of the feedforward and feedback "
"inputs."
msgstr ""
"Mucho como ``SimpleMotorFeedforward`` puede ser usado para generar la "
"entrada de  voltaje del feedfoward dadas las constantes kS, kV, kA, la clase"
" Feedforward de Inversión de Planta genera entradas de voltaje de "
":ref:`feedforward <docs/software/advanced-controls/state-space/state-space-"
"intro:Visualizing Feedforward>` dado un sistema de estado-espacio. Los "
"comandos de voltaje generados por la clase ``LinearSystemLoop`` son la suma "
"de las entradas de feedfoward y de retroaliemntación."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:201
msgid "Bringing it All Together: LinearSystemLoop"
msgstr "Trayendo todo Junto: LinearSystemLoop"

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:203
msgid ""
"LinearSystemLoop combines our system, controller, and observer that we "
"created earlier. The constructor shown will also instantiate a "
"``PlantInversionFeedforward``."
msgstr ""
"LinearSystemLoop combina nuestro sistema, controlador, y observador que "
"creamos antes. El constructor que se muestra también crea una instancia "
"``PlantInversionFeedforward``."

#: ../../frc-docs/source/docs/software/advanced-controls/state-space/state-space-flywheel-walkthrough.rst:229
msgid ""
"Once we have our ``LinearSystemLoop``, the only thing left to do is actually"
" run it. To do that, we'll periodically update our Kalman filter with our "
"new encoder velocity measurements and apply new voltage commands to it. To "
"do that, we first set the :term:`reference`, then ``correct`` with the "
"current flywheel speed, ``predict`` the Kalman filter into the next "
"timestep, and apply the inputs generated using ``getU``."
msgstr ""
"Una vez que tenemos nuestro ``LinearSystemLoop``, lo único que queda por "
"hacer es ejecutarlo. Para hacer eso, actualizaremos periódicamente nuestro "
"filtro Kalman con nuestras nuevas medidas de velocidad del codificador y le "
"aplicaremos nuevos comandos de voltaje. Para hacer eso, primero establecemos"
" el :term:`referencia`, luego ``corregir`` con la velocidad actual del "
"volante, ``predecir`` el filtro de Kalman en el siguiente paso de tiempo y "
"aplicar las entradas generadas usando ``getU``."
