# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2022\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-07-26 04:30+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2022\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=3; plural=(n == 0 || n == 1) ? 0 : n != 0 && n % 1000000 == 0 ? 1 : 2;\n"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:2
msgid "The C++ Units Library"
msgstr "La librairie d'unités C++"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:7
msgid "Using the Units Library"
msgstr "Utilisation de la librairie d'unités"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:9
msgid ""
"The units library is a header-only library. You must include the relevant "
"header in your source files for the units you want to use. Here's a list of "
"available units."
msgstr ""
"La librairie d'unités est une bibliothèque d'en-tête uniquement. Vous devez "
"inclure l'en-tête approprié dans vos fichiers source pour les unités que "
"vous souhaitez utiliser. Voici une liste des unités disponibles."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:53
msgid ""
"The ``units/math.h`` header provides unit-aware functions like "
"``units::math::abs()``."
msgstr ""
"L'en-tête ``units/math.h`` fournit des fonctions adaptées aux unités telles "
"que ``units::math::abs()``."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:56
msgid "Unit Types and Container Types"
msgstr "Types d'unités et types de conteneurs"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:58
msgid ""
"The C++ units library is based around two sorts of type definitions: unit "
"types and container types."
msgstr ""
"La librairie d'unités C++ est basée sur deux sortes de définitions de types:"
" les types d'unités et les types de conteneurs."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:61
msgid "Unit Types"
msgstr "Types d'unités"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:63
msgid ""
"Unit types correspond to the abstract concept of a unit, without any actual "
"stored value.  Unit types are the fundamental \"building block\" of the "
"units library - all unit types are defined constructively (using the "
"``compound_unit`` template) from a small number of \"basic\" unit types "
"(such as ``meters``, ``seconds``, etc)."
msgstr ""
"Les types d'unités correspondent au concept abstrait d'une unité, sans "
"aucune valeur stockée réelle. Les types d'unités sont le \"bloc de "
"construction\" fondamental de la librairie d'unités - tous les types "
"d'unités sont définis de manière constructive (en utilisant le modèle "
"``compound_unit``) à partir d'un petit nombre de types d'unités \"de base\" "
"(tels que ``mètres``, ``secondes``, etc.)."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:68
msgid "Container Types"
msgstr "Types de conteneurs"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:70
msgid ""
"Container types correspond to an actual quantity dimensioned according to "
"some unit - that is, they are what actually hold the numerical value. "
"Container types are constructed from unit types with the ``unit_t`` "
"template.  Most unit types have a corresponding container type that has the "
"same name suffixed by ``_t`` - for example, the unit type ``units::meter`` "
"corresponds to the container type ``units::meter_t``."
msgstr ""
"Les types de conteneurs correspondent à une quantité réelle dimensionnée en "
"fonction d'une unité, c'est-à-dire qu'ils détiennent réellement la valeur "
"numérique. Les types de conteneurs sont construits à partir de types "
"d'unités avec le modèle ``unit_t``. La plupart des types d'unités ont un "
"type de conteneur correspondant qui porte le même nom suffixé par ``_t`` - "
"par exemple, le type d'unité ``units :: meter`` correspond au type de "
"conteneur ``units :: meter_t``."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:72
msgid ""
"Whenever a specific quantity of a unit is used (as a variable or a method "
"parameter), it will be an instance of the container type.  By default, "
"container types will store the actual value as a ``double`` - advanced users"
" may change this by calling the ``unit_t`` template manually."
msgstr ""
"Chaque fois qu'une quantité spécifique d'une unité est utilisée (en tant que"
" variable ou paramètre de méthode), ce sera une instance du type de "
"conteneur. Par défaut, les types de conteneurs stockent la valeur réelle "
"sous forme de ``double`` - les utilisateurs plus avancés peuvent changer "
"cela en appelant le modèle ``unit_t`` manuellement."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:74
msgid ""
"A full list of unit and container types can be found in the `documentation "
"<https://github.com/nholthaus/units#namespaces>`__."
msgstr ""
"Vous trouverez une liste complète des types d’unités et de conteneurs dans "
"la `documentation <https://github.com/nholthaus/units#namespaces>`__."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:77
msgid "Creating Instances of Units"
msgstr "Création d'instances d'unités"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:79
msgid ""
"To create an instance of a specific unit, we create an instance of its "
"container type:"
msgstr ""
"Pour créer une instance d'une unité spécifique, nous créons une instance de "
"son type de conteneur:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:86
msgid ""
"Alternatively, the units library has `type literals "
"<https://en.cppreference.com/w/cpp/language/user_literal>`__ defined for "
"some of the more common container types.  These can be used in conjunction "
"with type inference via ``auto`` to define a unit more succinctly:"
msgstr ""
"Alternativement, la librairie d'unités a des `types de littéraux "
"<https://en.cppreference.com/w/cpp/language/user_literal>`__ définis pour "
"certains des types de conteneurs les plus courants. Ceux-ci peuvent être "
"utilisés en conjonction avec l'inférence de type via ``auto`` pour définir "
"une unité plus succinctement:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:93
msgid ""
"Units can also be initialized using a value of an another container type, as"
" long as the types can be converted between one another. For example, a "
"``meter_t`` value can be created from a ``foot_t`` value."
msgstr ""
"Les unités peuvent également être initialisées à l'aide d'une valeur d'un "
"autre type de conteneur, en autant que les types peuvent être convertis "
"entre eux. Par exemple, une valeur ``mètre_t`` peut être créée à partir "
"d'une valeur ``pied_t``."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:100
msgid ""
"In fact, all container types representing convertible unit types are "
"*implicitly convertible*.  Thus, the following is perfectly legal:"
msgstr ""
"En fait, tous les types de conteneurs représentant des types d'unités "
"convertibles sont *implicitement convertibles*. Ainsi, ce qui suit est "
"parfaitement légal:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:106
msgid ""
"In short, we can use *any* unit of length in place of *any other* unit of "
"length, anywhere in our code; the units library will automatically perform "
"the correct conversion for us."
msgstr ""
"En bref, nous pouvons utiliser *n'importe quelle* unité de longueur à la "
"place de *toute autre* unité de longueur, n'importe où dans notre code; la "
"librairie d'unités effectuera automatiquement la conversion correcte pour "
"nous."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:109
msgid "Performing Arithmetic with Units"
msgstr "Exécution de l'arithmétique avec des unités"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:111
msgid ""
"Container types support all of the ordinary arithmetic operations of their "
"underlying data type, with the added condition that the operation must be "
"*dimensionally* sound.  Thus, addition must always be performed on two "
"compatible container types:"
msgstr ""
"Les types de conteneurs prennent en charge toutes les opérations "
"arithmétiques ordinaires de leur type de données sous-jacent, avec la "
"condition supplémentaire que l'opération doit être  *dimensionnellement* "
"valide. Ainsi, l'addition doit toujours être effectuée sur deux types de "
"conteneurs compatibles:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:124
msgid ""
"Multiplication may be performed on any pair of container types, and yields "
"the container type of a compound unit:"
msgstr ""
"La multiplication peut être effectuée sur n'importe quelle paire de types de"
" conteneurs et donne le type de conteneur d'une unité composée:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:126
msgid ""
"When a calculation yields a compound unit type, this type will only be "
"checked for validity at the point of operation if the result type is "
"specified explicitly.  If ``auto`` is used, this check will not occur.  For "
"example, when we divide distance by time, we may want to ensure the result "
"is, indeed, a velocity (i.e. ``units::meter_per_second_t``). If the return "
"type is declared as ``auto``, this check will not be made."
msgstr ""
"Lorsqu'un calcul donne un type d'unité composé, ce type ne sera vérifié pour"
" la validité au point d'opération que si le type de résultat est spécifié "
"explicitement. Si ``auto`` est utilisé, cette vérification n'aura pas lieu. "
"Par exemple, lorsque nous divisons la distance par le temps, nous pouvons "
"vouloir nous assurer que le résultat est bien une vitesse (c'est-à-dire "
"``units :: meter_per_second_t``). Si le type de retour est déclaré ``auto``,"
" cette vérification ne sera pas effectuée."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:139
msgid "``<cmath>`` Functions"
msgstr "Les fonctions ``<cmath>`` "

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:141
msgid ""
"Some ``std`` functions (such as ``clamp``) are templated to accept any type "
"on which the arithmetic operations can be performed.  Quantities stored as "
"container types will work with these functions without issue."
msgstr ""
"Certaines fonctions ``std`` (telles que ``clamp``) sont conçues pour "
"accepter tout type sur lequel les opérations arithmétiques peuvent être "
"effectuées. Les quantités stockées en tant que types de conteneurs "
"fonctionneront sans problème avec ces fonctions."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:143
msgid ""
"However, other ``std`` functions work only on ordinary numerical types (e.g."
" ``double``).  The units library's ``units::math`` namespace contains "
"wrappers for several of these functions that accept units. Examples of such "
"functions include ``sqrt``, ``pow``, etc."
msgstr ""
"Cependant, d'autres fonctions ``std`` ne fonctionnent que sur les types "
"numériques ordinaires (par exemple ``double``). L'espace de noms ``units :: "
"math`` de la librairie d'unités contient des \"wrappers\" pour plusieurs de "
"ces fonctions qui acceptent les unités. Des exemples de telles fonctions "
"incluent ``sqrt``, ``pow``, etc."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:151
msgid "Removing the Unit Wrapper"
msgstr "Retrait du \"Unit Wrapper\""

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:153
msgid ""
"To convert a container type to its underlying value, use the ``value()`` "
"method. This serves as an escape hatch from the units type system, which "
"should be used only when necessary."
msgstr ""
"Pour convertir un type de conteneur en sa valeur sous-jacente, utilisez la "
"méthode ``value()``. Cela sert de trappe d’évacuation du système de type "
"d'unités, qui ne doit être utilisé que lorsque c'est nécessaire."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:162
msgid "Example of the Units Library in WPILib Code"
msgstr "Exemple de la librairie d'unités dans le code WPILib"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:163
msgid ""
"Several arguments for methods in new features of WPILib (ex. "
":ref:`kinematics <docs/software/kinematics-and-odometry/intro-and-chassis-"
"speeds:What is kinematics?>`) use the units library. Here is an example of "
":ref:`sampling a trajectory <docs/software/advanced-"
"controls/trajectories/manipulating-trajectories:Sampling the trajectory>`."
msgstr ""
"Plusieurs arguments pour des méthodes dans les nouvelles fonctionnalités de "
"WPILib (ex. :ref:`kinematics <docs/software/kinematics-and-odometry/intro-"
"and-chassis-speeds:What is kinematics?>`)  utilisent la librairie d'unités. "
"Voici un exemple d\\' :ref:`échantillonnage d'une trajectoire "
"<docs/software/advanced-controls/trajectories/manipulating-"
"trajectories:Sampling the trajectory>`."

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:174
msgid ""
"Some WPILib classes represent objects that could naturally work with "
"multiple choices of unit types - for example, a motion profile might operate"
" on either linear distance (e.g. meters) or angular distance (e.g. radians)."
"  For such classes, the unit type is required as a template parameter:"
msgstr ""
"Certaines classes WPILib représentent des objets qui pourraient "
"naturellement fonctionner avec plusieurs choix de types d'unités - par "
"exemple, un profil de mouvement peut fonctionner sur une distance linéaire "
"(par exemple mètres) ou angulaire (par exemple radians). Pour ces classes, "
"le type d'unité est requis comme paramètre de modèle:"

#: ../../frc-docs/source/docs/software/basic-programming/cpp-units.rst:188
msgid ""
"For more detailed documentation, please visit the official `GitHub page "
"<https://github.com/nholthaus/units>`_ for the units library."
msgstr ""
"Pour une documentation plus détaillée, veuillez visiter la page officielle "
"`GitHub <https://github.com/nholthaus/units>`_ pour la librairie des unités."
