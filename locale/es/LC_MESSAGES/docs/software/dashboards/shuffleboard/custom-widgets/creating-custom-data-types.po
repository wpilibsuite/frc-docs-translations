# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Paulina Maynez <paump22@hotmail.com>, 2021
# Gibrán Verástegui <Gibranbasket1526@gmail.com>, 2021
# Sofia Fernandez <sofiafdz.val@gmail.com>, 2021
# Diana Ramos <dianaracasas@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-10-01 16:03+0000\n"
"PO-Revision-Date: 2021-06-22 22:05+0000\n"
"Last-Translator: Diana Ramos <dianaracasas@gmail.com>, 2021\n"
"Language-Team: Spanish (Mexico) (https://www.transifex.com/wpilib/teams/109324/es_MX/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: es_MX\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:2
msgid "Creating Custom Data Types"
msgstr "Crear tipos de datos personalizados"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:3
msgid ""
"Widgets allow us to control and visualize different types of data. This data"
" could be integers and doubles or even Java Objects. In order to display "
"these types of data using widgets, it is helpful to create a container class"
" for them. It is not necessary to create your own Data Class if the widget "
"will handle single fielded data types such as doubles, arrays, or strings."
msgstr ""
"Los widgets le permiten controlar y visualizar diferentes tipos de datos. "
"Estos datos podrían ser integers o doubles o incluso Objetos de Java. Para "
"visualizar estos tipos de datos utilizando widgets es útil crear una clase "
"contenedora para estos. No es necesario crear su propia clase de Datos si el"
" widget manejará tipos de datos con un solo campo, tales como doubles, "
"arrays o strings."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:6
msgid "Creating The Data Class"
msgstr "Crear Clase de Datos"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:7
msgid ""
"In this example, we will create a custom data type for a 2D Point and its x "
"and y coordinates. In order to create a custom data type class, it must "
"extend the abstract class `ComplexData "
"<https://github.com/wpilibsuite/shuffleboard/blob/main/api/src/main/java/edu/wpi/first/shuffleboard/api/data/ComplexData.java>`_."
" Your custom data class must also implement the ``asMap()`` method that "
"returns the represented data as a simple map as noted below with the "
"``@Override`` annotation:"
msgstr ""
"En este ejemplo, crearemos un tipo de datos personalizado para un punto 2D y"
" sus coordenadas x e y. Para crear una clase de tipo de datos personalizada,"
" debe extender la clase abstracta `ComplexData "
"<https://github.com/wpilibsuite/shuffleboard/blob/main/api/src/main/java/edu/wpi/first/shuffleboard/api/data/ComplexData.java>`_."
" Su clase de datos personalizados también debe implementar el método "
"``asMap()`` que devuelve los datos representados como un mapa simple como se"
" indica a continuación con la anotación ``@Override``:"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:33
msgid ""
"It is also good practice to override the default ``equals`` and ``hashcode``"
" methods to ensure that different objects are considered equivalent when "
"their fields are the same. The ``asMap()`` method should return the data "
"represented in a simple Map object as it will be mapped to the NetworkTables"
" entry it corresponds to. In this case, we can represent the point as its X "
"and Y coordinates and return a ``Map`` containing them."
msgstr ""
"También es una buena práctica anular los métodos por defecto ``equals`` y "
"``hashcode`` para asegurar que diferentes objetos se consideren equivalentes"
" cuando sus campos sean iguales. El método ``asMap()`` debe devolver los "
"datos representados en un simple objeto Map, ya que se mapeará a la entrada "
"de NetworkTables a la que corresponde. En este caso, podemos representar el "
"punto como sus coordenadas X e Y y devolver un ``Map`` que las contenga."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:59
msgid ""
"Other methods can be added to retrieve or edit fields and instance "
"variables, however, it is good practice to make these classes immutable to "
"prevent changing the source data objects. Instead, you can make a new copy "
"object instead of manipulating the existing object. For example, if we "
"wanted to change the y coordinate of our point, we can define the following "
"method:"
msgstr ""
"Otros métodos pueden añadirse para recuperar o editar campos y variables de "
"la instancia, sin embargo, es buena práctica hacer estas clases inmutables "
"para prevenir cambios en la fuente de datos. En cambio, puede realizar una "
"copia del objeto en lugar de manipular el objeto existente. Por ejemplo, si "
"quisiera cambiar la coordenada y de su punto, podría definir el siguiente "
"método:"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:67
msgid ""
"This creates a new ``MyPoint2D`` object and returns it with the new "
"y-coordinate. Same can be done for changing the x coordinate."
msgstr ""
"Esto crea un nuevo objeto ``MyPoint2D`` y lo regresa con una nueva "
"coordenada Y. Puede hacerse lo mismo para la coordenada X."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:70
msgid "Creating a Data Type"
msgstr "Crear un Tipo de Dato"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:71
msgid ""
"There are two different data types that can be made: Simple data types that "
"have only one field (ie. a single number or string), and Complex data types "
"that have multiple data fields (ie. multiple strings, multiple numbers)."
msgstr ""
"Se pueden crear dos tipos de datos: Tipos de datos simples que solo "
"contienen un campo (por ejemplo, un solo número o un string) y tipos de "
"datos complejos que contienen varios campos (por ejemplo, múltiples strings "
"o números)."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:73
msgid ""
"In order to define a simple data type, the class must extend the "
"``SimpleDataType<DataType>`` class with the data type needed and implement "
"the ``getDefaultValue()`` method. In this example, we will use a double as "
"our simple data type."
msgstr ""
"Para definir un tipo de dato simple, la clase debe extender la clase "
"``SimpleDataType<DataType>``  con el tipo de dato necesario e implementar el"
" método ``getDefaultValue()``. En este ejemplo, usaremos un double como su "
"tipo de dato simple."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:92
msgid ""
"The class constructor is set to private to ensure that only a single "
"instance of the data type will exist."
msgstr ""
"El constructor de la clase es privado para asegurar que una sola instancia "
"del tipo de dato exista"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:94
msgid ""
"In order to define a complex data type, the class must extend the "
"``ComplexDataType`` class and override the ``fromMap()`` and "
"``getDefaultValue()`` methods. We will use our MyPoint2D class as an example"
" to see what a complex data type class would look like."
msgstr ""
"Para definir un tipo de dato complejo, la clase debe extender la clase "
"``ComplexDataType`` y sobrescribir los métodos ``fromMap()`` y "
"``getDefaultValue()``. Se continuará usando como ejemplo la clase MyPoint2D "
"para demostrar cómo se ve una clase de tipos de datos complejos."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:123
msgid "The following code above works as noted:"
msgstr "El código de arriba funciona de la siguiente forma:"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:125
msgid ""
"The ``fromMap()`` method creates a new MyPoint2D using the values in the "
"NetworkTables entry it is bound to. The ``getOrDefault`` method will return "
"0.0 if it cannot get the entry values. The ``getDefaultValue`` will return a"
" new ``MyPoint2D`` object if no source is present."
msgstr ""
"El método ``fromMap()`` crea un nuevo MyPoint2D utilizando los valores de la"
" entrada de NetworkTables a la que está vinculado. El método "
"``getOrDefault`` devolverá 0.0 si no puede obtener los valores de la "
"entrada. El método ``getDefaultValue`` devolverá un nuevo objeto "
"``MyPoint2D`` si no hay ninguna fuente presente."

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:129
msgid "Exporting Data Type To Plugin"
msgstr "Exportar un tipo de dato al plugin"

#: ../../frc-docs/source/docs/software/dashboards/shuffleboard/custom-widgets/creating-custom-data-types.rst:130
msgid ""
"In order to have the data type be recognized by Shuffleboard, the plugin "
"must export them by overriding the ``getDataTypes`` method. For example,"
msgstr ""
"Para que Shuffleboard reconozca el tipo de dato, el plugin debe exportarlos "
"al sobrescribir el método ``getDataTypes``. Por ejemplo,"
