# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Eddie L Wright, 2023
# Jacob Lubecki, 2023
# 中本慧思, 2023
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2024\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-08-14 04:04+0000\n"
"PO-Revision-Date: 2020-04-25 02:01+0000\n"
"Last-Translator: 中本慧思, 2023\n"
"Language-Team: Japanese (https://app.transifex.com/wpilib/teams/109324/ja/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:4
msgid "Git Version Control Introduction"
msgstr "Gitバージョン管理の紹介"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:8
msgid ""
"`Git <https://git-scm.com/about>`_ is a Distributed Version Control System "
"(VCS) created by Linus Torvalds, also known for creating and maintaining the"
" Linux kernel. Version Control is a system for tracking changes of code for "
"developers. The advantages of Git Version Control are:"
msgstr ""
"`Git <https://git-scm.com/about>`_ "
"は、Linuxカーネルの作成とメンテナンスでも知られるリーナス・トーバルズによって作られた分散型バージョン管理システム（VCS）です。バージョン管理は、開発者がコードの変更を追跡するためのシステムです。Gitバージョン管理の利点は次の通りです："

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:10
msgid "Separation of testing environments into *branches*"
msgstr ""
"「テスト環境を分離する」ことができます！開発者が新しい機能や修正を加えるときに、本番環境や他の開発作業に影響を与えずにテストできるように、別々の環境 "
"（branch） を設けることを意味します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:11
msgid "Ability to navigate to a particular *commit* without removing history"
msgstr "履歴を削除せずに特定の *コミット* に移動する機能があります"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:12
msgid "Ability to manage *commits* in various ways, including combining them"
msgstr "コミットを組み合わせるなど、さまざまな方法で *コミット* を管理する能力"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:13
msgid "Various other features, see `here <https://git-scm.com/about>`__"
msgstr "さまざまなその他の機能は、 `こちら <https://git-scm.com/about>`__ をご覧ください！"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:16
msgid "Prerequisites"
msgstr "前提条件"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:18
msgid "This tutorial uses the Windows operating system"
msgstr "このチュートリアルでは、Windowsオペレーティングシステムを使用します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:20
msgid "You have to download and install Git from the following links:"
msgstr "以下のリンクからGitをダウンロードして、インストールしてください："

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:22
msgid "`Windows <https://git-scm.com/download/win>`_"
msgstr "`Windows <https://git-scm.com/download/win>`_"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:23
msgid "`macOS <https://git-scm.com/download/mac>`_"
msgstr "`macOS <https://git-scm.com/download/mac>`_"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:24
msgid "`Linux <https://git-scm.com/download/linux>`_"
msgstr "`Linux <https://git-scm.com/download/linux>`_"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:26
msgid ""
"You may need to add Git to your `path "
"<https://www.google.com/search?q=adding+git+to+path>`__"
msgstr ""
"Gitを `path <https://www.google.com/search?q=adding+git+to+path>`__ "
"に追加する必要があるかもしれません。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:29
msgid "Git Vocabulary"
msgstr "Gitの用語集"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:31
msgid "Git revolves around several core data structures and commands:"
msgstr "Gitは、いくつかの核となるデータ構造とコマンドを中心に回っています："

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:33
msgid ""
"**Repository:** the data structure of your code, including a ``.git`` folder"
" in the root directory"
msgstr "**リポジトリ - repository :** コードのデータ構造であり、ルートディレクトリに ``.git`` フォルダを含みます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:34
msgid ""
"**Commit:** a particular saved state of the repository, which includes all "
"files and additions"
msgstr "**コミット - commit :** リポジトリの特定の保存された状態で、すべてのファイルと追加が含まれます"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:35
msgid ""
"**Branch:** a means of grouping a set of commits. Each branch has a unique "
"history. This is primarily used for separating development and stable "
"branches."
msgstr ""
"**ブランチ - branch :** 一連のコミットをグループ化するものです。各ブランチは独自の履歴を持ちます。これは頻繁的に、「develop」 "
"（継続的な開発のために頻繁に変更される）ブランチと「stable」 機能リリースの印として使われ、ほとんど変更されないブランチを分けるために使われます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:36
msgid "**Push:** update the remote repository with your local changes"
msgstr "**プッシュ - push :** ローカルの変更をリモートリポジトリに更新します"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:37
msgid "**Pull:** update your local repository with the remote changes"
msgstr "**プル - pull :** リモートの変更をローカルリポジトリに更新します"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:38
msgid "**Clone:** retrieve a local copy of a repository to modify"
msgstr "**クローン - clone :** リモートリポジトリのローカルコピーをダウンロードするか、修正用に特定のブランチのコピーを作成します"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:39
msgid ""
"**Fork:** duplicate a pre-existing repository to modify, and to compare "
"against the original"
msgstr "**フォーク - fork :** 変更するために既存のリポジトリを複製するか、元のリポジトリと比較するためのものです"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:40
msgid ""
"**Merge:** combine various changes from different branches/commits/forks "
"into a single history"
msgstr "**マージ - merge :** 異なるブランチ/コミット/フォークからのさまざまな変更を単一の履歴に統合します"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:43
msgid "Repository"
msgstr "リポジトリ - Repository"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:45
msgid ""
"A Git repository is a data structure containing the structure, history, and "
"files of a project."
msgstr "Gitリポジトリは、プロジェクトの構造、履歴、およびファイルを含むデータ構造です。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:47
msgid "Git repositories usually consist of:"
msgstr "Gitリポジトリは通常、次のようなもので構成されています："

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:49
msgid ""
"A ``.git`` folder. This folder contains the various information about the "
"repository."
msgstr "``.git`` フォルダ。このフォルダにはリポジトリに関するさまざまな情報が含まれています。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:50
msgid ""
"A ``.gitignore`` file. This file contains the files or directories that you "
"do *not* want included when you commit."
msgstr "``.gitignore`` ファイル。このファイルには、コミット時に\"含めたくない\"ファイルやディレクトリが設定されています。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:51
msgid "Files and folders. This is the main content of the repository."
msgstr "ファイルとフォルダ。これはリポジトリの主な内容です。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:54
msgid "Creating the repository"
msgstr "リポジトリを作成する"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:56
msgid ""
"You can store the repository locally, or through a remote -- a remote being "
"the cloud, or possibly another storage medium or server that hosts your "
"repository. `GitHub <https://github.com/>`_ is a popular free hosting "
"service. Numerous developers use it, and that's what this tutorial will use."
msgstr ""
"リポジトリはローカルに保存することもできますし、リモートに保存することもできます。リモートとはクラウドのことで、リポジトリをホストする別の記憶媒体やサーバーを指すこともあります。"
" `GitHub <https://github.com/>`_ "
"は人気のある無料のホスティングサービスです。多くの開発者が利用しており、このチュートリアルでもこれを使用します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:58
msgid ""
"There are various providers that can host repositories. `Gitlab "
"<https://about.gitlab.com>`_ and `Bitbucket <https://bitbucket.org/>`_ are a"
" few alternatives to Github."
msgstr ""
"リポジトリをホストできるプロバイダーはいろいろあります。 `Gitlab <https://about.gitlab.com>`_ や "
"`Bitbucket <https://bitbucket.org/>`_ は、Githubに代わるものです。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:61
msgid "Creating a GitHub Account"
msgstr "GitHubアカウントを作りましょう"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:63
msgid ""
"Go ahead and create a GitHub account by visiting the `website "
"<https://github.com>`_ and following the on-screen prompts."
msgstr ""
"GitHubアカウントを作成するために、 `ウェブサイト <https://github.com>`_ を訪れ、画面の指示に従ってください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "How to create a new GitHub account."
msgstr "新しいGitHubアカウントを作成する方法。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:69
msgid "Local Creation"
msgstr "ローカル作成"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:71
msgid ""
"After creating and verifying your account, you'll want to visit the "
"homepage. It'll look similar to the shown image."
msgstr "アカウントを作成し、確認した後、ホームページにアクセスしてください。表示される画像と似たような見た目になります。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "Showing the newly created account homepage."
msgstr "新しく作成されたアカウントのホームページが表示されます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:76
msgid "Click the plus icon in the top right."
msgstr "右上のプラスアイコンをクリックします。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "Location of the plus button."
msgstr "プラスボタンの位置。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:81
msgid "Then click *\"New Repository\"*"
msgstr "次に、 *「New Repository」* をクリックします。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "Creating a new menu after clicking the plus button."
msgstr "プラスボタンをクリックした後に表示される「Create new...」メニューに進みます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:86
msgid ""
"Fill out the appropriate information, and then click *\"Create repository\"*"
msgstr "情報を入力し、その後 *「Create repository」* をクリックします"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "Showing the \"create repository\" button"
msgstr "「Create repository」ボタンが表示されます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:91
msgid "You should see a screen similar to this"
msgstr "次のような画面が表示されるはずです。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "The quick setup screen after creating a repository."
msgstr "リポジトリを作成した後のクイックセットアップ画面。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:96
msgid ""
"The keyboard shortcut :kbd:`Ctrl+~` can be used to open a terminal in Visual"
" Studio Code for Windows."
msgstr ""
"キーボードショートカット :kbd:`Ctrl+~` を使って、Visual Studio Code for Windows "
"でターミナルを開くことができます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "An empty powershell window."
msgstr "空のPowerShellウィンドウ。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:103
msgid ""
"If a directory is empty, a file needs to be created in order for git to have"
" something to track. In the below Empty Directory example, we created a file"
" called ``README.md`` with the contents of ``# Example Repo``. For FRC\\ "
"|reg| Robot projects, the below Existing Project commands should be run in "
"the root of a project :ref:`created by the VS Code WPILib Project Creator "
"<docs/zero-to-robot/step-4/creating-test-drivetrain-program-cpp-java-"
"python:Creating a New WPILib Project (Java/C++)>`. More details on the "
"various commands can be found in the subsequent sections."
msgstr ""
"ディレクトリが空の場合は、git が何かを追跡できるようにするためにファイルを作成する必要があります。下の空のディレクトリの例では、 ``# "
"Example Repo`` の内容で ``README.md`` というファイルが作成されました。 FRC\\ |reg| "
"ロボットプロジェクトの場合、以下の既存のプロジェクト用コマンドは :ref:`VS Code WPILib Project Creator "
"によって作成された <docs/zero-to-robot/step-4/creating-test-drivetrain-program-cpp-"
"java-python:Creating a New WPILib Project (Java/C++)>` "
"プロジェクトのルートで実行する必要があります。様々なコマンドの詳細については、以降のセクションを参照してください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:105
msgid ""
"Replace the filepath ``\"C:\\Users\\ExampleUser9007\\Documents\\Example "
"Folder\"`` with the one you want to create the repo in, and replace the "
"remote URL ``https://github.com/ExampleUser9007/ExampleRepo.git`` with the "
"URL for the repo you created in the previous steps."
msgstr ""
"``\"C:\\Users\\ExampleUser9007\\Documents\\Example Folder\"`` "
"というファイルパスを、リポジトリを作成したい場所のパスに置き換え、リモートURL "
"``https://github.com/ExampleUser9007/ExampleRepo.git`` "
"を、前の手順で作成したリポジトリのURLに置き換えてください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:0
msgid "Empty Directory"
msgstr "空のディレクトリ"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:0
msgid "Existing Project"
msgstr "既存のプロジェクト"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:141
msgid "Commits"
msgstr "コミット - Commits"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:143
msgid ""
"Repositories are primarily composed of commits. Commits are saved states or "
"*versions* of code."
msgstr "リポジトリは主にコミットで構成されています。コミットはコードの保存された状態または *バージョン* のことです。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:145
msgid ""
"In the previous example, we created a file called README.md. Open that file "
"in your favorite text editor and edit a few lines. After tinkering with the "
"file for a bit, simply save and close. Navigate to PowerShell and type the "
"following commands."
msgstr ""
"前の例では、README.mdというファイルを作成しました。お気に入りのテキストエディタでそのファイルを開き、いくつか "
"行を編集してください。ファイルを少し変更したら、保存して閉じます。PowerShellに移動し、以下のコマンドを入力します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:155
msgid ""
"Writing good commit messages is a key part of a maintainable project. A "
"guide on writing commit messages can be found `here <https://cbea.ms/git-"
"commit/>`_."
msgstr ""
"良いコミットメッセージを書くことは、メンテナブルなプロジェクトの重要な部分です。コミットメッセージの書き方に関するガイドは、 `こちら "
"<https://cbea.ms/git-commit/>`_ をご覧ください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:158
msgid "Git Pull"
msgstr "Git Pull"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:160
msgid ""
"``git fetch`` can be used when the user does not wish to automatically merge"
" into the current working branch"
msgstr "``git fetch`` は、ユーザーが現在の作業ブランチに、自動的にマージ（統合）したくない場合に使用できます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:162
msgid ""
"This command retrieves the history or commits from the remote repository. "
"When the remote contains work you do not have, it will attempt to "
"automatically merge. See :ref:`docs/software/basic-programming/git-getting-"
"started:Merging`."
msgstr ""
"このコマンドは、リモートリポジトリから履歴またはコミットを取得します。リモートにあなたが持っていない作業が含まれている場合、自動的にマージを試みます。詳細については、"
" :ref:`docs/software/basic-programming/git-getting-started:Merging` "
"を参照してください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:164
msgid "Run: ``git pull``"
msgstr "実行： ``git pull``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:167
msgid "Git Add"
msgstr "Git Add"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:169
msgid ""
"This command \"stages\" the specified file(s) so that they will be included "
"in the next commit."
msgstr ""
"このコマンドは指定されたファイルを\"ステージ\"（本番環境とほぼ同じ環境にシステムを反映させ、動作や表示などの最終確認を行う段階のこと）をし、それらが次のコミットに含まれるようにします。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:171
msgid ""
"For a single file, run ``git add FILENAME.txt`` where FILENAME.txt is the "
"name and extension of the file to add. To add every file/folder that isn't "
"excluded via *gitignore*, run ``git add .``.  When run in the root of the "
"repository this command will stage every untracked, unexcluded file."
msgstr ""
"単一のファイルの場合は、「git add FILENAME.txt」と実行します。FILENAME.txtは追加するファイルの名前と拡張子です。 "
"*gitignore* で除外されていないすべてのファイル/フォルダを追加するには、「git add "
".」を実行します。リポジトリのルートで実行すると、このコマンドは追跡されていない、除外されていないすべてのファイルをステージします。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:176
msgid "Git Commit"
msgstr "Git Commit"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:178
msgid ""
"This command creates the commit and stores it locally. This saves the state "
"and adds it to the repository's history. The commit will consist of whatever"
" changes (\"diffs\") were made to the staged files since the last commit. It"
" is required to specify a \"commit message\" explaining why you changed this"
" set of files or what the change accomplishes."
msgstr ""
"このコマンドでコミットを作成し、リポジトリの履歴に追加されます。コミットには、最後のコミット以降にステージされたファイルに対して行われた変更（diff）が含まれます。このプロセスは、ソフトウェア開発におけるバージョン管理の基本的な部分です。コミットを行うことで、開発者は特定の時点でのソースコードの状態を記録し、後でその状態に戻ることができるようになります。また、コミットメッセージは重要で、他の開発者がそのコミットの目的や変更内容を理解するのに役立ちます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:182
msgid "Run: ``git commit -m \"type message here\"``"
msgstr "実行： ``git commit -m \"ここにメッセージを入力してください\"``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:185
msgid "Git Push"
msgstr "Git Push"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:187
msgid "Upload (Push) your local changes to the remote (Cloud)"
msgstr "ローカルの変更をリモート（クラウド）にアップロード（プッシュ）します"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:189
msgid "Run: ``git push``"
msgstr "実行: ``git push``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:192
msgid "Branches"
msgstr "ブランチ - Branches"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:194
msgid ""
"Branches in Git are similar to parallel worlds. They start off the same, and"
" then they can \"branch\" out into different varying paths. Consider the Git"
" control flow to look similar to this."
msgstr ""
"Gitのブランチは並行する世界のようです。最初は同じですが、異なる道に分岐する（branch）ことができます。Gitの開発フローはこのようにイメージしてください。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "A branch workflow state diagram."
msgstr "ブランチのワークフロー状態図。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:199
msgid ""
"In the above example, main was branched (or duplicated) into the branch "
"Feature 1 and someone checked out the branch, creating a local copy. Then, "
"someone committed (or uploaded) their changes, merging them into the branch "
"Feature 1. You are \"merging\" the changes from one branch into another."
msgstr ""
"上記の例では、mainはFeature "
"1というブランチに分岐（または複製）され、誰かがそのブランチをチェックアウトしてローカルコピーを作成しました。その後、ローカルブランチの変更をリモートブランチにコミット（またはアップロード）して、それらをFeature"
" "
"1ブランチにマージしました。すなわち、1つのブランチから別のブランチに変更が「マージ」されています。このプロセスを通じて、開発者は機能ごとに分離して作業し、後でメイン開発ラインに安全に統合することができます。ブランチングとマージングは、複数の開発者が同時に異なる機能や修正に取り組む際の競合を防ぎ、効率的な協業を促進するために重要です"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:202
msgid "Creating a Branch"
msgstr "ブランチを作成する"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:204
msgid ""
"Run: ``git branch branch-name`` where branch-name is the name of the branch "
"to create. The new branch history will be created from the current active "
"branch."
msgstr ""
"実行： ``git branch ブランチ名`` "
"。「ブランチ名」は作成するブランチの名前です。新しいブランチの履歴は、現在アクティブなブランチから作成されます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:207
msgid "Entering a Branch"
msgstr "ブランチに切り替える"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:209
msgid "Once a branch is created, you have to then enter the branch."
msgstr "ブランチが作成されると、そのブランチに切り替える必要があります。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:211
msgid ""
"Run: ``git checkout branch-name`` where branch-name is the branch that was "
"previously created."
msgstr "実行： ``git checkout ブランチ名`` 。「ブランチ名」は以前に作成したブランチです。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:214
msgid "Merging"
msgstr "マージ - Merging"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:216
msgid ""
"In scenarios where you want to copy one branches history into another, you "
"can merge them. A merge is done by calling ``git merge branch-name`` with "
"branch-name being the name of the branch to merge from. It is automatically "
"merged into the current active branch."
msgstr ""
"このマージ操作は、開発プロセスにおいて重要な役割を果たします。例えば、フィーチャーブランチでの開発が完了したら、その変更をメインブランチにマージして、新しい機能や修正を本番環境に統合することができます。Gitのマージ操作は、ブランチ間での効率的なコードの統合を可能にし、開発プロセスをスムーズにします。1つのブランチの履歴を別のブランチにコピーしたい場合、それらをマージすることができます。マージは、"
" ``git merge ブランチ名`` "
"のようなコマンドで行われます。この例では、「ブランチ名」はマージ元のブランチの名前です。マージ元のブランチにある変更は、現在のアクティブなブランチに自動的にマージされます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:218
msgid ""
"It's common for a remote repository to contain work (history) that you do "
"not have. Whenever you run ``git pull``, it will attempt to automatically "
"merge those commits into your local copy. That merge may look like the "
"below."
msgstr ""
"リモートリポジトリには、自分が持っていない作業（履歴）が含まれていることがよくあります。 ``git pull`` "
"を実行すると、それらのコミットを自動的にローカルにマージしようとします。そのマージは、以下のようになります。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst-1
msgid "A merge workflow state diagram."
msgstr "マージワークフローの状態図。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:223
msgid ""
"However, in the above example, what if File A was modified by both branch "
"Feature1 and Feature2? This is called a **merge conflict**. A merge conflict"
" can be resolved by editing the conflicting file. In the example, we would "
"need to edit File A to keep the history or changes that we want. After that "
"has been done, simply re-add, re-commit, and then push your changes."
msgstr ""
"ただし、上記の例では、\" File A \" がFeature1ブランチとFeature2ブランチの両方で変更された場合はどうなるでしょうか？これは "
"**マージ競合** "
"と呼ばれます。マージ競合は、競合しているファイルを編集することで解決することができます。この例では、ファイルAを手動で編集して、希望する変更を維持する必要があります。それが完了したら、単に変更を再追加し、再コミットしてから変更をプッシュします。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:226
msgid "Resets"
msgstr "リセット"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:228
msgid ""
"Sometimes history needs to be reset, or a commit needs to be undone. This "
"can be done multiple ways."
msgstr "場合によっては、履歴をリセットする必要があるか、コミットを元に戻す（revert）必要があります。これは複数の方法で行うことができます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:231
msgid "Reverting the Commit"
msgstr "コミットを元に戻す、取り消し"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:233
msgid ""
"You cannot revert a merge, as git does not know which branch or origin it "
"should choose."
msgstr "マージを元に戻すことはできません。gitは、どのブランチまたはオリジンを選択すべきかわからないためです。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:235
msgid ""
"To revert history leading up to a commit run ``git revert commit-id``. The "
"commit IDs can be shown using the ``git log`` command."
msgstr ""
"特定のコミットまでの履歴を戻すには、 ``git revert commit-id`` を実行します。コミットIDは \"git log\" "
"コマンドを使用して表示できます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:238
msgid "Resetting the Head"
msgstr "HEADのリセット"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:240
msgid ""
"Forcibly resetting the head is a dangerous command. It permanently erases "
"all history past the target. You have been warned!"
msgstr ""
"これは警告です！HEADを強制的にリセットするのは危険なコマンドです。指定したコミット以降のすべての履歴を永久に消去してしまいます。改めて警告です！"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:242
msgid "Run: ``git reset --hard commit-id``."
msgstr "実行： ``git reset --hard commit-id``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:245
msgid "Forks"
msgstr "フォーク - Forks"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:247
msgid ""
"Forks can be treated similarly to branches. You can merge the upstream "
"(original repository) into the origin (forked repository)."
msgstr ""
"フォークはブランチと同様に扱うことができます。アップストリーム（元のリポジトリ）をオリジン（フォークされたリポジトリ）にマージすることができます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:250
msgid "Cloning an Existing Repo"
msgstr "既存のリポジトリをクローンする"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:252
msgid ""
"In the situation that a repository is already created and stored on a "
"remote, you can clone it using"
msgstr "リモートに既に作成されているリポジトリがある場合、次のコマンドを使用してクローンすることができます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:258
msgid ""
"where ``myrepo.git`` is replaced with your git repo. If you follow this, you"
" can skip to :ref:`commits <docs/software/basic-programming/git-getting-"
"started:Commits>`."
msgstr ""
"``myrepo.git`` はあなたの git リポジトリに置き換えます。これに従うと、 :ref:`「コミット」 "
"<docs/software/basic-programming/git-getting-started:Commits>` にスキップできます。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:261
msgid "Updating a Fork"
msgstr "フォークを更新する"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:263
msgid ""
"Add the upstream: ``git remote add upstream "
"https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git``"
msgstr ""
"アップストリームを追加する： ``git remote add upstream "
"https://github.com/ORIGINAL_OWNER/ORIGINAL_REPOSITORY.git``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:264
msgid "Confirm it was added via: ``git remote -v``"
msgstr "追加されたことを確認する： ``git remote -v``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:265
msgid "Pull changes from upstream: ``git fetch upstream``"
msgstr "アップストリームからの変更を取得する： ``git fetch upstream``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:266
msgid ""
"Merge the changes into head: ``git merge upstream/upstream-branch-name``"
msgstr "HEADに変更をマージする： ``git merge upstream/アップストリームのブランチ名``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:269
msgid "Gitignore"
msgstr "Gitignore"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:271
msgid ""
"It is extremely important that teams **do not** modify the ``.gitignore`` "
"file that is included with their robot project. This can lead to offline "
"deployment not working."
msgstr ""
"チームがロボットプロジェクトに含まれる ``.gitignore`` "
"ファイルを変更しないことは非常に重要です。これによってオフラインのデプロイが機能しなくなることがあります！"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:273
msgid ""
"A ``.gitignore`` file is commonly used as a list of files to not "
"automatically commit with ``git add``. Any files or directory listed in this"
" file will **not** be committed. They will also not show up with `git status"
" <https://git-scm.com/docs/git-status>`_."
msgstr ""
"``.gitignore`` ファイルは、一般的に ``git add`` "
"で自動的にコミットしないファイルを指定するために使用します。このファイルにリストされているファイルやディレクトリは **コミットされません** 。 "
"`「git status」 <https://git-scm.com/docs/git-status>`_ "
"を実行しても、指定されたファイルは表示されません。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:278
msgid "Hiding a Folder"
msgstr "フォルダを隠す"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:280
msgid ""
"Simply add a new line containing the folder to hide, with a forward slash at"
" the end"
msgstr "新しい行を追加して、末尾にスラッシュを含む非表示にするフォルダを追加します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:282
msgid "EX: ``directory-to-exclude/``"
msgstr "例： ``非表示にするディレクトリ/``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:285
msgid "Hiding a File"
msgstr "ファイルを隠す方法"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:287
msgid ""
"Add a new line with the name of the file to hide, including any prepending "
"directory relative to the root of the repository."
msgstr "非表示にするファイル名を、リポジトリのルートからの相対的なディレクトリを含めて、新しい行に追加します。"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:289
msgid "EX: ``directory/file-to-hide.txt``"
msgstr "例： ``directory/隠したいファイツの名前.txt``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:291
msgid "EX: ``file-to-hide2.txt``"
msgstr "例： ``隠したいファイルの名前2.txt``"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:294
msgid "Additional Information"
msgstr "追加情報"

#: ../../frc-docs/source/docs/software/basic-programming/git-getting-started.rst:298
msgid ""
"A guide for correcting common mistakes can be found at the git `flight rules"
" <https://github.com/k88hudson/git-flight-rules/blob/master/README.md>`_ "
"repository."
msgstr ""
"よくある間違いを修正するためのガイドは git `flight rules <https://github.com/k88hudson/git-"
"flight-rules/blob/master/README.md>`_ リポジトリにあります。"
