# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2025, FIRST and other WPILib Contributors. This work is licensed under a Creative Commons Attribution 4.0 International License
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Deniz Şentürk, 2025
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2025\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-29 04:22+0000\n"
"PO-Revision-Date: 2021-09-29 04:10+0000\n"
"Last-Translator: Deniz Şentürk, 2025\n"
"Language-Team: Turkish (Turkey) (https://app.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:2
msgid "The Mechanism2d Widget"
msgstr "Mechanism2d Aracı"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:4
msgid ""
"Glass supports displaying stick-figure representations of your robot's "
"mechanisms using the :guilabel:`Mechanism2d` widget. It supports "
"combinations of ligaments that can rotate and / or extend or retract, such "
"as arms and elevators and they can be combined for more complicated "
"mechanisms. An instance of the ``Mechanism2d`` class should be created and "
"populated, sent over NetworkTables, and updated periodically with the latest"
" mechanism states in your robot code. It can also be used with the "
":doc:`Physics Simulation </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` to visualize and program your robot's mechanisms "
"before the robot is built."
msgstr ""
"Glass, :guilabel:`Mechanism2d` aracını kullanarak robotunuzun düzeneklerinin"
" çöp adam şeklinde temsillerini görüntüleme imkanı tanımaktadır. Araç, "
"kollar ve asansörler gibi dönebilen ve / veya uzanıp geri çekilebilen bağ "
"birleşimlerini desteklemektedir ve bu bağlar daha karmaşık düzenekler için "
"birleştirilebilmektedir. ``Mechanism2d`` sınıfının örneği oluşturulmalı ve "
"doldurulmalı, NetworkTables üzerinden iletilmeli ve düzenli aralıklarla "
"robot kodunuzdaki en güncel düzenek durumları ile güncellenmelidir. Araç, "
":doc:`Physics Simulation </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` ile birlikte, robotun inşaası öncesinde robotunuzun"
" düzeneklerini görüntülemek ve programlamak için de kullanılabilmektedir."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:7
msgid "Creating and Configuring the Mechanism2d Instance"
msgstr "Mechanism2d Örneğinin Oluşturulması ve Yapılandırılması"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:9
msgid ""
"The ``Mechanism2d`` object is the \"canvas\" where the mechanism is drawn. "
"The root node is where the mechanism is anchored to ``Mechanism2d``. For a "
"single jointed arm this would the pivot point. For an elevator, this would "
"be where it's attached to the robot's base. To get a root node (represented "
"by a ``MechanismRoot2d`` object), call ``getRoot(name, x, y)`` on the "
"container ``Mechanism2d`` object. The name is used to name the root within "
"NetworkTables, and should be unique, but otherwise isn't important. The ``x "
"/ y`` coordinate system follows the same orientation as ``Field2d`` - "
"``(0,0)`` is bottom left."
msgstr ""
"``Mechanism2d`` nesnesi düzeneğin çizildiği \"tuval\"dir. Kök düğüm, "
"düzeneğin ``Mechanism2d``'ye sabitlendiği yerdir. Tek eklemli bir kol için "
"bu sabitleme yeri döngül noktadır. Bir asansör için sabitleme yeri, robotun "
"temelinde tutturulduğu yer olacaktır. (Bir ``MechanismRoot2d`` nesnesi ile "
"temsil edilen) kök düğüm elde etmek için  ``Mechanism2d`` nesnesi "
"kapsayıcısı içerisinde ``getRoot(name, x, y)``'yi çağırınız. İsim "
"NetworkTables içerisinde kök düğümü isimlendirmek için kullanılmaktadır ve "
"bu sebeple özgün olması haricinde pek de önemli değildir. ``x / y`` "
"koordinat sistemi ``Field2d`` ile aynı yönü izlemektedir: ``(0,0)`` sol "
"alttır."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:11
msgid ""
"In the examples below, an elevator is drawn, with a rotational wrist on top "
"of the elevator. The full Mechanism2d example is available in `Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/mechanism2d/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Mechanism2d/cpp/Robot.cpp>`__"
msgstr ""
"Aşağıdaki örneklerde, en üzerinde dönüşlü bir bilek bulunan, bir asansör "
"çizilmiştir. Mechanism2d örneğinin tamamına `Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/mechanism2d/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/Mechanism2d/cpp/Robot.cpp>`__"
" üzerinden erişebilirsiniz."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:31
msgid ""
"Each ``MechanismLigament2d`` object represents a stage of the mechanism. It "
"has a three required parameters, a name, an initial length to draw (relative"
" to the size of the ``Mechanism2d`` object), and an initial angle to draw "
"the ligament in degrees. Ligament angles are relative to the parent "
"ligament, and follow math notation - the same as :ref:`Rotation2d "
"<docs/software/advanced-controls/geometry/pose:Rotation>` (counterclockwise-"
"positive). A ligament based on the root with an angle of zero will point "
"right. Two optional parameters let you change the width (also relative to "
"the size of the Mechanism2d object) and the color. Call "
"``append()``/``Append()`` on a root node or ligament node to add another "
"node to the figure. In Java, pass a constructed ``MechanismLigament2d`` "
"object to add it. In C++, pass the construction parameters in order to "
"construct and add a ligament."
msgstr ""
"Her bir ``MechanismLigament2d`` nesnesi düzeneğin bir aşamasını temsil "
"etmektedir. Nesneler bir isim, (``Mechanism2d`` nesnesinin boyutuna oranla) "
"bir ilk çizim uzunluğu ve bağın dereceler halinde çizilmesini sağlayacak bir"
" ilk açı şeklinde gerekli üç parametreye sahiptir. Bağ açıları, ana bağa "
"orantılı ve (saat yönünün tersine-pozitif) ref:`Rotation2d "
"<docs/software/advanced-controls/geometry/pose:Rotation>` ile aynı "
"matematiksel gösterimi izlemektedir. Açısı sıfır olan ve temelleri köke "
"dayanan bir bağ sağa doğru bakacaktır. İki tercihi parametre, çizginin "
"genişliği (ve ayrıca Mechanism2d nesnesine orantılı boyutu) ile rengini "
"değiştirmeye olanak tanımaktadır. Şekle bir tane daha düğüm eklemek için bir"
" kök düğüme veya bağ düğümüne ``append()``/``Append()`` çağırınız. Java'da "
"şekil üzerine bağ eklemek için yapılı bir ``MechanismLigament2d`` nesnesi "
"iletiniz. C++'daysa bir bağ oluşturmak ve bağı eklemek için yapı "
"parametrelerini çalıştırınız."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:51
msgid "Then, publish the ``Mechanism2d`` object to NetworkTables:"
msgstr ""
"Ardından ``Mechanism2d`` nesnesini NetworkTables üzerinden yayınlayınız:"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:70
msgid ""
"The ``Mechanism2d`` instance can also be sent using a lower-level "
"NetworkTables API or using the :ref:`Shuffleboard API "
"<docs/software/dashboards/shuffleboard/getting-started/shuffleboard-"
"displaying-data:Displaying data from your robot>`. In this case, the "
"``SmartDashboard`` API was used, meaning that the :guilabel:`Mechanism2d` "
"widget will appear under the ``SmartDashboard`` table name."
msgstr ""
"``Mechanism2d`` örneği daha alt seviyedeki NetworkTables API veya "
":ref:`Shuffleboard API <docs/software/dashboards/shuffleboard/getting-"
"started/shuffleboard-displaying-data:Displaying data from your robot>` "
"kullanılarak da iletilebilmektedir. Bu örnekte ``SmartDashboard`` API "
"kullanılmıştır, diğer bir değişle :guilabel:`Mechanism2d` aracı,  "
"``SmartDashboard`` tablo adı altında görüntülenebilecektir."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:72
msgid ""
"To manipulate a ligament angle or length, call ``setLength()`` or "
"``setAngle()`` on the ``MechanismLigament2d`` object. When manipulating "
"ligament length based off of sensor measurements, make sure to add the "
"minimum length to prevent 0-length (and therefore invisible) ligaments."
msgstr ""
"Bağ açısı veya uzunluğunu değiştirmek için ``MechanismLigament2d`` nesnesine"
" ``setLength()`` veya ``setAngle()`` komutlarını çağırınız. 0 uzunluk (ve bu"
" sebeple görünmez) bağları önlemek için, sensör ölçülerinden yola çıkarak "
"bağ uzunluğunu değiştirirken minimum uzunluk değerleri eklemeyi unutmayınız."
" "

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:92
msgid "Viewing the Mechanism2d in Glass"
msgstr "Glass'da Mechanism2d'nin görüntülenmesi"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:94
msgid ""
"After sending the ``Mechanism2d`` instance over NetworkTables, the "
":guilabel:`Mechanism2d` widget can be added to Glass by selecting "
":guilabel:`NetworkTables` in the menu bar, choosing the table name that the "
"instance was sent over, and then clicking on the :guilabel:`Field` button."
msgstr ""
"``Mechanism2d`` örneğini NetworkTables üzerinden gönderdikten sonra menü "
"çubuğunda: guilabel: `NetworkTables` seçilip, örneğin gönderildiği tablo adı"
" seçilerek ve ardından :guilabel:`Field` düğmesine tıklanarak "
":guilabel:`Mechanism2d` aracı Glass'a eklenebilmektedir."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:98
msgid ""
"Once the widget appears as shown below, you can resize and place it on the "
"Glass workspace as you desire. Right-clicking the top of the widget will "
"allow you to customize the name of the widget. As the wrist potentiometer "
"and elevator encoder changes, the mechanism will update in the widget."
msgstr ""
"Araç aşağıdaki gibi göründüğünde aracı yeniden boyutlandırıp istediğiniz "
"gibi Glass çalışma alanına ekleyebilirsiniz. Aracın ismi, aracın üst kısmına"
" sağ tıklanarak değiştirilebilmektedir. Bilek potansiyometresi ve asansör "
"kodlayıcısı değiştikçe düzenek, aracı güncelleyecektir."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:103
msgid "Viewing the Mechanism2d in AdvantageScope"
msgstr "AdvantageScope'da Mechanism2d'nin görüntülenmesi"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:105
msgid ""
":ref:`AdvantageScope "
"<docs/software/dashboards/advantagescope:AdvantageScope>` is an alternative "
"option for viewing a ``Mechanism2d`` object, including data recorded to a "
"log file using :ref:`WPILib data logs <docs/software/telemetry/datalog:On-"
"Robot Telemetry Recording Into Data Logs>`. Both 2D and 3D visualizations "
"are supported. See the documentation for the `mechanism "
"<https://docs.advantagescope.org/tab-reference/mechanism>`__ and `3D field "
"<https://docs.advantagescope.org/tab-reference/3d-field>`__ tabs for more "
"details."
msgstr ""
":ref:`AdvantageScope "
"<docs/software/dashboards/advantagescope:AdvantageScope>` ``Mechanism2d`` "
"nesnesinden gelen, :ref:`WPILib data logs "
"<docs/software/telemetry/datalog:On-Robot Telemetry Recording Into Data "
"Logs>` kullanılarak bir günlük dosyasına kaydedilmiş veriler de dahil olmak "
"üzere, poz verilerini görüntülemek için kullanılabilecek başka bir "
"seçenektir. Hem 2 hem de 3 boyutlu görselleştrime desteği bulunmaktadır. "
"Daha fazla bilgi için bkz. `mechanism <https://docs.advantagescope.org/tab-"
"reference/mechanism>`__ ve `3D field <https://docs.advantagescope.org/tab-"
"reference/3d-field>`__  sekmeleri."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:107
msgid ""
"Screenshot of an AdvantageScope window displaying a robot and mechanism in "
"3D."
msgstr ""
"3 boyutlu bir şekilde robotu ve düzeneği görüntüleyen bir AdvantageScope "
"penceresinin ekran görüntüsü."

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:112
msgid "Next Steps"
msgstr "Sonraki Adımlar"

#: ../../frc-docs/source/docs/software/dashboards/glass/mech2d-widget.rst:114
msgid ""
"As mentioned above, the Mechanism2d visualization can be combined with "
":doc:`Physics Simulation </docs/software/wpilib-tools/robot-"
"simulation/physics-sim>` to help you program mechanisms before your robot is"
" built. The ArmSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ArmSimulation/cpp/Robot.cpp>`__"
" / `Python "
"<https://github.com/robotpy/examples/blob/2024.0.0b4/ArmSimulation/robot.py>`__)"
" and ElevatorSimulation (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ElevatorSimulation/cpp/Robot.cpp>`__"
" / `Python "
"<https://github.com/robotpy/examples/blob/2024.0.0b4/ElevatorSimulation/robot.py>`__)"
" examples combine physics simulation and Mechanism2d visualization so that "
"you can practice programming a single jointed arm and elevator without a "
"robot."
msgstr ""
"Yukarıda da belirtildiği üzere robot inşaa edilmeden önce düzeneklerin "
"programlaması için Mechanism2d görselleştirmesi :doc:`Physics Simulation "
"</docs/software/wpilib-tools/robot-simulation/physics-sim>` ile birlikte "
"kullanılabilmektedir. ArmSimulation - Kol Simülasyonu (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/armsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ArmSimulation/cpp/Robot.cpp>`__"
" / `Python "
"<https://github.com/robotpy/examples/blob/2024.0.0b4/ArmSimulation/robot.py>`__)"
" ve ElevatorSimulation - Asansör Simülasyonu (`Java "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/elevatorsimulation/Robot.java>`__"
" / `C++ "
"<https://github.com/wpilibsuite/allwpilib/blob/main/wpilibcExamples/src/main/cpp/examples/ElevatorSimulation/cpp/Robot.cpp>`__"
" / `Python "
"<https://github.com/robotpy/examples/blob/2024.0.0b4/ElevatorSimulation/robot.py>`__)"
" örnekleri tek eklemli bir kol ve asansörün robotsuz programlama "
"alıştırmaları yapabilmeniz için fizik simülasyonu ile Mechanism2d "
"görselleştirmesini bir araya getirmektedir."
