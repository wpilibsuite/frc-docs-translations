# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# ceren oktemer <ceren.oktemer@gmail.com>, 2020
# Hasan Bilgin <hasanbilgin@fikretyukselfoundation.org>, 2020
# Müfit ALKAYA_3390 <mufit.alkaya@tfo.k12.tr>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-28 16:18+0000\n"
"PO-Revision-Date: 2020-04-25 02:03+0000\n"
"Last-Translator: Müfit ALKAYA_3390 <mufit.alkaya@tfo.k12.tr>, 2021\n"
"Language-Team: Turkish (Turkey) (https://www.transifex.com/wpilib/teams/109324/tr_TR/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: tr_TR\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:2
msgid "Swerve Drive Odometry"
msgstr "Swerve Sürüş Odometrisi"

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:3
msgid ""
"A user can use the swerve drive kinematics classes in order to perform "
":ref:`odometry <docs/software/kinematics-and-odometry/intro-and-chassis-"
"speeds:What is odometry?>`. WPILib contains a ``SwerveDriveOdometry`` class "
"that can be used to track the position of a swerve drive robot on the field."
msgstr ""
"Bir kullanıcı gerçekleştirmek için swerve sürücü kinematik sınıflarını "
"kullanabilir :ref:`odometry <docs/software/kinematics-and-odometry/intro-"
"and-chassis-speeds:What is odometry?>`. WPILib, sahada bir Swerve sürüş "
"robotunun konumunu izlemek için kullanılabilecek bir ``SwerveDriveOdometry``"
" sınıfı içerir."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:5
msgid ""
"Because this method only uses encoders and a gyro, the estimate of the "
"robot's position on the field will drift over time, especially as your robot"
" comes into contact with other robots during gameplay. However, odometry is "
"usually very accurate during the autonomous period."
msgstr ""
"Bu yöntem yalnızca kodlayıcılar ve bir jiroskop kullandığından, robotun "
"sahadaki konumunun tahmini, özellikle oyun sırasında diğer robotlarla temas "
"kurduğunda zamanla kayacaktır. Bununla birlikte, odometri genellikle özerk "
"dönemde çok doğrudur."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:8
msgid "Creating the odometry object"
msgstr "Odometri nesnesini oluşturma"

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:9
msgid ""
"The ``SwerveDriveOdometry<int NumModules>`` class requires one template "
"argument (only C++), two mandatory arguments, and one optional argument. The"
" template argument (only C++) is an integer representing the number of "
"swerve modules. The mandatory arguments are the kinematics object that "
"represents your swerve drive (in the form of a ``SwerveDriveKinematics`` "
"class) and the angle reported by your gyroscope (as a Rotation2d). The third"
" optional argument is the starting pose of your robot on the field (as a "
"``Pose2d``). By default, the robot will start at ``x = 0, y = 0, theta = "
"0``."
msgstr ""
"``SwerveDriveOdometry<int NumModules>`` sınıfı, bir şablon değişkeni "
"(yalnızca C ++), iki zorunlu değişken ve bir isteğe bağlı değişken "
"gerektirir. Şablon argümanı (yalnızca C ++), swerve modüllerinin sayısını "
"temsil eden bir tamsayıdır. Zorunlu argümanlar, dönüş sürücünüzü (bir "
"``SwerveDriveKinematics`` sınıfı biçiminde) ve jiroskopunuz tarafından "
"bildirilen açı (Rotation2d olarak) temsil eden kinematik nesnesidir. Üçüncü "
"isteğe bağlı argüman, robotunuzun sahadaki başlangıç pozudur (``Pose2d`` "
"olarak). Varsayılan olarak, robot ``x = 0, y = 0, theta = 0``  ile "
"başlayacaktır."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:11
msgid ""
"0 degrees / radians represents the robot angle when the robot is facing "
"directly toward your opponent's alliance station. As your robot turns to the"
" left, your gyroscope angle should increase. By default, WPILib gyros "
"exhibit the opposite behavior, so you should negate the gyro angle."
msgstr ""
"0 derece / radyan, robot doğrudan rakibinizin ittifak istasyonuna bakarken "
"robot açısını temsil eder. Robotunuz sola döndükçe jiroskop açınız "
"artmalıdır. Varsayılan olarak, WPILib jiroskopları zıt davranış sergiler, bu"
" nedenle jiroskop açısını terlemeniz gerekir."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:55
msgid "Updating the robot pose"
msgstr "Robot duruşunu güncelleme"

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:56
msgid ""
"The ``update`` method of the odometry class updates the robot position on "
"the field. The update method takes in the gyro angle of the robot, along "
"with a series of module states (speeds and angles) in the form of a "
"``SwerveModuleState`` each. It is important that the order in which you pass"
" the ``SwerveModuleState`` objects is the same as the order in which you "
"created the kinematics object."
msgstr ""
"Odometri sınıfının ``update`` metodu , robotun sahadaki konumunu günceller. "
"Güncelleme yöntemi, her biri bir ``SwerveModuleState`` şeklinde bir dizi "
"modül durumu (hız ve açı) ile birlikte robotun cayro açısını alır. "
"``SwerveModuleState`` nesnelerini geçirdiğiniz sıranın, kinematik nesnesini "
"yarattığınız sırayla aynı olması önemlidir."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:58
msgid ""
"This ``update`` method must be called periodically, preferably in the "
"``periodic()`` method of a :ref:`Subsystem "
"<docs/software/commandbased/subsystems:Subsystems>`. The ``update`` method "
"returns the new updated pose of the robot."
msgstr ""
"Bu  ``update``  metodu periyodik olarak, tercihen ``periodic()`` metodunda "
"bir  :ref:`Subsystem <docs/software/commandbased/subsystems:Subsystems>` ile"
" çağrılmalıdır. ``update``  metodu, robotun yeni güncellenmiş pozunu "
"döndürür."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:90
msgid "Resetting the Robot Pose"
msgstr "Robot Duruşunu Sıfırlama"

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:91
msgid ""
"The robot pose can be reset via the ``resetPose`` method. This method "
"accepts two arguments -- the new field-relative pose and the current gyro "
"angle."
msgstr ""
"Robot duruşu, ``resetPose`` metoduyla sıfırlanabilir. Bu yöntem iki bağımsız"
" değişkeni kabul eder - yeni sahaya bağlı poz ve mevcut jiroskop açısı."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:93
msgid ""
"If at any time, you decide to reset your gyroscope, the ``resetPose`` method"
" MUST be called with the new gyro angle."
msgstr ""
"Herhangi bir zamanda jiroskopunuzu sıfırlamaya karar verirseniz, yeni "
"jiroskop açısıyla ``resetPose`` metodu ÇAĞIRILMALIDIR."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:95
msgid ""
"The implementation of ``getState() / GetState()`` above is left to the user."
" The idea is to get the module state (speed and angle) from each module. For"
" a full example, see here: `C++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/SwerveBot>`_"
" / `Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/swervebot>`_."
msgstr ""
"Yukarıdaki  ``getState() / GetState()``  uygulaması kullanıcıya "
"bırakılmıştır. Fikir, her modülden modül durumunu (hız ve açı) elde "
"etmektir. Tam bir örnek için buraya bakın: `C ++ "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibcExamples/src/main/cpp/examples/SwerveBot>`"
" _ / `Java "
"<https://github.com/wpilibsuite/allwpilib/tree/main/wpilibjExamples/src/main/java/edu/wpi/first/wpilibj/examples/swervebot>`"
" _."

#: ../../frc-docs/source/docs/software/kinematics-and-odometry/swerve-drive-odometry.rst:97
msgid ""
"In addition, the ``GetPose`` (C++) / ``getPoseMeters`` (Java) methods can be"
" used to retrieve the current robot pose without an update."
msgstr ""
"Ek olarak, mevcut robot pozunu güncelleme olmadan almak için``GetPose`` "
"(C++) / ``getPoseMeters`` (Java)  metodları kullanılabilir."
