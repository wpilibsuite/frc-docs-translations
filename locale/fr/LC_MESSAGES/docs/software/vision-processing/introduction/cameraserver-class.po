# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2021, FIRST and other WPILib Contributors
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Andy Chang, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2021\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-07-25 16:03+0000\n"
"PO-Revision-Date: 2020-04-25 02:05+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2021\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:4
msgid "Read and Process Video: CameraServer Class"
msgstr "Lire et traiter la vidéo: classe CameraServer"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:7
msgid "Concepts"
msgstr "Concepts"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:9
msgid ""
"The cameras typically used in FRC\\ |reg| (commodity USB and Ethernet "
"cameras such as the Axis camera) offer relatively limited modes of "
"operation. In general, they provide only a single image output (typically in"
" an RGB compressed format such as JPG) at a single resolution and frame "
"rate. USB cameras are particularly limited as only one application may "
"access the camera at a time."
msgstr ""
"Les caméras généralement utilisées en FRC\\ |reg| (les caméras USB et "
"Ethernet de base telles que la caméra Axis) offrent des modes de "
"fonctionnement relativement limités. En général, elles ne fournissent qu’une"
" seule sortie d’image (généralement dans un format compressé RGB tel que "
"JPG) à une seule résolution et taux d’image. Les caméras USB sont "
"particulièrement limitées car une seule application peut accéder à la caméra"
" à la fois."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:11
msgid ""
"CameraServer supports multiple cameras. It handles details such as "
"automatically reconnecting when a camera is disconnected, and also makes "
"images from the camera available to multiple \"clients\" (e.g. both your "
"robot code and the dashboard can connect to the camera simultaneously)."
msgstr ""
"CameraServer peut prendre en charge plusieurs caméras. Il gère des détails "
"tels que la reconnexion automatique lorsqu'une caméra est déconnectée "
"momentanément, et met également les images de la caméra à la disposition de "
"plusieurs \"clients\" (par exemple, votre code de robot et le tableau de "
"bord peuvent lire les images de la caméra même simultanément)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:14
msgid "Camera Names"
msgstr "Nommer les caméras"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:16
msgid ""
"Each camera in CameraServer must be uniquely named. This is also the name "
"that appears for the camera in the Dashboard. Some variants of the "
"CameraServer ``startAutomaticCapture()`` and ``addAxisCamera()`` functions "
"will automatically name the camera (e.g. \"USB Camera 0\" or \"Axis "
"Camera\"), or you can give the camera a more descriptive name (e.g. \"Intake"
" Cam\"). The only requirement is that each camera have a unique name."
msgstr ""
"Chaque caméra dans CameraServer doit porter un nom unique. C'est également "
"le nom qui apparaît pour la caméra dans le tableau de bord. Certaines "
"variantes des fonctions CameraServer ``startAutomaticCapture()``  et "
"``addAxisCamera()`` nommeront automatiquement la caméra (par exemple \"USB "
"Camera 0\" ou \"Axis Camera\"), ou vous pouvez donner à la caméra un nom "
"plus descriptif (par exemple \"Cam d'admission\"). La seule exigence est que"
" chaque caméra ait un nom unique."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:19
msgid "USB Camera Notes"
msgstr "Remarques sur la caméra USB"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:22
msgid "CPU Usage"
msgstr "L'utilisation du processeur"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:24
msgid ""
"The CameraServer is designed to minimize CPU usage by only performing "
"compression and decompression operations when required and automatically "
"disabling streaming when no clients are connected."
msgstr ""
"Le CameraServer est conçu pour minimiser l'utilisation du processeur en "
"effectuant uniquement des opérations de compression et de décompression "
"lorsque cela est nécessaire et en désactivant automatiquement le streaming "
"lorsqu'aucun client n'est connecté."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:26
msgid ""
"To minimize CPU usage, the dashboard resolution should be set to the same "
"resolution as the camera; this allows the CameraServer to not decompress and"
" recompress the image, instead, it can simply forward the JPEG image "
"received from the camera directly to the dashboard. It's important to note "
"that changing the resolution on the dashboard does *not* change the camera "
"resolution; changing the camera resolution may be done by calling "
"``setResolution()`` on the camera object."
msgstr ""
"Pour minimiser l'utilisation du processeur, la résolution du tableau de bord"
" doit être réglée sur la même résolution que la caméra; cela permet au "
"CameraServer de ne pas décompresser et recompresser l'image, au lieu de "
"cela, il peut simplement transmettre l'image JPEG reçue de la caméra "
"directement au tableau de bord. Il est important de noter que la "
"modification de la résolution sur le tableau de bord **ne change pas** la "
"résolution de la caméra; changer la résolution de la caméra peut être fait "
"en appelant ``setResolution()`` sur l'objet caméra."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:29
msgid "USB Bandwidth"
msgstr "Bande passante USB"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:31
msgid ""
"The roboRIO can only transmit and receive so much data at a time over its "
"USB interfaces. Camera images can require a lot of data, and so it is "
"relatively easy to run into this limit. The most common cause of a USB "
"bandwidth error is selecting a non-JPEG video mode or running too high of a "
"resolution, particularly when multiple cameras are connected."
msgstr ""
"Le roboRIO ne peut transmettre et recevoir autant de données à la fois via "
"ses interfaces USB. Les images de la caméra peuvent nécessiter beaucoup de "
"données, et il est donc relativement facile de dépasser cette limite. La "
"cause plus fréquente d'une erreur de bande passante USB est le choix d'un "
"mode vidéo non JPEG ou une résolution trop élevée, en particulier lorsque "
"plusieurs caméras sont connectées."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:34
msgid "Architecture"
msgstr "Architecture"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:36
msgid ""
"The CameraServer consists of two layers, the high level WPILib "
"**CameraServer class** and the low level **cscore library**."
msgstr ""
"Le CameraServer se compose de deux couches, la classe haut-niveau WPILib "
"**CameraServer class** et la librairie de bas-niveau **cscore library**."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:39
msgid "CameraServer Class"
msgstr "Classe CameraServer"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:41
msgid ""
"The CameraServer class (part of WPILib) provides a high level interface for "
"adding cameras to your robot code. It also is responsible for publishing "
"information about the cameras and camera servers to NetworkTables so that "
"Driver Station dashboards such as the LabVIEW Dashboard and Shuffleboard can"
" list the cameras and determine where their streams are located. It uses a "
"singleton pattern to maintain a database of all created cameras and servers."
msgstr ""
"La classe CameraServer (qui fait partie de WPILib) fournit une interface de "
"haut niveau pour ajouter des caméras à votre code de robot. Elle est "
"également responsable de la publication d'informations sur les caméras et "
"les serveurs de caméras sur NetworkTables afin que les tableaux de bord de "
"Driver Station tels que LabVIEW Dashboard et Shuffleboard puissent "
"répertorier les caméras et déterminer l'emplacement de leurs flux. La classe"
" utilise un modèle de type \"singleton\" (possédant un seul objet à la fois)"
" pour maintenir une base de données de toutes les caméras et tous les "
"serveurs créés."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:43
msgid "Some key functions in CameraServer are:"
msgstr "Certaines fonctions importantes de CameraServer:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:45
msgid ""
"``startAutomaticCapture()``: Add a USB camera (e.g. Microsoft LifeCam) and "
"starts a server for it so it can be viewed from the dashboard."
msgstr ""
"``startAutomaticCapture()``: ajoute une caméra USB (par exemple Microsoft "
"LifeCam) et lance un serveur pour qu'elle puisse être visualisée à partir du"
" tableau de bord."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:46
msgid ""
"``addAxisCamera()``: Add an Axis camera. Even if you aren't processing "
"images from the Axis camera in your robot code, you may want to use this "
"function so that the Axis camera appears in the Dashboard's drop down list "
"of cameras. It also starts a server so the Axis stream can still be viewed "
"when your driver station is connected to the roboRIO via USB (useful at "
"competition if you have both the Axis camera and roboRIO connected to the "
"two robot radio Ethernet ports)."
msgstr ""
"``addAxisCamera()``: Ajoute une caméra Axis. Même si vous ne traitez pas les"
" images de la caméra Axis dans votre code de robot, vous pouvez utiliser "
"cette fonction pour que la caméra Axis apparaisse dans la liste déroulante "
"des caméras du tableau de bord. Ceci démarre également un serveur afin que "
"le flux Axis puisse toujours être affiché lorsque votre poste de pilotage "
"est connecté au roboRIO via USB (utile en compétition si vous avez à la fois"
" la caméra Axis et le roboRIO connectés aux deux ports Ethernet radio du "
"robot)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:47
msgid ""
"``getVideo()``: Get OpenCV access to a camera. This allows you to get images"
" from the camera for image processing on the roboRIO (in your robot code)."
msgstr ""
"``getVideo()``:  Obtenez l'accès OpenCV à une caméra. Cela vous permet "
"d'obtenir des images de la caméra pour le traitement d'images sur le roboRIO"
" (dans votre code de robot)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:48
msgid ""
"``putVideo()``: Start a server that you can feed OpenCV images to. This "
"allows you to pass custom processed and/or annotated images to the "
"dashboard."
msgstr ""
"``putVideo()``: démarrez un serveur sur lequel vous pouvez fournir des "
"OpenCV à ce serveur.  Cela vous permet de passer des images traitées et/ou "
"annotées personnalisées au tableau de bord."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:51
msgid "cscore Library"
msgstr "Librairie cscore"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:53
msgid "The cscore library provides the lower level implementation to:"
msgstr "La librairie cscore fournit l'implémentation de niveau bas pour:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:55
msgid "Get images from USB and HTTP (e.g. Axis) cameras"
msgstr "Obtenir des images de caméras USB et HTTP (par exemple Axis)"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:56
msgid "Change camera settings (e.g. contrast and brightness)"
msgstr ""
"Modifier les paramètres de l'appareil photo (par exemple le contraste et la "
"luminosité)"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:57
msgid "Change camera video modes (pixel format, resolution and frame rate)"
msgstr ""
"Changer les modes vidéo de la caméra (format pixel, résolution et fréquence "
"d'images)"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:58
msgid "Act as a web server and serve images as a standard MJPEG stream"
msgstr ""
"Agir en tant que serveur Web et fournir des images en tant que flux MJPEG "
"standard"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:59
msgid "Convert images to/from OpenCV ``Mat`` objects for image processing"
msgstr ""
"Convertir des images vers/depuis des objets ``Mat`` OpenCV pour le "
"traitement d'images"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:62
msgid "Sources and Sinks"
msgstr "Sources et Récepteurs"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:64
msgid ""
"The basic architecture of the cscore library is similar to that of "
"MJPGStreamer, with functionality split between sources and sinks. There can "
"be multiple sources and multiple sinks created and operating simultaneously."
msgstr ""
"L'architecture de base de la bibliothèque cscore est similaire à celle de "
"MJPGStreamer, avec des fonctionnalités réparties entre les sources et les "
"récepteurs. Il peut y avoir plusieurs Sources et plusieurs Récepteurs créés "
"et fonctionnant simultanément."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:66
msgid ""
"An object that generates images is a source and an object that "
"accepts/consumes images is a sink. The generate/consume is from the "
"perspective of the library. Thus cameras are sources (they generate images)."
" The MJPEG web server is a sink because it accepts images from within the "
"program (even though it may be forwarding those images on to a web browser "
"or dashboard). Sources may be connected to multiple sinks, but sinks can be "
"connected to one and only one source. When a sink is connected to a source, "
"the cscore library takes care of passing each image from the source to the "
"sink."
msgstr ""
"Un objet qui génère des images est une Source et un objet qui "
"accepte/consomme des images est un Récepteur. La génération/consommation est"
" du point de vue de la librairie. Les caméras sont donc des Sources (elles "
"génèrent des images). Le serveur Web MJPEG est un Récepteur, car il accepte "
"des images à partir du programme (même s'il peut transférer ces images vers "
"un navigateur Web ou un tableau de bord). Les Sources peuvent être "
"connectées à plusieurs Récepteurs, mais les Récepteurs peuvent être "
"connectés à une seule et unique Source. Lorsqu'un Récepteur est connecté à "
"une Source, la librairie cscore se charge de transmettre chaque image de la "
"Source au Récepteur."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:68
msgid ""
"**Sources** obtain individual frames (such as provided by a USB camera) and "
"fire an event when a new frame is available. If no sinks are listening to a "
"particular source, the library may pause or disconnect from a source to save"
" processor and I/O resources. The library autonomously handles camera "
"disconnects/reconnects by simply pausing and resuming firing of events (e.g."
" a disconnect results in no new frames, not an error)."
msgstr ""
"**Les Sources** obtiennent des images individuelles (comme celles fournies "
"par une caméra USB) et déclenchent un événement lorsqu'une nouvelle image "
"est disponible. Si aucun Récepteur n'écoute une Source particulière, la "
"librairie peut s'arrêter ou se déconnecter d'une Source pour économiser le "
"processeur et les ressources d'Entrées/Sorties. La librairie gère de manière"
" autonome les déconnexions/reconnexions de la caméra en interrompant "
"simplement et en reprenant le déclenchement des événements (par exemple, une"
" déconnexion arrête l'envoie de nouvelles trames, mais ne génère pas "
"d'erreur)."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:69
msgid ""
"**Sinks** listen to a particular source's event, grab the latest image, and "
"forward it to its destination in the appropriate format. Similarly to "
"sources, if a particular sink is inactive (e.g. no client is connected to a "
"configured MJPEG over HTTP server), the library may disable parts of its "
"processing to save processor resources."
msgstr ""
"**Les Récepteurs** écoutent l'événement d'une Source particulière, "
"récupérent la dernière image et la transfère à sa destination dans le format"
" approprié. De même que pour les Sources, si un Récepteur particulier est "
"inactif (par exemple, aucun client n'est connecté à un serveur MJPEG "
"configuré sur HTTP), la librairie peut désactiver des parties de son "
"traitement pour économiser les ressources du processeur."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:71
msgid ""
"User code (such as that used in a FRC robot program) can act as either a "
"source (providing processed frames as if it were a camera) or as a sink "
"(receiving a frame for processing) via OpenCV source and sink objects. Thus "
"an image processing pipeline that gets images from a camera and serves the "
"processed images out looks like the below graph:"
msgstr ""
"Le code utilisateur (tel que celui utilisé dans un programme de robot FRC) "
"peut agir soit comme Source (fournissant des images traitées comme s'il "
"s'agissait d'une caméra), soit comme Récepteur (recevant une image pour "
"traitement) via les objets Source et Récepteur OpenCV. Ainsi, un pipeline de"
" traitement d'image qui récupère les images d'une caméra et sert les images "
"traitées ressemble au graphique ci-dessous:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rstNone
msgid ""
"Block diagram showing that a program can either sink or source from OpenCV."
msgstr ""
"Schéma-bloc montrant qu’un programme peut soit recevoir, soit "
"s’approvisionner à partir d’OpenCV."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:76
msgid ""
"Because sources can have multiple sinks connected, the pipeline may branch. "
"For example, the original camera image can also be served by connecting the "
"UsbCamera source to a second MjpegServer sink in addition to the CvSink, "
"resulting in the below graph:"
msgstr ""
"Étant donné que les Sources peuvent avoir plusieurs Récepteurs connectés, le"
" pipeline peut se ramifier. Par exemple, l'image d'origine de la caméra peut"
" également être servie en connectant la Source UsbCamera à un deuxième "
"Récepteur MjpegServer en plus du récepteur CvSink, ce qui donne le graphique"
" ci-dessous:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rstNone
msgid "Block diagram of multiple sinks."
msgstr "Schéma-bloc de plusieurs récepteurs."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:81
msgid ""
"When a new image is captured by the camera, both the CvSink and the "
"MjpegServer [1] receive it."
msgstr ""
"Lorsqu'une nouvelle image est capturée par la caméra, le CvSink et le "
"MjpegServer [1] la reçoivent."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:83
msgid "The above graph is what the following CameraServer snippet creates:"
msgstr ""
"Le graphique ci-dessus est crée par le bout de code CameraServer ci-dessous:"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:115
msgid ""
"The CameraServer implementation effectively does the following at the cscore"
" level (for explanation purposes). CameraServer takes care of many of the "
"details such as creating unique names for all cscore objects and "
"automatically selecting port numbers. CameraServer also keeps a singleton "
"registry of created objects so they aren't destroyed if they go out of "
"scope."
msgstr ""
"L'implémentation de CameraServer effectue les opérations suivantes au niveau"
" cscore: CameraServer prend en charge de nombreux détails tels que la "
"création de noms uniques pour tous les objets cscore et la sélection "
"automatique des numéros de port. CameraServer conserve également un registre"
" de type \"singleton\" des objets créés afin qu'ils ne soient pas détruits "
"s'ils sortent de leur cadre, ou champ."

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:159
msgid "Reference Counting"
msgstr "Comptage de références"

#: ../../frc-docs/source/docs/software/vision-processing/introduction/cameraserver-class.rst:161
msgid ""
"All cscore objects are internally reference counted. Connecting a sink to a "
"source increments the source's reference count, so it's only strictly "
"necessary to keep the sink in scope. The CameraServer class keeps a registry"
" of all objects created with CameraServer functions, so sources and sinks "
"created in that way effectively never go out of scope (unless explicitly "
"removed)."
msgstr ""
"Tous les objets cscore sont comptés en interne. La connexion d'un Récepteur "
"à une Source augmente le compte de références de la Source, il est donc "
"strictement nécessaire de garder le Récepteur dans sa portée. La classe "
"CameraServer conserve un registre de tous les objets créés avec les "
"fonctions CameraServer, de sorte que les Sources et les Récepteurs créés de "
"cette manière ne sortent jamais de leur portée (sauf s'ils sont "
"explicitement supprimés)."
