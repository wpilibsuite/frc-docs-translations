# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, FIRST
# This file is distributed under the same license as the FIRST Robotics Competition package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
# Translators:
# Andre Theberge <atheberge2@videotron.ca>, 2020
# Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: FIRST Robotics Competition 2020\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-11-16 16:15+0000\n"
"PO-Revision-Date: 2020-04-25 02:00+0000\n"
"Last-Translator: Regis Bekale <rbekale@robotiquefirstquebec.org>, 2020\n"
"Language-Team: French (Canada) (https://www.transifex.com/wpilib/teams/109324/fr_CA/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: fr_CA\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:2
msgid "Addressable LEDs"
msgstr "DELs adressables"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:4
msgid ""
"LED strips have been commonly used by teams for several years for a variety "
"of reasons. They allow teams to debug robot functionality from the audience,"
" provide a visual marker for their robot, and can simply add some visual "
"appeal. WPILib has an API for controlling WS2812 LEDs with their data pin "
"connected via PWM."
msgstr ""
"Les bandes LED sont couramment utilisées par les équipes depuis plusieurs "
"années pour diverses raisons. Ils permettent aux équipes de déboguer la "
"fonctionnalité du robot, de fournir un marqueur visuel pour un mécanisme ou "
"tout simplement ajouter un attrait visuel pour les spectateurs. WPILib "
"dispose d'une API pour contrôler les LED WS2812 avec leur broche de données "
"connectée via PWM."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:7
msgid "Instantiating the AddressableLED Object"
msgstr "Instanciation de l'objet adressableLED"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:9
msgid ""
"You first create an ``AddressableLED`` object that takes the PWM port as an "
"argument. It *must* be a PWM header on the roboRIO. Then you set the number "
"of LEDs located on your LED strip, with can be done with the ``setLength()``"
" function."
msgstr ""
"Vous créez d'abord un objet ``AddressableLED`` qui prend le port PWM comme "
"argument. Ça doit être *obligatoirement* une sortie PWM  sur le roboRIO. "
"Ensuite, vous définissez le nombre de LED situées sur votre bande de LED, "
"par l'entremise de la fonction ``setLength()``."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:11
msgid ""
"It is important to note that setting the length of the LED header is an "
"expensive task and it's **not** recommended to run this periodically."
msgstr ""
"Il est important de noter que le réglage de la longueur décrit ci-haut est "
"une tâche relativement longue à exécuter pour le roboRIO, et il n'est "
"**pas** recommandé de l'exécuter périodiquement."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:13
msgid ""
"After the length of the strip has been set, you'll have to create an "
"``AddressableLEDBuffer`` object that takes the number of LEDs as an input. "
"You'll then call ``myAddressableLed.setData(myAddressableLEDBuffer)`` to set"
" the led output data. Finally, you can call ``myAddressableLed.start()`` to "
"write the output continuously. Below is a full example of the initialization"
" process."
msgstr ""
"Une fois la longueur de la bande définie, vous devrez créer un objet "
"``AddressableLEDBuffer`` qui prendra le nombre de LED comme entrée. Vous "
"appellerez ensuite ``myAddressableLed.setData(myAddressableLEDBuffer)`` pour"
" définir les données correspondant à chaque LED. Enfin, vous pouvez appeler "
"``myAddressableLed.start()`` pour écrire la sortie en continu. Voici un "
"exemple complet du processus d'initialisation."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:15
msgid "C++ does not have an AddressableLEDBuffer, and instead uses an Array."
msgstr ""
"C++ ne supporte pas un AddressableLEDBuffer et utilise à la place un "
"tableau."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:42
msgid "Setting the Entire Strip to One Color"
msgstr "Définition de la bande entière sur une seule couleur"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:44
msgid ""
"Color can be set to an individual led on the strip using two methods. "
"``setRGB()`` which takes RGB values as an input and ``setHSV()`` which takes"
" HSV values as an input."
msgstr ""
"La couleur peut être définie sur chaque DEL spécifique sur la bande en "
"utilisant deux méthodes. ``setRGB()``  qui prend les valeurs RGB comme "
"entrée et ``setHSV()``  qui prend les valeurs HSV comme entrée."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:47
msgid "Using RGB Values"
msgstr "Utilisation des valeurs RGB"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:49
msgid ""
"RGB stands for Red, Green, and Blue. This is a fairly common color model as "
"it's quite easy to understand. LEDs can be set with the ``setRGB`` method "
"that takes 4 arguments: index of the LED, amount of red, amount of green, "
"amount of blue. The amount of Red, Green, and Blue are integer values "
"between 0-255."
msgstr ""
"RGB signifie rouge, vert et bleu. Il s'agit d'un modèle de couleur assez "
"courant car il est assez facile à comprendre. Les LED peuvent être réglées "
"avec la méthode ``setRGB`` qui prend 4 arguments: index (ou position de la "
"LED sur la bande), valeur pour le rouge, valeur pour le vert, valeur pour le"
" bleu. Les valeurs de rouge, vert et bleu sont des entiers compris entre 0 "
"et 255."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:75
msgid "Using HSV Values"
msgstr "Utilisation des valeurs HSV"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:77
msgid ""
"HSV stands for Hue, Saturation, and Value. Hue describes the color or tint, "
"saturation being the amount of gray, and value being the brightness. In "
"WPILib, Hue is an integer from 0 - 180. Saturation and Value are integers "
"from 0 - 255. If you look at a color picker like `Google's "
"<https://www.google.com/search?q=color+picker>`_, Hue will be 0 - 360 and "
"Saturation and Value are from 0% to 100%. This is the same way that OpenCV "
"handles HSV colors. Make sure the HSV values entered to WPILib are correct, "
"or the color produced might not be the same as was expected."
msgstr ""
"HSV signifie Hue, Saturation et Value, ou Teinte, Saturation et Valeur. La "
"teinte correspond à la couleur, la saturation étant la quantité de gris et "
"la valeur étant la luminosité. Dans WPILib, Hue est un entier compris entre "
"0 et 180. Saturation et Value sont des nombres entiers compris entre 0 et "
"255. Si vous regardez un sélecteur de couleurs comme `celui de Google "
"<https://www.google.com/search?q=color+picker>`_, La teinte sera de 0 à 360 "
"et la saturation et la valeur de 0% à 100%. C'est de la même façon qu'OpenCV"
" gère les couleurs HSV. Assurez-vous que les valeurs HSV saisies dans WPILib"
" sont correctes, sinon la couleur pourrait différer de celle attendue."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:82
msgid ""
"LEDs can be set with the ``setHSV`` method that takes 4 arguments: index of "
"the LED, hue, saturation, and value. An example is shown below for setting "
"the color of an LED strip to red (hue of 0)."
msgstr ""
"Les LED peuvent être réglées avec la méthode ``setHSV`` qui prend 4 "
"arguments: index de la LED, Hue, Saturation et Value. Un exemple est "
"illustré ci-dessous pour définir la couleur d'une bande LED sur rouge "
"(teinte de 0)."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:108
msgid "Creating a Rainbow Effect"
msgstr "Création d'un effet arc-en-ciel"

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:110
msgid ""
"The below method does a couple of important things. Inside of the *for* "
"loop, it equally distributes the hue over the entire length of the strand "
"and stores the individual LED hue to a variable called ``hue``. Then the for"
" loop sets the HSV value of that specified pixel using the ``hue`` value."
msgstr ""
"La méthode ci-dessous fait plusieurs opérations. À l'intérieur de la boucle "
"*for*, la teinte (ou Hue) est distribuée de façon uniforme sur la bande de "
"LED et stocke la teinte individuelle des LED dans une variable appelée "
"``hue``. Ensuite, la boucle *for* définit la valeur HSV de ce pixel spécifié"
" en utilisant la valeur ``hue``."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:112
msgid ""
"Moving outside of the for loop, the ``m_rainbowFirstPixelHue`` then iterates"
" the pixel that contains the \"initial\" hue creating the rainbow effect. "
"``m_rainbowFirstPixelHue`` then checks to make sure that the hue is inside "
"the hue boundaries of 180. This is because HSV hue is a value from 0-180."
msgstr ""
"À l'extérieur de la boucle *for*, le ``m_rainbowFirstPixelHue`` itère "
"ensuite le pixel qui contient la teinte \"initiale\" créant l'effet arc-en-"
"ciel. ``m_rainbowFirstPixelHue`` vérifie ensuite pour s'assurer que la "
"teinte est à l'intérieur des limites de teinte de 180. En effet, la teinte "
"HSV est une valeur de 0 à 180."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:114
msgid ""
"It's good robot practice to keep the ``robotPeriodic()`` method as clean as "
"possible, so we'll create a method for handling setting our LED data. We'll "
"call this method ``rainbow()`` and call it from ``robotPeriodic()``."
msgstr ""
"C'est une bonne pratique de programmation de garder la méthode "
"``robotPeriodic()`` aussi claire et concise que possible, nous allons donc "
"créer une méthode pour gérer la configuration de nos données LED. Nous "
"appellerons cette méthode ``rainbow()`` et l'appellerons de "
"``robotPeriodic()``."

#: ../../frc-docs/source/docs/software/actuators/addressable-leds.rst:134
msgid ""
"Now that we have our ``rainbow`` method created, we have to actually call "
"the method and set the data of the LED."
msgstr ""
"Maintenant que nous avons créé notre méthode rainbow(), nous devons "
"l'appeler et définir les données qui iront à la bande de LED."
